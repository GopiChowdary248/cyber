services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: sast_postgres
    environment:
      POSTGRES_DB: cybershield
      POSTGRES_USER: security
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sast_schema.sql:/docker-entrypoint-initdb.d/01-sast-schema.sql
    ports:
      - "5432:5432"
    networks:
      - sast_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U security -d cybershield"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: sast_redis
    ports:
      - "6379:6379"
    networks:
      - sast_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SAST Backend API
  sast_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.sast
    container_name: sast_backend
    environment:
      - DATABASE_URL=postgresql://security:password@postgres:5432/cybershield
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - sast_reports:/app/reports
      - sast_uploads:/app/uploads
      - sast_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sast_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SAST Frontend (React Native Web)
  sast_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sast_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_SAST_ENABLED=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - sast_backend
    networks:
      - sast_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SAST Worker for background tasks
  sast_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.sast
    container_name: sast_worker
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
    environment:
      - DATABASE_URL=postgresql://security:password@postgres:5432/cybershield
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - sast_reports:/app/reports
      - sast_uploads:/app/uploads
      - sast_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sast_network

  # SAST Tools Container (for scanning tools)
  sast_tools:
    image: python:3.11-slim
    container_name: sast_tools
    environment:
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - sast_tools_data:/opt/sast-tools
    command: >
      bash -c "
        apt-get update && apt-get install -y 
          nodejs npm git curl wget unzip
          build-essential python3-dev
        && pip install bandit semgrep pylint
        && npm install -g eslint
        && echo 'SAST tools installed successfully'
        && tail -f /dev/null
      "
    networks:
      - sast_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sast_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - sast_reports:/var/www/reports:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - sast_backend
      - sast_frontend
    networks:
      - sast_network

  # Jenkins for CI/CD Integration (Optional)
  jenkins:
    image: jenkins/jenkins:lts
    container_name: sast_jenkins
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - sast_network
    profiles:
      - ci-cd

  # SonarQube (Optional - for comparison)
  sonarqube:
    image: sonarqube:community
    container_name: sast_sonarqube
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    networks:
      - sast_network
    profiles:
      - comparison

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sast_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sast_network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sast_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - sast_network
    profiles:
      - monitoring

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sast_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sast_network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sast_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sast_network
    profiles:
      - logging

volumes:
  postgres_data:
  redis_data:
  sast_reports:
  sast_uploads:
  sast_logs:
  sast_tools_data:
  jenkins_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  sast_network:
    driver: bridge 