version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cybershield-postgres
    environment:
      POSTGRES_DB: cybershield_cspm
      POSTGRES_USER: cybershield
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybershield -d cybershield_cspm"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: cybershield-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cybershield-backend
    environment:
      - DATABASE_URL=postgresql://cybershield:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/cybershield_cspm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - OPA_URL=http://opa:8181
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cybershield-celery-worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4 --queues=cspm,scans,remediation
    environment:
      - DATABASE_URL=postgresql://cybershield:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/cybershield_cspm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cybershield-network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cybershield-celery-beat
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://cybershield:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/cybershield_cspm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cybershield-network
    restart: unless-stopped

  # OPA (Open Policy Agent) for policy evaluation
  opa:
    image: openpolicyagent/opa:latest
    container_name: cybershield-opa
    command: run --server --addr :8181 --log-level info
    ports:
      - "8181:8181"
    volumes:
      - ./policies:/policies
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: cybershield-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - cybershield-network
    restart: unless-stopped

  # Mobile App (React Native Web)
  mobile:
    build:
      context: ./mobile
      dockerfile: Dockerfile.production
    container_name: cybershield-mobile
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - cybershield-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cybershield-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
      - mobile
    networks:
      - cybershield-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cybershield-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cybershield-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cybershield-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cybershield-network
    restart: unless-stopped

  # pgBouncer for connection pooling
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: cybershield-pgbouncer
    environment:
      - DB_HOST=postgres
      - DB_USER=cybershield
      - DB_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - DB_NAME=cybershield_cspm
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
    ports:
      - "5433:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cybershield-network
    restart: unless-stopped

  # Vault for secret management (optional)
  vault:
    image: vault:latest
    container_name: cybershield-vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-dev-token-123}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - cybershield-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cybershield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
