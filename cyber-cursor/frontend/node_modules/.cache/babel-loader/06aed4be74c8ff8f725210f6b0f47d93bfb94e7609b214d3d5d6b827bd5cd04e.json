{"ast":null,"code":"var _ServiceRegistry;\nimport apiClient from './apiClient';\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\n\n// Retry function for API calls\nexport const apiCallWithRetry = async (apiCall, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await apiCall();\n    } catch (error) {\n      lastError = error;\n      if (attempt === maxRetries) {\n        throw error;\n      }\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\n    }\n  }\n  throw lastError;\n};\n\n// Unified service registry\nexport class ServiceRegistry {\n  constructor() {\n    this.apiClient = void 0;\n    this.endpoints = void 0;\n    this.apiClient = apiClient;\n    this.endpoints = API_ENDPOINTS;\n  }\n  static getInstance() {\n    if (!ServiceRegistry.instance) {\n      ServiceRegistry.instance = new ServiceRegistry();\n    }\n    return ServiceRegistry.instance;\n  }\n\n  // Generic API methods\n  async get(url, config) {\n    try {\n      const response = await this.apiClient.get(url, config);\n      return response.data;\n    } catch (error) {\n      console.error(`GET request failed for ${url}:`, error);\n      throw error;\n    }\n  }\n  async post(url, data, config) {\n    try {\n      const response = await this.apiClient.post(url, data, config);\n      return response.data;\n    } catch (error) {\n      console.error(`POST request failed for ${url}:`, error);\n      throw error;\n    }\n  }\n  async put(url, data, config) {\n    try {\n      const response = await this.apiClient.put(url, data, config);\n      return response.data;\n    } catch (error) {\n      console.error(`PUT request failed for ${url}:`, error);\n      throw error;\n    }\n  }\n  async delete(url, config) {\n    try {\n      const response = await this.apiClient.delete(url, config);\n      return response.data;\n    } catch (error) {\n      console.error(`DELETE request failed for ${url}:`, error);\n      throw error;\n    }\n  }\n  async patch(url, data, config) {\n    try {\n      const response = await this.apiClient.patch(url, data, config);\n      return response.data;\n    } catch (error) {\n      console.error(`PATCH request failed for ${url}:`, error);\n      throw error;\n    }\n  }\n\n  // Get endpoints\n  getEndpoints() {\n    return this.endpoints;\n  }\n\n  // Get API client\n  getApiClient() {\n    return this.apiClient;\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('access_token');\n    return !!token;\n  }\n\n  // Get auth token\n  getAuthToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  // Clear auth data\n  clearAuth() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n  }\n}\n\n// Export singleton instance\n_ServiceRegistry = ServiceRegistry;\nServiceRegistry.instance = void 0;\nexport const serviceRegistry = ServiceRegistry.getInstance();\n\n// Export individual methods for convenience\nexport const {\n  get,\n  post,\n  put,\n  delete: del,\n  patch\n} = serviceRegistry;\nexport const {\n  getEndpoints,\n  isAuthenticated,\n  getAuthToken,\n  clearAuth\n} = serviceRegistry;","map":{"version":3,"names":["apiClient","API_ENDPOINTS","apiCallWithRetry","apiCall","maxRetries","delay","lastError","attempt","error","Promise","resolve","setTimeout","ServiceRegistry","constructor","endpoints","getInstance","instance","get","url","config","response","data","console","post","put","delete","patch","getEndpoints","getApiClient","isAuthenticated","token","localStorage","getItem","getAuthToken","clearAuth","removeItem","_ServiceRegistry","serviceRegistry","del"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/serviceRegistry.ts"],"sourcesContent":["import apiClient from './apiClient';\r\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\r\n\r\n// Retry function for API calls\r\nexport const apiCallWithRetry = async <T>(\r\n  apiCall: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: any;\r\n  \r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await apiCall();\r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      if (attempt === maxRetries) {\r\n        throw error;\r\n      }\r\n      \r\n      // Wait before retrying\r\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\r\n    }\r\n  }\r\n  \r\n  throw lastError;\r\n};\r\n\r\n// Unified service registry\r\nexport class ServiceRegistry {\r\n  private static instance: ServiceRegistry;\r\n  private apiClient: typeof apiClient;\r\n  private endpoints: typeof API_ENDPOINTS;\r\n\r\n  private constructor() {\r\n    this.apiClient = apiClient;\r\n    this.endpoints = API_ENDPOINTS;\r\n  }\r\n\r\n  public static getInstance(): ServiceRegistry {\r\n    if (!ServiceRegistry.instance) {\r\n      ServiceRegistry.instance = new ServiceRegistry();\r\n    }\r\n    return ServiceRegistry.instance;\r\n  }\r\n\r\n  // Generic API methods\r\n  public async get<T>(url: string, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.get(url, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`GET request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async post<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.post(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`POST request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async put<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.put(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`PUT request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async delete<T>(url: string, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.delete(url, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`DELETE request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async patch<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.patch(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`PATCH request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get endpoints\r\n  public getEndpoints() {\r\n    return this.endpoints;\r\n  }\r\n\r\n  // Get API client\r\n  public getApiClient() {\r\n    return this.apiClient;\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  public isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('access_token');\r\n    return !!token;\r\n  }\r\n\r\n  // Get auth token\r\n  public getAuthToken(): string | null {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n\r\n  // Clear auth data\r\n  public clearAuth(): void {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('user');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const serviceRegistry = ServiceRegistry.getInstance();\r\n\r\n// Export individual methods for convenience\r\nexport const { get, post, put, delete: del, patch } = serviceRegistry;\r\nexport const { getEndpoints, isAuthenticated, getAuthToken, clearAuth } = serviceRegistry;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}