{"ast":null,"code":"import { api } from './apiClient';\n\n// Comprehensive Integration Service\n// This service ensures all frontend services are properly connected to backend endpoints\n\nclass ComprehensiveIntegrationService {\n  constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  }\n  // Test all available backend endpoints\n  async testAllIntegrations() {\n    const results = [];\n\n    // Test Authentication & Users\n    results.push(await this.testAuthIntegration());\n    results.push(await this.testUsersIntegration());\n\n    // Test Security Testing Services\n    results.push(await this.testSASTIntegration());\n    results.push(await this.testDASTIntegration());\n    results.push(await this.testRASPIntegration());\n\n    // Test Cloud & Network Security\n    results.push(await this.testCloudSecurityIntegration());\n    results.push(await this.testNetworkSecurityIntegration());\n    results.push(await this.testEndpointSecurityIntegration());\n\n    // Test Data & Analytics\n    results.push(await this.testDataSecurityIntegration());\n    results.push(await this.testSIEMSOARIntegration());\n    results.push(await this.testAnalyticsIntegration());\n\n    // Test Intelligence & Management\n    results.push(await this.testThreatIntelligenceIntegration());\n    results.push(await this.testIAMIntegration());\n    results.push(await this.testAdminIntegration());\n\n    // Test Additional Services\n    results.push(await this.testProjectsIntegration());\n    results.push(await this.testReportsIntegration());\n    results.push(await this.testCICDIntegration());\n    results.push(await this.testQualityGoalsIntegration());\n    results.push(await this.testDeviceControlIntegration());\n    results.push(await this.testDataProtectionIntegration());\n    results.push(await this.testMonitoringIntegration());\n    return results;\n  }\n\n  // Test Authentication Integration\n  async testAuthIntegration() {\n    const endpoints = [];\n    const startTime = Date.now();\n    try {\n      // Test login endpoint\n      const loginStart = Date.now();\n      try {\n        await api.post('/api/v1/auth/login', {\n          username: 'admin@cybershield.com',\n          password: 'password'\n        });\n        endpoints.push({\n          endpoint: '/api/v1/auth/login',\n          method: 'POST',\n          status: 'working',\n          responseTime: Date.now() - loginStart,\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        endpoints.push({\n          endpoint: '/api/v1/auth/login',\n          method: 'POST',\n          status: 'failing',\n          lastTested: new Date().toISOString(),\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n\n      // Test OAuth login endpoint\n      const oauthStart = Date.now();\n      try {\n        await api.post('/api/v1/auth/login/oauth', {\n          username: 'admin@cybershield.com',\n          password: 'password'\n        });\n        endpoints.push({\n          endpoint: '/api/v1/auth/login/oauth',\n          method: 'POST',\n          status: 'working',\n          responseTime: Date.now() - oauthStart,\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        endpoints.push({\n          endpoint: '/api/v1/auth/login/oauth',\n          method: 'POST',\n          status: 'failing',\n          lastTested: new Date().toISOString(),\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n\n      // Test health endpoint\n      try {\n        await api.get('/health');\n        endpoints.push({\n          endpoint: '/health',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        endpoints.push({\n          endpoint: '/health',\n          method: 'GET',\n          status: 'failing',\n          lastTested: new Date().toISOString(),\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    const averageResponseTime = endpoints.filter(e => e.responseTime).reduce((sum, e) => sum + (e.responseTime || 0), 0) / workingEndpoints || 0;\n    return {\n      service: 'Authentication & Health',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime\n    };\n  }\n\n  // Test Users Integration\n  async testUsersIntegration() {\n    const endpoints = [];\n    try {\n      // Test users endpoint (might require authentication)\n      try {\n        await api.get('/api/v1/users');\n        endpoints.push({\n          endpoint: '/api/v1/users',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          // 401 is expected without authentication\n          endpoints.push({\n            endpoint: '/api/v1/users',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/users',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'User Management',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test SAST Integration\n  async testSASTIntegration() {\n    const endpoints = [];\n    try {\n      // Test SAST dashboard endpoint\n      try {\n        await api.get('/api/v1/sast/dashboard');\n        endpoints.push({\n          endpoint: '/api/v1/sast/dashboard',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/sast/dashboard',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/sast/dashboard',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      // Test SAST projects endpoint\n      try {\n        await api.get('/api/v1/sast/projects');\n        endpoints.push({\n          endpoint: '/api/v1/sast/projects',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/sast/projects',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/sast/projects',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'SAST (Static Application Security Testing)',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test DAST Integration\n  async testDASTIntegration() {\n    const endpoints = [];\n    try {\n      // Test DAST endpoints\n      try {\n        await api.get('/dast');\n        endpoints.push({\n          endpoint: '/dast',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/dast',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/dast',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'DAST (Dynamic Application Security Testing)',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test RASP Integration\n  async testRASPIntegration() {\n    const endpoints = [];\n    try {\n      // Test RASP endpoints\n      try {\n        await api.get('/api/rasp');\n        endpoints.push({\n          endpoint: '/api/rasp',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/rasp',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/rasp',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'RASP (Runtime Application Self-Protection)',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Cloud Security Integration\n  async testCloudSecurityIntegration() {\n    const endpoints = [];\n    try {\n      // Test Cloud Security endpoints\n      try {\n        await api.get('/api/v1/cloud-security');\n        endpoints.push({\n          endpoint: '/api/v1/cloud-security',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/cloud-security',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/cloud-security',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Cloud Security',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Network Security Integration\n  async testNetworkSecurityIntegration() {\n    const endpoints = [];\n    try {\n      // Test Network Security endpoints\n      try {\n        await api.get('/api/v1/network-security');\n        endpoints.push({\n          endpoint: '/api/v1/network-security',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/network-security',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/network-security',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Network Security',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Endpoint Security Integration\n  async testEndpointSecurityIntegration() {\n    const endpoints = [];\n    try {\n      // Test Endpoint Security endpoints\n      try {\n        await api.get('/api/v1/endpoint-antivirus-edr');\n        endpoints.push({\n          endpoint: '/api/v1/endpoint-antivirus-edr',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/endpoint-antivirus-edr',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/endpoint-antivirus-edr',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Endpoint Security',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Data Security Integration\n  async testDataSecurityIntegration() {\n    const endpoints = [];\n    try {\n      // Test Data Security endpoints\n      try {\n        await api.get('/api/v1/data-security');\n        endpoints.push({\n          endpoint: '/api/v1/data-security',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/data-security',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/data-security',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Data Security',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test SIEM/SOAR Integration\n  async testSIEMSOARIntegration() {\n    const endpoints = [];\n    try {\n      // Test SIEM/SOAR endpoints\n      try {\n        await api.get('/api/v1/siem-soar');\n        endpoints.push({\n          endpoint: '/api/v1/siem-soar',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/siem-soar',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/siem-soar',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'SIEM/SOAR',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Analytics Integration\n  async testAnalyticsIntegration() {\n    const endpoints = [];\n    try {\n      // Test Analytics endpoints (if available)\n      try {\n        await api.get('/api/v1/analytics');\n        endpoints.push({\n          endpoint: '/api/v1/analytics',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/analytics',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else if (error instanceof Error && error.message.includes('404')) {\n          // Analytics endpoint might not exist yet\n          endpoints.push({\n            endpoint: '/api/v1/analytics',\n            method: 'GET',\n            status: 'not_tested',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/analytics',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Analytics',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Threat Intelligence Integration\n  async testThreatIntelligenceIntegration() {\n    const endpoints = [];\n    try {\n      // Test Threat Intelligence endpoints (if available)\n      try {\n        await api.get('/api/v1/threat-intelligence');\n        endpoints.push({\n          endpoint: '/api/v1/threat-intelligence',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/threat-intelligence',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else if (error instanceof Error && error.message.includes('404')) {\n          // Threat Intelligence endpoint might not exist yet\n          endpoints.push({\n            endpoint: '/api/v1/threat-intelligence',\n            method: 'GET',\n            status: 'not_tested',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/threat-intelligence',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Threat Intelligence',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test IAM Integration\n  async testIAMIntegration() {\n    const endpoints = [];\n    try {\n      // Test IAM endpoints\n      try {\n        await api.get('/api/v1/iam');\n        endpoints.push({\n          endpoint: '/api/v1/iam',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/iam',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/iam',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'IAM (Identity and Access Management)',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Admin Integration\n  async testAdminIntegration() {\n    const endpoints = [];\n    try {\n      // Test Admin endpoints (if available)\n      try {\n        await api.get('/api/v1/admin');\n        endpoints.push({\n          endpoint: '/api/v1/admin',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/admin',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else if (error instanceof Error && error.message.includes('404')) {\n          // Admin endpoint might not exist yet\n          endpoints.push({\n            endpoint: '/api/v1/admin',\n            method: 'GET',\n            status: 'not_tested',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/admin',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Admin',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Projects Integration\n  async testProjectsIntegration() {\n    const endpoints = [];\n    try {\n      // Test Projects endpoints\n      try {\n        await api.get('/api/v1/projects');\n        endpoints.push({\n          endpoint: '/api/v1/projects',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/projects',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/projects',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Projects',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Reports Integration\n  async testReportsIntegration() {\n    const endpoints = [];\n    try {\n      // Test Reports endpoints\n      try {\n        await api.get('/api/v1/reports');\n        endpoints.push({\n          endpoint: '/api/v1/reports',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/reports',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/reports',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Reports',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test CI/CD Integration\n  async testCICDIntegration() {\n    const endpoints = [];\n    try {\n      // Test CI/CD endpoints\n      try {\n        await api.get('/api/v1/cicd');\n        endpoints.push({\n          endpoint: '/api/v1/cicd',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/cicd',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/cicd',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'CI/CD',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Quality Goals Integration\n  async testQualityGoalsIntegration() {\n    const endpoints = [];\n    try {\n      // Test Quality Goals endpoints\n      try {\n        await api.get('/api/v1/quality-goals');\n        endpoints.push({\n          endpoint: '/api/v1/quality-goals',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/quality-goals',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/quality-goals',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Quality Goals',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Device Control Integration\n  async testDeviceControlIntegration() {\n    const endpoints = [];\n    try {\n      // Test Device Control endpoints\n      try {\n        await api.get('/api/v1/device-control');\n        endpoints.push({\n          endpoint: '/api/v1/device-control',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/device-control',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/device-control',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Device Control',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Data Protection Integration\n  async testDataProtectionIntegration() {\n    const endpoints = [];\n    try {\n      // Test Data Protection endpoints\n      try {\n        await api.get('/api/v1/data-protection');\n        endpoints.push({\n          endpoint: '/api/v1/data-protection',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/data-protection',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/data-protection',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Data Protection',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Test Monitoring Integration\n  async testMonitoringIntegration() {\n    const endpoints = [];\n    try {\n      // Test Monitoring SIEM/SOAR endpoints\n      try {\n        await api.get('/api/v1/monitoring-siem-soar');\n        endpoints.push({\n          endpoint: '/api/v1/monitoring-siem-soar',\n          method: 'GET',\n          status: 'working',\n          lastTested: new Date().toISOString()\n        });\n      } catch (error) {\n        if (error instanceof Error && error.message.includes('401')) {\n          endpoints.push({\n            endpoint: '/api/v1/monitoring-siem-soar',\n            method: 'GET',\n            status: 'working',\n            lastTested: new Date().toISOString()\n          });\n        } else {\n          endpoints.push({\n            endpoint: '/api/v1/monitoring-siem-soar',\n            method: 'GET',\n            status: 'failing',\n            lastTested: new Date().toISOString(),\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n    } catch (error) {\n      // Handle any unexpected errors\n    }\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\n    return {\n      service: 'Monitoring SIEM/SOAR',\n      success: failedEndpoints === 0,\n      endpoints,\n      totalEndpoints: endpoints.length,\n      workingEndpoints,\n      failedEndpoints,\n      averageResponseTime: 0\n    };\n  }\n\n  // Get overall integration health\n  async getOverallHealth() {\n    const results = await this.testAllIntegrations();\n    const totalServices = results.length;\n    const healthyServices = results.filter(r => r.success).length;\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\n    const overallHealth = Math.round(healthyServices / totalServices * 100);\n    return {\n      totalServices,\n      healthyServices,\n      partialServices,\n      unhealthyServices,\n      overallHealth,\n      services: results\n    };\n  }\n\n  // Export integration report\n  exportReport(results) {\n    const timestamp = new Date().toISOString();\n    let report = `# CyberShield Integration Report\\n\\n`;\n    report += `**Generated:** ${timestamp}\\n\\n`;\n    report += `## Summary\\n\\n`;\n    const totalServices = results.length;\n    const healthyServices = results.filter(r => r.success).length;\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\n    report += `- **Total Services:** ${totalServices}\\n`;\n    report += `- **Healthy Services:** ${healthyServices}\\n`;\n    report += `- **Partial Services:** ${partialServices}\\n`;\n    report += `- **Unhealthy Services:** ${unhealthyServices}\\n`;\n    report += `- **Overall Health:** ${Math.round(healthyServices / totalServices * 100)}%\\n\\n`;\n    report += `## Detailed Results\\n\\n`;\n    results.forEach(result => {\n      const status = result.success ? '✅' : result.workingEndpoints > 0 ? '⚠️' : '❌';\n      report += `### ${status} ${result.service}\\n\\n`;\n      report += `- **Status:** ${result.success ? 'Healthy' : result.workingEndpoints > 0 ? 'Partial' : 'Unhealthy'}\\n`;\n      report += `- **Working Endpoints:** ${result.workingEndpoints}/${result.totalEndpoints}\\n`;\n      report += `- **Failed Endpoints:** ${result.failedEndpoints}\\n`;\n      if (result.averageResponseTime > 0) {\n        report += `- **Average Response Time:** ${result.averageResponseTime.toFixed(2)}ms\\n`;\n      }\n      report += `\\n`;\n      if (result.endpoints.length > 0) {\n        report += `#### Endpoint Details:\\n\\n`;\n        result.endpoints.forEach(endpoint => {\n          const endpointStatus = endpoint.status === 'working' ? '✅' : endpoint.status === 'failing' ? '❌' : '⚠️';\n          report += `- ${endpointStatus} \\`${endpoint.method} ${endpoint.endpoint}\\` - ${endpoint.status}\\n`;\n          if (endpoint.error) {\n            report += `  - Error: ${endpoint.error}\\n`;\n          }\n        });\n        report += `\\n`;\n      }\n    });\n    return report;\n  }\n}\nexport const comprehensiveIntegrationService = new ComprehensiveIntegrationService();\nexport default comprehensiveIntegrationService;","map":{"version":3,"names":["api","ComprehensiveIntegrationService","constructor","baseUrl","process","env","REACT_APP_API_URL","testAllIntegrations","results","push","testAuthIntegration","testUsersIntegration","testSASTIntegration","testDASTIntegration","testRASPIntegration","testCloudSecurityIntegration","testNetworkSecurityIntegration","testEndpointSecurityIntegration","testDataSecurityIntegration","testSIEMSOARIntegration","testAnalyticsIntegration","testThreatIntelligenceIntegration","testIAMIntegration","testAdminIntegration","testProjectsIntegration","testReportsIntegration","testCICDIntegration","testQualityGoalsIntegration","testDeviceControlIntegration","testDataProtectionIntegration","testMonitoringIntegration","endpoints","startTime","Date","now","loginStart","post","username","password","endpoint","method","status","responseTime","lastTested","toISOString","error","Error","message","oauthStart","get","workingEndpoints","filter","e","length","failedEndpoints","averageResponseTime","reduce","sum","service","success","totalEndpoints","includes","getOverallHealth","totalServices","healthyServices","r","partialServices","unhealthyServices","overallHealth","Math","round","services","exportReport","timestamp","report","forEach","result","toFixed","endpointStatus","comprehensiveIntegrationService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/comprehensiveIntegrationService.ts"],"sourcesContent":["import { api } from './apiClient';\r\n\r\n// Comprehensive Integration Service\r\n// This service ensures all frontend services are properly connected to backend endpoints\r\n\r\nexport interface IntegrationStatus {\r\n  service: string;\r\n  status: 'healthy' | 'partial' | 'unhealthy';\r\n  endpoints: EndpointStatus[];\r\n  lastChecked: string;\r\n  overallHealth: number; // 0-100\r\n}\r\n\r\nexport interface EndpointStatus {\r\n  endpoint: string;\r\n  method: string;\r\n  status: 'working' | 'failing' | 'not_tested';\r\n  responseTime?: number;\r\n  lastTested: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface IntegrationTestResult {\r\n  service: string;\r\n  success: boolean;\r\n  endpoints: EndpointStatus[];\r\n  totalEndpoints: number;\r\n  workingEndpoints: number;\r\n  failedEndpoints: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nclass ComprehensiveIntegrationService {\r\n  private readonly baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Test all available backend endpoints\r\n  async testAllIntegrations(): Promise<IntegrationTestResult[]> {\r\n    const results: IntegrationTestResult[] = [];\r\n\r\n    // Test Authentication & Users\r\n    results.push(await this.testAuthIntegration());\r\n    results.push(await this.testUsersIntegration());\r\n\r\n    // Test Security Testing Services\r\n    results.push(await this.testSASTIntegration());\r\n    results.push(await this.testDASTIntegration());\r\n    results.push(await this.testRASPIntegration());\r\n\r\n    // Test Cloud & Network Security\r\n    results.push(await this.testCloudSecurityIntegration());\r\n    results.push(await this.testNetworkSecurityIntegration());\r\n    results.push(await this.testEndpointSecurityIntegration());\r\n\r\n    // Test Data & Analytics\r\n    results.push(await this.testDataSecurityIntegration());\r\n    results.push(await this.testSIEMSOARIntegration());\r\n    results.push(await this.testAnalyticsIntegration());\r\n\r\n    // Test Intelligence & Management\r\n    results.push(await this.testThreatIntelligenceIntegration());\r\n    results.push(await this.testIAMIntegration());\r\n    results.push(await this.testAdminIntegration());\r\n\r\n    // Test Additional Services\r\n    results.push(await this.testProjectsIntegration());\r\n    results.push(await this.testReportsIntegration());\r\n    results.push(await this.testCICDIntegration());\r\n    results.push(await this.testQualityGoalsIntegration());\r\n    results.push(await this.testDeviceControlIntegration());\r\n    results.push(await this.testDataProtectionIntegration());\r\n    results.push(await this.testMonitoringIntegration());\r\n\r\n    return results;\r\n  }\r\n\r\n  // Test Authentication Integration\r\n  private async testAuthIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Test login endpoint\r\n      const loginStart = Date.now();\r\n      try {\r\n        await api.post('/api/v1/auth/login', {\r\n          username: 'admin@cybershield.com',\r\n          password: 'password'\r\n        });\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login',\r\n          method: 'POST',\r\n          status: 'working',\r\n          responseTime: Date.now() - loginStart,\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login',\r\n          method: 'POST',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n      // Test OAuth login endpoint\r\n      const oauthStart = Date.now();\r\n      try {\r\n        await api.post('/api/v1/auth/login/oauth', {\r\n          username: 'admin@cybershield.com',\r\n          password: 'password'\r\n        });\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login/oauth',\r\n          method: 'POST',\r\n          status: 'working',\r\n          responseTime: Date.now() - oauthStart,\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login/oauth',\r\n          method: 'POST',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n      // Test health endpoint\r\n      try {\r\n        await api.get('/health');\r\n        endpoints.push({\r\n          endpoint: '/health',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/health',\r\n          method: 'GET',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n    const averageResponseTime = endpoints\r\n      .filter(e => e.responseTime)\r\n      .reduce((sum, e) => sum + (e.responseTime || 0), 0) / workingEndpoints || 0;\r\n\r\n    return {\r\n      service: 'Authentication & Health',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime\r\n    };\r\n  }\r\n\r\n  // Test Users Integration\r\n  private async testUsersIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test users endpoint (might require authentication)\r\n      try {\r\n        await api.get('/api/v1/users');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/users',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          // 401 is expected without authentication\r\n          endpoints.push({\r\n            endpoint: '/api/v1/users',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/users',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'User Management',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test SAST Integration\r\n  private async testSASTIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test SAST dashboard endpoint\r\n      try {\r\n        await api.get('/api/v1/sast/dashboard');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/sast/dashboard',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/dashboard',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/dashboard',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Test SAST projects endpoint\r\n      try {\r\n        await api.get('/api/v1/sast/projects');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/sast/projects',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/projects',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/projects',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'SAST (Static Application Security Testing)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test DAST Integration\r\n  private async testDASTIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test DAST endpoints\r\n      try {\r\n        await api.get('/dast');\r\n        endpoints.push({\r\n          endpoint: '/dast',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/dast',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/dast',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'DAST (Dynamic Application Security Testing)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test RASP Integration\r\n  private async testRASPIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test RASP endpoints\r\n      try {\r\n        await api.get('/api/rasp');\r\n        endpoints.push({\r\n          endpoint: '/api/rasp',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/rasp',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/rasp',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'RASP (Runtime Application Self-Protection)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Cloud Security Integration\r\n  private async testCloudSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Cloud Security endpoints\r\n      try {\r\n        await api.get('/api/v1/cloud-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/cloud-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cloud-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cloud-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Cloud Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Network Security Integration\r\n  private async testNetworkSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Network Security endpoints\r\n      try {\r\n        await api.get('/api/v1/network-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/network-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/network-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/network-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Network Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Endpoint Security Integration\r\n  private async testEndpointSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Endpoint Security endpoints\r\n      try {\r\n        await api.get('/api/v1/endpoint-antivirus-edr');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/endpoint-antivirus-edr',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/endpoint-antivirus-edr',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/endpoint-antivirus-edr',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Endpoint Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Data Security Integration\r\n  private async testDataSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Data Security endpoints\r\n      try {\r\n        await api.get('/api/v1/data-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/data-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Data Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test SIEM/SOAR Integration\r\n  private async testSIEMSOARIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test SIEM/SOAR endpoints\r\n      try {\r\n        await api.get('/api/v1/siem-soar');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/siem-soar',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/siem-soar',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/siem-soar',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'SIEM/SOAR',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Analytics Integration\r\n  private async testAnalyticsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Analytics endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/analytics');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/analytics',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Analytics endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Analytics',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Threat Intelligence Integration\r\n  private async testThreatIntelligenceIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Threat Intelligence endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/threat-intelligence');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/threat-intelligence',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Threat Intelligence endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Threat Intelligence',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test IAM Integration\r\n  private async testIAMIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test IAM endpoints\r\n      try {\r\n        await api.get('/api/v1/iam');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/iam',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/iam',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/iam',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'IAM (Identity and Access Management)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Admin Integration\r\n  private async testAdminIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Admin endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/admin');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/admin',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Admin endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Admin',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Projects Integration\r\n  private async testProjectsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Projects endpoints\r\n      try {\r\n        await api.get('/api/v1/projects');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/projects',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/projects',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/projects',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Projects',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Reports Integration\r\n  private async testReportsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Reports endpoints\r\n      try {\r\n        await api.get('/api/v1/reports');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/reports',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/reports',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/reports',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Reports',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test CI/CD Integration\r\n  private async testCICDIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test CI/CD endpoints\r\n      try {\r\n        await api.get('/api/v1/cicd');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/cicd',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cicd',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cicd',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'CI/CD',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Quality Goals Integration\r\n  private async testQualityGoalsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Quality Goals endpoints\r\n      try {\r\n        await api.get('/api/v1/quality-goals');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/quality-goals',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/quality-goals',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/quality-goals',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Quality Goals',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Device Control Integration\r\n  private async testDeviceControlIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Device Control endpoints\r\n      try {\r\n        await api.get('/api/v1/device-control');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/device-control',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/device-control',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/device-control',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Device Control',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Data Protection Integration\r\n  private async testDataProtectionIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Data Protection endpoints\r\n      try {\r\n        await api.get('/api/v1/data-protection');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/data-protection',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-protection',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-protection',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Data Protection',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Monitoring Integration\r\n  private async testMonitoringIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Monitoring SIEM/SOAR endpoints\r\n      try {\r\n        await api.get('/api/v1/monitoring-siem-soar');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/monitoring-siem-soar',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/monitoring-siem-soar',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/monitoring-siem-soar',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Monitoring SIEM/SOAR',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Get overall integration health\r\n  async getOverallHealth(): Promise<{\r\n    totalServices: number;\r\n    healthyServices: number;\r\n    partialServices: number;\r\n    unhealthyServices: number;\r\n    overallHealth: number;\r\n    services: IntegrationTestResult[];\r\n  }> {\r\n    const results = await this.testAllIntegrations();\r\n    \r\n    const totalServices = results.length;\r\n    const healthyServices = results.filter(r => r.success).length;\r\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\r\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\r\n    const overallHealth = Math.round((healthyServices / totalServices) * 100);\r\n\r\n    return {\r\n      totalServices,\r\n      healthyServices,\r\n      partialServices,\r\n      unhealthyServices,\r\n      overallHealth,\r\n      services: results\r\n    };\r\n  }\r\n\r\n  // Export integration report\r\n  exportReport(results: IntegrationTestResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    let report = `# CyberShield Integration Report\\n\\n`;\r\n    report += `**Generated:** ${timestamp}\\n\\n`;\r\n    \r\n    report += `## Summary\\n\\n`;\r\n    const totalServices = results.length;\r\n    const healthyServices = results.filter(r => r.success).length;\r\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\r\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\r\n    \r\n    report += `- **Total Services:** ${totalServices}\\n`;\r\n    report += `- **Healthy Services:** ${healthyServices}\\n`;\r\n    report += `- **Partial Services:** ${partialServices}\\n`;\r\n    report += `- **Unhealthy Services:** ${unhealthyServices}\\n`;\r\n    report += `- **Overall Health:** ${Math.round((healthyServices / totalServices) * 100)}%\\n\\n`;\r\n    \r\n    report += `## Detailed Results\\n\\n`;\r\n    \r\n    results.forEach(result => {\r\n      const status = result.success ? '✅' : result.workingEndpoints > 0 ? '⚠️' : '❌';\r\n      report += `### ${status} ${result.service}\\n\\n`;\r\n      report += `- **Status:** ${result.success ? 'Healthy' : result.workingEndpoints > 0 ? 'Partial' : 'Unhealthy'}\\n`;\r\n      report += `- **Working Endpoints:** ${result.workingEndpoints}/${result.totalEndpoints}\\n`;\r\n      report += `- **Failed Endpoints:** ${result.failedEndpoints}\\n`;\r\n      if (result.averageResponseTime > 0) {\r\n        report += `- **Average Response Time:** ${result.averageResponseTime.toFixed(2)}ms\\n`;\r\n      }\r\n      report += `\\n`;\r\n      \r\n      if (result.endpoints.length > 0) {\r\n        report += `#### Endpoint Details:\\n\\n`;\r\n        result.endpoints.forEach(endpoint => {\r\n          const endpointStatus = endpoint.status === 'working' ? '✅' : endpoint.status === 'failing' ? '❌' : '⚠️';\r\n          report += `- ${endpointStatus} \\`${endpoint.method} ${endpoint.endpoint}\\` - ${endpoint.status}\\n`;\r\n          if (endpoint.error) {\r\n            report += `  - Error: ${endpoint.error}\\n`;\r\n          }\r\n        });\r\n        report += `\\n`;\r\n      }\r\n    });\r\n    \r\n    return report;\r\n  }\r\n}\r\n\r\nexport const comprehensiveIntegrationService = new ComprehensiveIntegrationService();\r\nexport default comprehensiveIntegrationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}