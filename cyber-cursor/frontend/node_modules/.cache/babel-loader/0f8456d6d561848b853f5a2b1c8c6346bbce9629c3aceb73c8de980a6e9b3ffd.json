{"ast":null,"code":"var _jsxFileName = \"D:\\\\curser\\\\copy-of-git-10-082025\\\\cyber-cursor\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // API base URL - update this to match your backend\n  const API_BASE_URL = 'http://localhost:8000';\n\n  // Real authentication with PostgreSQL backend\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: email,\n          // Backend expects 'username' field\n          password: password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Login failed');\n      }\n      const data = await response.json();\n\n      // Store tokens\n      localStorage.setItem('access_token', data.access_token);\n      localStorage.setItem('refresh_token', data.refresh_token);\n\n      // Create user object\n      const userData = {\n        id: data.user_id,\n        email: data.email,\n        username: email.split('@')[0],\n        // Extract username from email\n        role: data.role,\n        is_active: true,\n        created_at: new Date().toISOString()\n      };\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Login failed:', error);\n      setError(error instanceof Error ? error.message : 'Login failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    setUser(null);\n    navigate('/login');\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/api/v1/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n\n      // After successful registration, log in the user\n      await login(userData.email, userData.password);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      setError(error instanceof Error ? error.message : 'Registration failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async data => {\n    try {\n      setLoading(true);\n      setError(null);\n      const token = localStorage.getItem('access_token');\n      if (!token) {\n        throw new Error('No access token available');\n      }\n      const response = await fetch(`${API_BASE_URL}/api/v1/users/profile`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Profile update failed');\n      }\n      if (user) {\n        const updatedUser = {\n          ...user,\n          ...data\n        };\n        setUser(updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n      }\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      setError(error instanceof Error ? error.message : 'Profile update failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    const storedUser = localStorage.getItem('user');\n    if (token && storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setUser(userData);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"OehEcY2uC6SeZYRr5JsGBhoFpf8=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","navigate","API_BASE_URL","login","email","password","response","fetch","method","headers","body","JSON","stringify","username","ok","errorData","json","catch","detail","data","localStorage","setItem","access_token","refresh_token","userData","id","user_id","split","role","is_active","created_at","Date","toISOString","console","message","logout","removeItem","register","updateProfile","token","getItem","updatedUser","storedUser","parse","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  username: string;\r\n  full_name?: string;\r\n  role: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  updateProfile: (data: Partial<User>) => Promise<void>;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirm_password: string;\r\n  full_name?: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  user_id: number;\r\n  email: string;\r\n  role: string;\r\n  mfa_required: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  // API base URL - update this to match your backend\r\n  const API_BASE_URL = 'http://localhost:8000';\r\n\r\n  // Real authentication with PostgreSQL backend\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: email, // Backend expects 'username' field\r\n          password: password\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.detail || 'Login failed');\r\n      }\r\n\r\n      const data: LoginResponse = await response.json();\r\n      \r\n      // Store tokens\r\n      localStorage.setItem('access_token', data.access_token);\r\n      localStorage.setItem('refresh_token', data.refresh_token);\r\n      \r\n      // Create user object\r\n      const userData: User = {\r\n        id: data.user_id,\r\n        email: data.email,\r\n        username: email.split('@')[0], // Extract username from email\r\n        role: data.role,\r\n        is_active: true,\r\n        created_at: new Date().toISOString()\r\n      };\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      navigate('/dashboard');\r\n      \r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      setError(error instanceof Error ? error.message : 'Login failed. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    navigate('/login');\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/v1/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.detail || 'Registration failed');\r\n      }\r\n\r\n      // After successful registration, log in the user\r\n      await login(userData.email, userData.password);\r\n      \r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      setError(error instanceof Error ? error.message : 'Registration failed. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (data: Partial<User>) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        throw new Error('No access token available');\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/api/v1/users/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.detail || 'Profile update failed');\r\n      }\r\n\r\n      if (user) {\r\n        const updatedUser = { ...user, ...data };\r\n        setUser(updatedUser);\r\n        localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Profile update failed:', error);\r\n      setError(error instanceof Error ? error.message : 'Profile update failed. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Check if user is already authenticated on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('access_token');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (token && storedUser) {\r\n      try {\r\n        const userData = JSON.parse(storedUser);\r\n        setUser(userData);\r\n      } catch (error) {\r\n        console.error('Error parsing user data:', error);\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}