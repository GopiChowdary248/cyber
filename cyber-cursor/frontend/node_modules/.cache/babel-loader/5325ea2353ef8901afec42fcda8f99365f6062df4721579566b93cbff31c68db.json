{"ast":null,"code":"var _ServiceRegistry;import apiClient from'./apiClient';import{API_ENDPOINTS}from'./comprehensiveIntegrationService';// Retry function for API calls\nexport const apiCallWithRetry=async function(apiCall){let maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;let delay=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;let lastError;for(let attempt=1;attempt<=maxRetries;attempt++){try{return await apiCall();}catch(error){lastError=error;if(attempt===maxRetries){throw error;}// Wait before retrying\nawait new Promise(resolve=>setTimeout(resolve,delay*attempt));}}throw lastError;};// Unified service registry\nexport class ServiceRegistry{constructor(){this.apiClient=void 0;this.endpoints=void 0;this.apiClient=apiClient;this.endpoints=API_ENDPOINTS;}static getInstance(){if(!ServiceRegistry.instance){ServiceRegistry.instance=new ServiceRegistry();}return ServiceRegistry.instance;}// Generic API methods\nasync get(url,config){try{const response=await this.apiClient.get(url,config);return response.data;}catch(error){console.error(\"GET request failed for \".concat(url,\":\"),error);throw error;}}async post(url,data,config){try{const response=await this.apiClient.post(url,data,config);return response.data;}catch(error){console.error(\"POST request failed for \".concat(url,\":\"),error);throw error;}}async put(url,data,config){try{const response=await this.apiClient.put(url,data,config);return response.data;}catch(error){console.error(\"PUT request failed for \".concat(url,\":\"),error);throw error;}}async delete(url,config){try{const response=await this.apiClient.delete(url,config);return response.data;}catch(error){console.error(\"DELETE request failed for \".concat(url,\":\"),error);throw error;}}async patch(url,data,config){try{const response=await this.apiClient.patch(url,data,config);return response.data;}catch(error){console.error(\"PATCH request failed for \".concat(url,\":\"),error);throw error;}}// Get endpoints\ngetEndpoints(){return this.endpoints;}// Get API client\ngetApiClient(){return this.apiClient;}// Check if user is authenticated\nisAuthenticated(){const token=localStorage.getItem('access_token');return!!token;}// Get auth token\ngetAuthToken(){return localStorage.getItem('access_token');}// Clear auth data\nclearAuth(){localStorage.removeItem('access_token');localStorage.removeItem('user');}}// Export singleton instance\n_ServiceRegistry=ServiceRegistry;ServiceRegistry.instance=void 0;export const serviceRegistry=ServiceRegistry.getInstance();// Export individual methods for convenience\nexport const{get,post,put,delete:del,patch}=serviceRegistry;export const{getEndpoints,isAuthenticated,getAuthToken,clearAuth}=serviceRegistry;","map":{"version":3,"names":["apiClient","API_ENDPOINTS","apiCallWithRetry","apiCall","maxRetries","arguments","length","undefined","delay","lastError","attempt","error","Promise","resolve","setTimeout","ServiceRegistry","constructor","endpoints","getInstance","instance","get","url","config","response","data","console","concat","post","put","delete","patch","getEndpoints","getApiClient","isAuthenticated","token","localStorage","getItem","getAuthToken","clearAuth","removeItem","_ServiceRegistry","serviceRegistry","del"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/serviceRegistry.ts"],"sourcesContent":["import apiClient from './apiClient';\r\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\r\n\r\n// Retry function for API calls\r\nexport const apiCallWithRetry = async <T>(\r\n  apiCall: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: any;\r\n  \r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await apiCall();\r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      if (attempt === maxRetries) {\r\n        throw error;\r\n      }\r\n      \r\n      // Wait before retrying\r\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\r\n    }\r\n  }\r\n  \r\n  throw lastError;\r\n};\r\n\r\n// Unified service registry\r\nexport class ServiceRegistry {\r\n  private static instance: ServiceRegistry;\r\n  private apiClient: typeof apiClient;\r\n  private endpoints: typeof API_ENDPOINTS;\r\n\r\n  private constructor() {\r\n    this.apiClient = apiClient;\r\n    this.endpoints = API_ENDPOINTS;\r\n  }\r\n\r\n  public static getInstance(): ServiceRegistry {\r\n    if (!ServiceRegistry.instance) {\r\n      ServiceRegistry.instance = new ServiceRegistry();\r\n    }\r\n    return ServiceRegistry.instance;\r\n  }\r\n\r\n  // Generic API methods\r\n  public async get<T>(url: string, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.get(url, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`GET request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async post<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.post(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`POST request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async put<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.put(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`PUT request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async delete<T>(url: string, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.delete(url, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`DELETE request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public async patch<T>(url: string, data?: any, config?: any): Promise<T> {\r\n    try {\r\n      const response = await this.apiClient.patch(url, data, config);\r\n      return response.data as T;\r\n    } catch (error) {\r\n      console.error(`PATCH request failed for ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get endpoints\r\n  public getEndpoints() {\r\n    return this.endpoints;\r\n  }\r\n\r\n  // Get API client\r\n  public getApiClient() {\r\n    return this.apiClient;\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  public isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('access_token');\r\n    return !!token;\r\n  }\r\n\r\n  // Get auth token\r\n  public getAuthToken(): string | null {\r\n    return localStorage.getItem('access_token');\r\n  }\r\n\r\n  // Clear auth data\r\n  public clearAuth(): void {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('user');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const serviceRegistry = ServiceRegistry.getInstance();\r\n\r\n// Export individual methods for convenience\r\nexport const { get, post, put, delete: del, patch } = serviceRegistry;\r\nexport const { getEndpoints, isAuthenticated, getAuthToken, clearAuth } = serviceRegistry;\r\n"],"mappings":"qBAAA,MAAO,CAAAA,SAAS,KAAM,aAAa,CACnC,OAASC,aAAa,KAAQ,mCAAmC,CAEjE;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,cAAAA,CAC9BC,OAAyB,CAGV,IAFf,CAAAC,UAAkB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IACtB,CAAAG,KAAa,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAEpB,GAAI,CAAAI,SAAc,CAElB,IAAK,GAAI,CAAAC,OAAO,CAAG,CAAC,CAAEA,OAAO,EAAIN,UAAU,CAAEM,OAAO,EAAE,CAAE,CACtD,GAAI,CACF,MAAO,MAAM,CAAAP,OAAO,CAAC,CAAC,CACxB,CAAE,MAAOQ,KAAK,CAAE,CACdF,SAAS,CAAGE,KAAK,CAEjB,GAAID,OAAO,GAAKN,UAAU,CAAE,CAC1B,KAAM,CAAAO,KAAK,CACb,CAEA;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAEL,KAAK,CAAGE,OAAO,CAAC,CAAC,CACpE,CACF,CAEA,KAAM,CAAAD,SAAS,CACjB,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,eAAgB,CAKnBC,WAAWA,CAAA,CAAG,MAHdhB,SAAS,aACTiB,SAAS,QAGf,IAAI,CAACjB,SAAS,CAAGA,SAAS,CAC1B,IAAI,CAACiB,SAAS,CAAGhB,aAAa,CAChC,CAEA,MAAc,CAAAiB,WAAWA,CAAA,CAAoB,CAC3C,GAAI,CAACH,eAAe,CAACI,QAAQ,CAAE,CAC7BJ,eAAe,CAACI,QAAQ,CAAG,GAAI,CAAAJ,eAAe,CAAC,CAAC,CAClD,CACA,MAAO,CAAAA,eAAe,CAACI,QAAQ,CACjC,CAEA;AACA,KAAa,CAAAC,GAAGA,CAAIC,GAAW,CAAEC,MAAY,CAAc,CACzD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACvB,SAAS,CAACoB,GAAG,CAACC,GAAG,CAAEC,MAAM,CAAC,CACtD,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOb,KAAK,CAAE,CACdc,OAAO,CAACd,KAAK,2BAAAe,MAAA,CAA2BL,GAAG,MAAKV,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAa,CAAAgB,IAAIA,CAAIN,GAAW,CAAEG,IAAU,CAAEF,MAAY,CAAc,CACtE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACvB,SAAS,CAAC2B,IAAI,CAACN,GAAG,CAAEG,IAAI,CAAEF,MAAM,CAAC,CAC7D,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOb,KAAK,CAAE,CACdc,OAAO,CAACd,KAAK,4BAAAe,MAAA,CAA4BL,GAAG,MAAKV,KAAK,CAAC,CACvD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAa,CAAAiB,GAAGA,CAAIP,GAAW,CAAEG,IAAU,CAAEF,MAAY,CAAc,CACrE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACvB,SAAS,CAAC4B,GAAG,CAACP,GAAG,CAAEG,IAAI,CAAEF,MAAM,CAAC,CAC5D,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOb,KAAK,CAAE,CACdc,OAAO,CAACd,KAAK,2BAAAe,MAAA,CAA2BL,GAAG,MAAKV,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAa,CAAAkB,MAAMA,CAAIR,GAAW,CAAEC,MAAY,CAAc,CAC5D,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACvB,SAAS,CAAC6B,MAAM,CAACR,GAAG,CAAEC,MAAM,CAAC,CACzD,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOb,KAAK,CAAE,CACdc,OAAO,CAACd,KAAK,8BAAAe,MAAA,CAA8BL,GAAG,MAAKV,KAAK,CAAC,CACzD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAa,CAAAmB,KAAKA,CAAIT,GAAW,CAAEG,IAAU,CAAEF,MAAY,CAAc,CACvE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,KAAI,CAACvB,SAAS,CAAC8B,KAAK,CAACT,GAAG,CAAEG,IAAI,CAAEF,MAAM,CAAC,CAC9D,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOb,KAAK,CAAE,CACdc,OAAO,CAACd,KAAK,6BAAAe,MAAA,CAA6BL,GAAG,MAAKV,KAAK,CAAC,CACxD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACOoB,YAAYA,CAAA,CAAG,CACpB,MAAO,KAAI,CAACd,SAAS,CACvB,CAEA;AACOe,YAAYA,CAAA,CAAG,CACpB,MAAO,KAAI,CAAChC,SAAS,CACvB,CAEA;AACOiC,eAAeA,CAAA,CAAY,CAChC,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAClD,MAAO,CAAC,CAACF,KAAK,CAChB,CAEA;AACOG,YAAYA,CAAA,CAAkB,CACnC,MAAO,CAAAF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAC7C,CAEA;AACOE,SAASA,CAAA,CAAS,CACvBH,YAAY,CAACI,UAAU,CAAC,cAAc,CAAC,CACvCJ,YAAY,CAACI,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CAEA;AAAAC,gBAAA,CAhGazB,eAAe,CAAfA,eAAe,CACXI,QAAQ,QAgGzB,MAAO,MAAM,CAAAsB,eAAe,CAAG1B,eAAe,CAACG,WAAW,CAAC,CAAC,CAE5D;AACA,MAAO,MAAM,CAAEE,GAAG,CAAEO,IAAI,CAAEC,GAAG,CAAEC,MAAM,CAAEa,GAAG,CAAEZ,KAAM,CAAC,CAAGW,eAAe,CACrE,MAAO,MAAM,CAAEV,YAAY,CAAEE,eAAe,CAAEI,YAAY,CAAEC,SAAU,CAAC,CAAGG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}