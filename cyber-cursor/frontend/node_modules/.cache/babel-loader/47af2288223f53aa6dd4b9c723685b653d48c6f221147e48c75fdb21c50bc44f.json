{"ast":null,"code":"import { apiClient } from './apiClient';\nclass RASTService {\n  constructor() {\n    this.baseUrl = '/api/rast';\n  }\n  /**\r\n   * Get RAST overview statistics\r\n   */\n  async getOverview() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/overview`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RAST overview:', error);\n      // Return mock data for development\n      return {\n        total_projects: 12,\n        total_scans: 47,\n        active_scans: 3,\n        total_vulnerabilities: 156,\n        security_score: 82.5,\n        runtime_protection_status: 'active',\n        threat_detection_rate: 94.7,\n        average_response_time: 45,\n        false_positive_rate: 2.3\n      };\n    }\n  }\n\n  /**\r\n   * Get all RAST scans\r\n   */\n  async getScans() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/scans`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RAST scans:', error);\n      // Return mock data for development\n      return [{\n        id: 101,\n        project_id: 1,\n        project_name: 'E-commerce Web App',\n        scan_type: 'full',\n        status: 'COMPLETED',\n        started_at: '2025-08-10T10:30:00Z',\n        completed_at: '2025-08-10T10:33:45Z',\n        findings_count: 3,\n        critical_findings: 0,\n        high_findings: 1,\n        medium_findings: 2,\n        low_findings: 0,\n        duration: '3m 45s',\n        scan_config: {\n          protection_level: 'advanced',\n          monitoring_mode: 'hybrid',\n          alert_threshold: 'medium'\n        }\n      }, {\n        id: 102,\n        project_id: 2,\n        project_name: 'Admin Portal',\n        scan_type: 'active',\n        status: 'RUNNING',\n        started_at: '2025-08-10T09:15:00Z',\n        findings_count: 0,\n        critical_findings: 0,\n        high_findings: 0,\n        medium_findings: 0,\n        low_findings: 0,\n        scan_config: {\n          protection_level: 'enterprise',\n          monitoring_mode: 'active',\n          alert_threshold: 'high'\n        }\n      }];\n    }\n  }\n\n  /**\r\n   * Get all RAST projects\r\n   */\n  async getProjects() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/projects`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching RAST projects:', error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        name: 'E-commerce Web App',\n        url: 'https://demo-ecommerce.example.com',\n        description: 'Main e-commerce application for online shopping',\n        scan_type: 'full',\n        protection_level: 'advanced',\n        monitoring_mode: 'hybrid',\n        last_scan: {\n          id: 101,\n          project_id: 1,\n          project_name: 'E-commerce Web App',\n          scan_type: 'full',\n          status: 'COMPLETED',\n          started_at: '2025-08-10T10:30:00Z',\n          completed_at: '2025-08-10T10:33:45Z',\n          findings_count: 3,\n          critical_findings: 0,\n          high_findings: 1,\n          medium_findings: 2,\n          low_findings: 0,\n          scan_config: {\n            protection_level: 'advanced',\n            monitoring_mode: 'hybrid',\n            alert_threshold: 'medium'\n          }\n        },\n        vulnerabilities: {\n          critical: 0,\n          high: 1,\n          medium: 2,\n          low: 0\n        },\n        security_score: 85.5,\n        runtime_status: 'protected',\n        created_by: 'admin@example.com',\n        created_at: '2025-07-15T09:00:00Z',\n        updated_at: '2025-08-10T10:33:45Z'\n      }];\n    }\n  }\n\n  /**\r\n   * Get a specific RAST project by ID\r\n   */\n  async getProject(projectId) {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching RAST project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Create a new RAST project\r\n   */\n  async createProject(projectData) {\n    try {\n      const response = await apiClient.post(`${this.baseUrl}/projects`, projectData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating RAST project:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Update an existing RAST project\r\n   */\n  async updateProject(projectId, projectData) {\n    try {\n      const response = await apiClient.put(`${this.baseUrl}/projects/${projectId}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating RAST project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete a RAST project\r\n   */\n  async deleteProject(projectId) {\n    try {\n      await apiClient.delete(`${this.baseUrl}/projects/${projectId}`);\n    } catch (error) {\n      console.error(`Error deleting RAST project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Start a new RAST scan\r\n   */\n  async startScan(scanData) {\n    try {\n      const response = await apiClient.post(`${this.baseUrl}/scans`, scanData);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting RAST scan:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get scan results by scan ID\r\n   */\n  async getScanResults(scanId) {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/scans/${scanId}/results`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching RAST scan results ${scanId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Stop a running scan\r\n   */\n  async stopScan(scanId) {\n    try {\n      await apiClient.post(`${this.baseUrl}/scans/${scanId}/stop`);\n    } catch (error) {\n      console.error(`Error stopping RAST scan ${scanId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get runtime protection status for all projects\r\n   */\n  async getRuntimeProtectionStatus() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/runtime-protection/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching runtime protection status:', error);\n      // Return mock data for development\n      return {\n        protected: 8,\n        monitoring: 3,\n        at_risk: 1,\n        disabled: 0\n      };\n    }\n  }\n\n  /**\r\n   * Enable runtime protection for a project\r\n   */\n  async enableRuntimeProtection(projectId) {\n    try {\n      await apiClient.post(`${this.baseUrl}/projects/${projectId}/runtime-protection/enable`);\n    } catch (error) {\n      console.error(`Error enabling runtime protection for project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Disable runtime protection for a project\r\n   */\n  async disableRuntimeProtection(projectId) {\n    try {\n      await apiClient.post(`${this.baseUrl}/projects/${projectId}/runtime-protection/disable`);\n    } catch (error) {\n      console.error(`Error disabling runtime protection for project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get threat intelligence data\r\n   */\n  async getThreatIntelligence() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/threat-intelligence`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching threat intelligence:', error);\n      // Return mock data for development\n      return {\n        recent_threats: [{\n          id: 'threat-001',\n          threat_type: 'SQL Injection',\n          severity: 'high',\n          description: 'Attempted SQL injection attack detected',\n          timestamp: '2025-08-10T14:30:00Z',\n          affected_projects: ['Admin Portal']\n        }],\n        threat_stats: {\n          total_threats: 45,\n          blocked_threats: 42,\n          monitored_threats: 2,\n          false_positives: 1\n        }\n      };\n    }\n  }\n\n  /**\r\n   * Get performance metrics\r\n   */\n  async getPerformanceMetrics() {\n    try {\n      const response = await apiClient.get(`${this.baseUrl}/performance-metrics`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching performance metrics:', error);\n      // Return mock data for development\n      return {\n        response_time: {\n          average: 45,\n          p95: 120,\n          p99: 250\n        },\n        throughput: {\n          requests_per_second: 1250,\n          total_requests: 1250000\n        },\n        error_rate: 0.02,\n        availability: 99.98\n      };\n    }\n  }\n}\nexport const rastService = new RASTService();","map":{"version":3,"names":["apiClient","RASTService","constructor","baseUrl","getOverview","response","get","data","error","console","total_projects","total_scans","active_scans","total_vulnerabilities","security_score","runtime_protection_status","threat_detection_rate","average_response_time","false_positive_rate","getScans","id","project_id","project_name","scan_type","status","started_at","completed_at","findings_count","critical_findings","high_findings","medium_findings","low_findings","duration","scan_config","protection_level","monitoring_mode","alert_threshold","getProjects","name","url","description","last_scan","vulnerabilities","critical","high","medium","low","runtime_status","created_by","created_at","updated_at","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","startScan","scanData","getScanResults","scanId","stopScan","getRuntimeProtectionStatus","protected","monitoring","at_risk","disabled","enableRuntimeProtection","disableRuntimeProtection","getThreatIntelligence","recent_threats","threat_type","severity","timestamp","affected_projects","threat_stats","total_threats","blocked_threats","monitored_threats","false_positives","getPerformanceMetrics","response_time","average","p95","p99","throughput","requests_per_second","total_requests","error_rate","availability","rastService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/rastService.ts"],"sourcesContent":["import { apiClient } from './apiClient';\r\n\r\nexport interface RASTOverview {\r\n  total_projects: number;\r\n  total_scans: number;\r\n  active_scans: number;\r\n  total_vulnerabilities: number;\r\n  security_score: number;\r\n  runtime_protection_status: string;\r\n  threat_detection_rate: number;\r\n  average_response_time: number;\r\n  false_positive_rate: number;\r\n}\r\n\r\nexport interface RASTScan {\r\n  id: number;\r\n  project_id: number;\r\n  project_name: string;\r\n  scan_type: string;\r\n  status: string;\r\n  started_at: string;\r\n  completed_at?: string;\r\n  findings_count: number;\r\n  critical_findings: number;\r\n  high_findings: number;\r\n  medium_findings: number;\r\n  low_findings: number;\r\n  duration?: string;\r\n  scan_config: {\r\n    protection_level: string;\r\n    monitoring_mode: string;\r\n    alert_threshold: string;\r\n  };\r\n}\r\n\r\nexport interface RASTProject {\r\n  id: number;\r\n  name: string;\r\n  url: string;\r\n  description?: string;\r\n  scan_type: 'full' | 'passive' | 'active' | 'custom';\r\n  protection_level: 'basic' | 'standard' | 'advanced' | 'enterprise';\r\n  monitoring_mode: 'passive' | 'active' | 'hybrid';\r\n  authentication?: {\r\n    type: 'none' | 'basic' | 'form' | 'token';\r\n    username?: string;\r\n    password?: string;\r\n  };\r\n  last_scan?: RASTScan;\r\n  vulnerabilities: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  security_score: number;\r\n  runtime_status: 'protected' | 'monitoring' | 'at_risk' | 'disabled';\r\n  created_by: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface CreateRASTProjectRequest {\r\n  name: string;\r\n  url: string;\r\n  description?: string;\r\n  scan_type: 'full' | 'passive' | 'active' | 'custom';\r\n  protection_level: 'basic' | 'standard' | 'advanced' | 'enterprise';\r\n  monitoring_mode: 'passive' | 'active' | 'hybrid';\r\n  authentication?: {\r\n    type: 'none' | 'basic' | 'form' | 'token';\r\n    username?: string;\r\n    password?: string;\r\n  };\r\n}\r\n\r\nexport interface UpdateRASTProjectRequest {\r\n  name?: string;\r\n  description?: string;\r\n  scan_type?: 'full' | 'passive' | 'active' | 'custom';\r\n  protection_level?: 'basic' | 'standard' | 'advanced' | 'enterprise';\r\n  monitoring_mode?: 'passive' | 'active' | 'hybrid';\r\n  authentication?: {\r\n    type: 'none' | 'basic' | 'form' | 'token';\r\n    username?: string;\r\n    password?: string;\r\n  };\r\n}\r\n\r\nexport interface StartRASTScanRequest {\r\n  project_id: number;\r\n  scan_type: 'full' | 'passive' | 'active' | 'custom';\r\n  protection_level?: 'basic' | 'standard' | 'advanced' | 'enterprise';\r\n  monitoring_mode?: 'passive' | 'active' | 'hybrid';\r\n  custom_rules?: string[];\r\n}\r\n\r\nexport interface RASTScanResult {\r\n  id: number;\r\n  project_id: number;\r\n  scan_type: string;\r\n  status: string;\r\n  started_at: string;\r\n  completed_at?: string;\r\n  findings: RASTFinding[];\r\n  summary: {\r\n    total_findings: number;\r\n    critical_findings: number;\r\n    high_findings: number;\r\n    medium_findings: number;\r\n    low_findings: number;\r\n    security_score: number;\r\n  };\r\n  runtime_events: RuntimeEvent[];\r\n  protection_actions: ProtectionAction[];\r\n}\r\n\r\nexport interface RASTFinding {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  category: string;\r\n  cwe_id?: string;\r\n  cvss_score?: number;\r\n  location: {\r\n    file?: string;\r\n    line?: number;\r\n    function?: string;\r\n    url?: string;\r\n  };\r\n  evidence: string;\r\n  recommendation: string;\r\n  status: 'open' | 'investigating' | 'fixing' | 'resolved' | 'false_positive';\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface RuntimeEvent {\r\n  id: number;\r\n  timestamp: string;\r\n  event_type: 'threat_detected' | 'attack_blocked' | 'suspicious_activity' | 'policy_violation';\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  source_ip?: string;\r\n  user_agent?: string;\r\n  request_data?: any;\r\n  response_data?: any;\r\n}\r\n\r\nexport interface ProtectionAction {\r\n  id: number;\r\n  timestamp: string;\r\n  action_type: 'blocked' | 'monitored' | 'alerted' | 'redirected';\r\n  target: string;\r\n  reason: string;\r\n  effectiveness: 'high' | 'medium' | 'low';\r\n}\r\n\r\nclass RASTService {\r\n  private baseUrl = '/api/rast';\r\n\r\n  /**\r\n   * Get RAST overview statistics\r\n   */\r\n  async getOverview(): Promise<RASTOverview> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/overview`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching RAST overview:', error);\r\n      // Return mock data for development\r\n      return {\r\n        total_projects: 12,\r\n        total_scans: 47,\r\n        active_scans: 3,\r\n        total_vulnerabilities: 156,\r\n        security_score: 82.5,\r\n        runtime_protection_status: 'active',\r\n        threat_detection_rate: 94.7,\r\n        average_response_time: 45,\r\n        false_positive_rate: 2.3\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all RAST scans\r\n   */\r\n  async getScans(): Promise<RASTScan[]> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/scans`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching RAST scans:', error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 101,\r\n          project_id: 1,\r\n          project_name: 'E-commerce Web App',\r\n          scan_type: 'full',\r\n          status: 'COMPLETED',\r\n          started_at: '2025-08-10T10:30:00Z',\r\n          completed_at: '2025-08-10T10:33:45Z',\r\n          findings_count: 3,\r\n          critical_findings: 0,\r\n          high_findings: 1,\r\n          medium_findings: 2,\r\n          low_findings: 0,\r\n          duration: '3m 45s',\r\n          scan_config: {\r\n            protection_level: 'advanced',\r\n            monitoring_mode: 'hybrid',\r\n            alert_threshold: 'medium'\r\n          }\r\n        },\r\n        {\r\n          id: 102,\r\n          project_id: 2,\r\n          project_name: 'Admin Portal',\r\n          scan_type: 'active',\r\n          status: 'RUNNING',\r\n          started_at: '2025-08-10T09:15:00Z',\r\n          findings_count: 0,\r\n          critical_findings: 0,\r\n          high_findings: 0,\r\n          medium_findings: 0,\r\n          low_findings: 0,\r\n          scan_config: {\r\n            protection_level: 'enterprise',\r\n            monitoring_mode: 'active',\r\n            alert_threshold: 'high'\r\n          }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all RAST projects\r\n   */\r\n  async getProjects(): Promise<RASTProject[]> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/projects`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching RAST projects:', error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          name: 'E-commerce Web App',\r\n          url: 'https://demo-ecommerce.example.com',\r\n          description: 'Main e-commerce application for online shopping',\r\n          scan_type: 'full',\r\n          protection_level: 'advanced',\r\n          monitoring_mode: 'hybrid',\r\n          last_scan: {\r\n            id: 101,\r\n            project_id: 1,\r\n            project_name: 'E-commerce Web App',\r\n            scan_type: 'full',\r\n            status: 'COMPLETED',\r\n            started_at: '2025-08-10T10:30:00Z',\r\n            completed_at: '2025-08-10T10:33:45Z',\r\n            findings_count: 3,\r\n            critical_findings: 0,\r\n            high_findings: 1,\r\n            medium_findings: 2,\r\n            low_findings: 0,\r\n            scan_config: {\r\n              protection_level: 'advanced',\r\n              monitoring_mode: 'hybrid',\r\n              alert_threshold: 'medium'\r\n            }\r\n          },\r\n          vulnerabilities: {\r\n            critical: 0,\r\n            high: 1,\r\n            medium: 2,\r\n            low: 0\r\n          },\r\n          security_score: 85.5,\r\n          runtime_status: 'protected',\r\n          created_by: 'admin@example.com',\r\n          created_at: '2025-07-15T09:00:00Z',\r\n          updated_at: '2025-08-10T10:33:45Z'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific RAST project by ID\r\n   */\r\n  async getProject(projectId: number): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/projects/${projectId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching RAST project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new RAST project\r\n   */\r\n  async createProject(projectData: CreateRASTProjectRequest): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiClient.post(`${this.baseUrl}/projects`, projectData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating RAST project:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing RAST project\r\n   */\r\n  async updateProject(projectId: number, projectData: UpdateRASTProjectRequest): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiClient.put(`${this.baseUrl}/projects/${projectId}`, projectData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating RAST project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a RAST project\r\n   */\r\n  async deleteProject(projectId: number): Promise<void> {\r\n    try {\r\n      await apiClient.delete(`${this.baseUrl}/projects/${projectId}`);\r\n    } catch (error) {\r\n      console.error(`Error deleting RAST project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new RAST scan\r\n   */\r\n  async startScan(scanData: StartRASTScanRequest): Promise<RASTScan> {\r\n    try {\r\n      const response = await apiClient.post(`${this.baseUrl}/scans`, scanData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error starting RAST scan:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get scan results by scan ID\r\n   */\r\n  async getScanResults(scanId: number): Promise<RASTScanResult> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/scans/${scanId}/results`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching RAST scan results ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop a running scan\r\n   */\r\n  async stopScan(scanId: number): Promise<void> {\r\n    try {\r\n      await apiClient.post(`${this.baseUrl}/scans/${scanId}/stop`);\r\n    } catch (error) {\r\n      console.error(`Error stopping RAST scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get runtime protection status for all projects\r\n   */\r\n  async getRuntimeProtectionStatus(): Promise<{\r\n    protected: number;\r\n    monitoring: number;\r\n    at_risk: number;\r\n    disabled: number;\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/runtime-protection/status`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching runtime protection status:', error);\r\n      // Return mock data for development\r\n      return {\r\n        protected: 8,\r\n        monitoring: 3,\r\n        at_risk: 1,\r\n        disabled: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable runtime protection for a project\r\n   */\r\n  async enableRuntimeProtection(projectId: number): Promise<void> {\r\n    try {\r\n      await apiClient.post(`${this.baseUrl}/projects/${projectId}/runtime-protection/enable`);\r\n    } catch (error) {\r\n      console.error(`Error enabling runtime protection for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disable runtime protection for a project\r\n   */\r\n  async disableRuntimeProtection(projectId: number): Promise<void> {\r\n    try {\r\n      await apiClient.post(`${this.baseUrl}/projects/${projectId}/runtime-protection/disable`);\r\n    } catch (error) {\r\n      console.error(`Error disabling runtime protection for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get threat intelligence data\r\n   */\r\n  async getThreatIntelligence(): Promise<{\r\n    recent_threats: Array<{\r\n      id: string;\r\n      threat_type: string;\r\n      severity: string;\r\n      description: string;\r\n      timestamp: string;\r\n      affected_projects: string[];\r\n    }>;\r\n    threat_stats: {\r\n      total_threats: number;\r\n      blocked_threats: number;\r\n      monitored_threats: number;\r\n      false_positives: number;\r\n    };\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/threat-intelligence`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching threat intelligence:', error);\r\n      // Return mock data for development\r\n      return {\r\n        recent_threats: [\r\n          {\r\n            id: 'threat-001',\r\n            threat_type: 'SQL Injection',\r\n            severity: 'high',\r\n            description: 'Attempted SQL injection attack detected',\r\n            timestamp: '2025-08-10T14:30:00Z',\r\n            affected_projects: ['Admin Portal']\r\n          }\r\n        ],\r\n        threat_stats: {\r\n          total_threats: 45,\r\n          blocked_threats: 42,\r\n          monitored_threats: 2,\r\n          false_positives: 1\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  async getPerformanceMetrics(): Promise<{\r\n    response_time: {\r\n      average: number;\r\n      p95: number;\r\n      p99: number;\r\n    };\r\n    throughput: {\r\n      requests_per_second: number;\r\n      total_requests: number;\r\n    };\r\n    error_rate: number;\r\n    availability: number;\r\n  }> {\r\n    try {\r\n      const response = await apiClient.get(`${this.baseUrl}/performance-metrics`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching performance metrics:', error);\r\n      // Return mock data for development\r\n      return {\r\n        response_time: {\r\n          average: 45,\r\n          p95: 120,\r\n          p99: 250\r\n        },\r\n        throughput: {\r\n          requests_per_second: 1250,\r\n          total_requests: 1250000\r\n        },\r\n        error_rate: 0.02,\r\n        availability: 99.98\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const rastService = new RASTService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}