{"ast":null,"code":"import { serviceRegistry, apiCallWithRetry } from './serviceRegistry';\n\n// Comprehensive API endpoint mapping\nexport const API_ENDPOINTS = {\n  // Authentication & User Management\n  AUTH: {\n    LOGIN: '/api/v1/auth/login',\n    REGISTER: '/api/v1/auth/register',\n    REFRESH: '/api/v1/auth/refresh',\n    LOGOUT: '/api/v1/auth/logout',\n    ME: '/api/v1/auth/me',\n    CHANGE_PASSWORD: '/api/v1/auth/change-password',\n    FORGOT_PASSWORD: '/api/v1/auth/forgot-password',\n    RESET_PASSWORD: '/api/v1/auth/reset-password',\n    LOGOUT_ALL: '/api/v1/auth/logout-all'\n  },\n  USERS: {\n    LIST: '/api/v1/users',\n    CREATE: '/api/v1/users',\n    GET: id => `/api/v1/users/${id}`,\n    UPDATE: id => `/api/v1/users/${id}`,\n    DELETE: id => `/api/v1/users/${id}`,\n    BULK_UPDATE: '/api/v1/users/bulk-update',\n    BULK_DELETE: '/api/v1/users/bulk-delete'\n  },\n  MFA: {\n    SETUP: '/api/v1/mfa/setup',\n    VERIFY: '/api/v1/mfa/verify',\n    DISABLE: '/api/v1/mfa/disable',\n    BACKUP_CODES: '/api/v1/mfa/backup-codes',\n    RECOVERY: '/api/v1/mfa/recovery'\n  },\n  ADMIN: {\n    DASHBOARD: '/api/v1/admin/dashboard',\n    USERS: '/api/v1/admin/users',\n    SYSTEM_STATUS: '/api/v1/admin/system-status',\n    AUDIT_LOGS: '/api/v1/admin/audit-logs',\n    SETTINGS: '/api/v1/admin/settings'\n  },\n  // Security Testing\n  SAST: {\n    DASHBOARD: '/api/v1/sast/dashboard',\n    OVERVIEW: '/api/v1/sast/overview',\n    PROJECTS: '/api/v1/sast/projects',\n    PROJECT: id => `/api/v1/sast/projects/${id}`,\n    SCANS: '/api/v1/sast/scans',\n    SCAN: id => `/api/v1/sast/scans/${id}`,\n    VULNERABILITIES: '/api/v1/sast/vulnerabilities',\n    SECURITY_HOTSPOTS: '/api/v1/sast/security-hotspots',\n    QUALITY_GATES: '/api/v1/sast/quality-gates',\n    CODE_COVERAGE: '/api/v1/sast/code-coverage',\n    DUPLICATIONS: '/api/v1/sast/duplications',\n    STATISTICS: '/api/v1/sast/statistics',\n    RULES: '/api/v1/sast/rules',\n    LANGUAGES: '/api/v1/sast/languages',\n    CONFIGURATION: id => `/api/v1/sast/projects/${id}/configuration`,\n    METRICS: id => `/api/v1/sast/projects/${id}/metrics`,\n    TRENDS: id => `/api/v1/sast/projects/${id}/trends`,\n    SECURITY_REPORTS: id => `/api/v1/sast/projects/${id}/security-reports`,\n    RELIABILITY: id => `/api/v1/sast/projects/${id}/reliability`,\n    MAINTAINABILITY: id => `/api/v1/sast/projects/${id}/maintainability`,\n    ACTIVITY: id => `/api/v1/sast/projects/${id}/activity`\n  },\n  DAST: {\n    OVERVIEW: '/api/v1/dast/overview',\n    PROJECTS: '/api/v1/dast/projects',\n    PROJECT: id => `/api/v1/dast/projects/${id}`,\n    SCANS: '/api/v1/dast/scans',\n    SCAN: id => `/api/v1/dast/scans/${id}`,\n    VULNERABILITIES: '/api/v1/dast/vulnerabilities',\n    PAYLOADS: '/api/v1/dast/payloads',\n    REPORTS: id => `/api/v1/dast/reports/${id}`,\n    WEBHOOK: '/api/v1/dast/webhook'\n  },\n  RAST: {\n    OVERVIEW: '/api/v1/rast/overview',\n    PROJECTS: '/api/v1/rast/projects',\n    PROJECT: id => `/api/v1/rast/projects/${id}`,\n    SCANS: '/api/v1/rast/scans',\n    SCAN: id => `/api/v1/rast/scans/${id}`,\n    VULNERABILITIES: '/api/v1/rast/vulnerabilities',\n    EVENTS: '/api/v1/rast/events',\n    ACTIONS: '/api/v1/rast/actions',\n    PROTECTION_STATUS: '/api/v1/rast/protection-status',\n    WEBHOOK: '/api/v1/rast/webhook'\n  },\n  RASP: {\n    AGENTS: '/api/v1/rasp/agents',\n    AGENT: id => `/api/v1/rasp/agents/${id}`,\n    ATTACKS: '/api/v1/rasp/attacks',\n    ATTACK: id => `/api/v1/rasp/attacks/${id}`,\n    RULES: '/api/v1/rasp/rules',\n    RULE: id => `/api/v1/rasp/rules/${id}`,\n    VULNERABILITIES: '/api/v1/rasp/vulnerabilities',\n    VULNERABILITY: id => `/api/v1/rasp/vulnerabilities/${id}`,\n    VIRTUAL_PATCHES: '/api/v1/rasp/virtual-patches',\n    ALERTS: '/api/v1/rasp/alerts',\n    ALERT: id => `/api/v1/rasp/alerts/${id}`,\n    INTEGRATIONS: '/api/v1/rasp/integrations',\n    DASHBOARD_OVERVIEW: '/api/v1/rasp/dashboard/overview',\n    ATTACK_SUMMARY: '/api/v1/rasp/dashboard/attack-summary',\n    AGENT_STATUS: '/api/v1/rasp/dashboard/agent-status',\n    HEARTBEAT: id => `/api/v1/rasp/agents/${id}/heartbeat`,\n    WEBHOOK: '/api/v1/rasp/webhook'\n  },\n  APPLICATION_SECURITY: {\n    OVERVIEW: '/api/v1/application-security/overview',\n    VULNERABILITIES: '/api/v1/application-security/vulnerabilities',\n    SCANS: '/api/v1/application-security/scans',\n    REPORTS: '/api/v1/application-security/reports',\n    CONFIGURATION: '/api/v1/application-security/configuration'\n  },\n  CLOUD_SECURITY: {\n    OVERVIEW: '/api/v1/cloud-security/overview',\n    AWS: '/api/v1/cloud-security/aws',\n    AZURE: '/api/v1/cloud-security/azure',\n    GCP: '/api/v1/cloud-security/gcp',\n    COMPLIANCE: '/api/v1/cloud-security/compliance',\n    THREAT_DETECTION: '/api/v1/cloud-security/threat-detection',\n    CONFIGURATION: '/api/v1/cloud-security/configuration'\n  },\n  NETWORK_SECURITY: {\n    OVERVIEW: '/api/v1/network-security/overview',\n    FIREWALL: '/api/v1/network-security/firewall',\n    IDS_IPS: '/api/v1/network-security/ids-ips',\n    VPN: '/api/v1/network-security/vpn',\n    MONITORING: '/api/v1/network-security/monitoring',\n    THREAT_DETECTION: '/api/v1/network-security/threat-detection'\n  },\n  DATA_SECURITY: {\n    OVERVIEW: '/api/v1/data-security/overview',\n    CLASSIFICATION: '/api/v1/data-security/classification',\n    ENCRYPTION: '/api/v1/data-security/encryption',\n    ACCESS_CONTROL: '/api/v1/data-security/access-control',\n    AUDIT: '/api/v1/data-security/audit',\n    COMPLIANCE: '/api/v1/data-security/compliance'\n  },\n  THREAT_INTELLIGENCE: {\n    OVERVIEW: '/api/v1/threat-intelligence/overview',\n    FEEDS: '/api/v1/threat-intelligence/feeds',\n    INDICATORS: '/api/v1/threat-intelligence/indicators',\n    REPORTS: '/api/v1/threat-intelligence/reports',\n    ANALYSIS: '/api/v1/threat-intelligence/analysis',\n    INTEGRATIONS: '/api/v1/threat-intelligence/integrations'\n  },\n  INCIDENTS: {\n    LIST: '/api/v1/incidents',\n    CREATE: '/api/v1/incidents',\n    GET: id => `/api/v1/incidents/${id}`,\n    UPDATE: id => `/api/v1/incidents/${id}`,\n    DELETE: id => `/api/v1/incidents/${id}`,\n    ASSIGN: id => `/api/v1/incidents/${id}/assign`,\n    STATUS: id => `/api/v1/incidents/${id}/status`\n  },\n  COMPLIANCE: {\n    OVERVIEW: '/api/v1/compliance/overview',\n    FRAMEWORKS: '/api/v1/compliance/frameworks',\n    ASSESSMENTS: '/api/v1/compliance/assessments',\n    REPORTS: '/api/v1/compliance/reports',\n    REMEDIATION: '/api/v1/compliance/remediation'\n  },\n  WORKFLOWS: {\n    LIST: '/api/v1/workflows',\n    CREATE: '/api/v1/workflows',\n    GET: id => `/api/v1/workflows/${id}`,\n    UPDATE: id => `/api/v1/workflows/${id}`,\n    DELETE: id => `/api/v1/workflows/${id}`,\n    EXECUTE: id => `/api/v1/workflows/${id}/execute`,\n    STATUS: id => `/api/v1/workflows/${id}/status`\n  },\n  AI_ML: {\n    OVERVIEW: '/api/v1/ai-ml/overview',\n    MODELS: '/api/v1/ai-ml/models',\n    PREDICTIONS: '/api/v1/ai-ml/predictions',\n    TRAINING: '/api/v1/ai-ml/training',\n    ANALYTICS: '/api/v1/ai-ml/analytics'\n  },\n  INTEGRATIONS: {\n    LIST: '/api/v1/integrations',\n    CREATE: '/api/v1/integrations',\n    GET: id => `/api/v1/integrations/${id}`,\n    UPDATE: id => `/api/v1/integrations/${id}`,\n    DELETE: id => `/api/v1/integrations/${id}`,\n    TEST: id => `/api/v1/integrations/${id}/test`,\n    STATUS: id => `/api/v1/integrations/${id}/status`\n  },\n  PROJECTS: {\n    LIST: '/api/v1/projects',\n    CREATE: '/api/v1/projects',\n    GET: id => `/api/v1/projects/${id}`,\n    UPDATE: id => `/api/v1/projects/${id}`,\n    DELETE: id => `/api/v1/projects/${id}`,\n    MEMBERS: id => `/api/v1/projects/${id}/members`,\n    SETTINGS: id => `/api/v1/projects/${id}/settings`\n  },\n  REPORTS: {\n    LIST: '/api/v1/reports',\n    CREATE: '/api/v1/reports',\n    GET: id => `/api/v1/reports/${id}`,\n    UPDATE: id => `/api/v1/reports/${id}`,\n    DELETE: id => `/api/v1/reports/${id}`,\n    EXPORT: id => `/api/v1/reports/${id}/export`,\n    SCHEDULE: id => `/api/v1/reports/${id}/schedule`\n  },\n  DASHBOARD: {\n    OVERVIEW: '/api/v1/dashboard/overview',\n    METRICS: '/api/v1/dashboard/metrics',\n    ALERTS: '/api/v1/dashboard/alerts',\n    ACTIVITY: '/api/v1/dashboard/activity',\n    PERFORMANCE: '/api/v1/dashboard/performance'\n  },\n  SECURITY: {\n    OVERVIEW: '/api/v1/security/overview',\n    VULNERABILITIES: '/api/v1/security/vulnerabilities',\n    THREATS: '/api/v1/security/threats',\n    INCIDENTS: '/api/v1/security/incidents',\n    COMPLIANCE: '/api/v1/security/compliance'\n  },\n  WEBSOCKET: {\n    CONNECT: '/api/v1/websocket/connect',\n    EVENTS: '/api/v1/websocket/events',\n    NOTIFICATIONS: '/api/v1/websocket/notifications'\n  }\n};\n\n// Service mapping for frontend components\nexport const SERVICE_MAPPING = {\n  'SAST': 'Static Application Security Testing',\n  'DAST': 'Dynamic Application Security Testing',\n  'RASP': 'Runtime Application Self-Protection',\n  'CLOUD_SECURITY': 'Cloud Security',\n  'NETWORK_SECURITY': 'Network Security',\n  'DATA_SECURITY': 'Data Security',\n  'THREAT_INTELLIGENCE': 'Threat Intelligence',\n  'INCIDENTS': 'Security Incidents',\n  'COMPLIANCE': 'Compliance Management',\n  'WORKFLOWS': 'Security Workflows',\n  'AI_ML': 'AI/ML Security',\n  'INTEGRATIONS': 'Security Integrations',\n  'PROJECTS': 'Project Management',\n  'REPORTS': 'Security Reports',\n  'DASHBOARD': 'Security Dashboard',\n  'SECURITY': 'Overall Security',\n  'WEBSOCKET': 'Real-time Communications'\n};\n\n// Integration status tracking\n\n// Endpoint test result\n\n// Service health status\n\n// Main comprehensive integration service class\nclass ComprehensiveIntegrationService {\n  constructor() {\n    this.integrationStatus = new Map();\n    this.serviceHealth = new Map();\n  }\n  /**\r\n   * Check the health of all backend endpoints\r\n   */\n  async checkAllEndpoints() {\n    const statusChecks = Object.entries(API_ENDPOINTS).map(async ([service, endpoints]) => {\n      const serviceEndpoints = Object.values(endpoints).filter(endpoint => typeof endpoint === 'string' && !endpoint.includes('{'));\n      for (const endpoint of serviceEndpoints) {\n        if (typeof endpoint !== 'string') continue;\n        try {\n          const startTime = Date.now();\n          const response = await apiCallWithRetry(() => serviceRegistry.get(endpoint));\n          const responseTime = Date.now() - startTime;\n          this.integrationStatus.set(`${service}_${endpoint}`, {\n            service,\n            status: 'connected',\n            lastCheck: new Date(),\n            endpoint,\n            responseTime\n          });\n        } catch (error) {\n          this.integrationStatus.set(`${service}_${endpoint}`, {\n            service,\n            status: 'error',\n            lastCheck: new Date(),\n            endpoint,\n            error: error.message\n          });\n        }\n      }\n    });\n    await Promise.all(statusChecks);\n    return this.integrationStatus;\n  }\n\n  /**\r\n   * Test a specific service comprehensively\r\n   */\n  async testServiceComprehensive(serviceName) {\n    const endpoints = API_ENDPOINTS[serviceName];\n    if (!endpoints) {\n      throw new Error(`Service ${serviceName} not found`);\n    }\n    const endpointResults = [];\n    const endpointList = Object.values(endpoints).filter(endpoint => typeof endpoint === 'string' && !endpoint.includes('{'));\n    for (const endpoint of endpointList) {\n      if (typeof endpoint !== 'string') continue;\n      const result = await this.testEndpoint(endpoint, endpoint);\n      endpointResults.push(result);\n    }\n    const successCount = endpointResults.filter(r => r.status === 'success').length;\n    const successRate = endpointList.length > 0 ? successCount / endpointList.length * 100 : 0;\n    const averageResponseTime = endpointResults.filter(r => r.responseTime > 0).reduce((sum, r) => sum + r.responseTime, 0) / successCount || 0;\n    const overallStatus = successRate >= 90 ? 'healthy' : successRate >= 50 ? 'partial' : 'unhealthy';\n    const serviceHealth = {\n      service: serviceName,\n      endpoints: endpointResults,\n      overallStatus,\n      successRate,\n      averageResponseTime,\n      lastVerified: new Date()\n    };\n    this.serviceHealth.set(serviceName, serviceHealth);\n    return serviceHealth;\n  }\n\n  /**\r\n   * Test a specific endpoint\r\n   */\n  async testEndpoint(endpoint, endpointName) {\n    const startTime = Date.now();\n    let status = 'success';\n    let statusCode;\n    let error;\n    let response;\n    try {\n      const actualEndpoint = typeof endpoint === 'function' ? endpoint('test-id') : endpoint;\n      try {\n        const result = await apiCallWithRetry(() => serviceRegistry.get(actualEndpoint));\n        statusCode = 200; // Assuming success if no error\n        response = result;\n      } catch (getError) {\n        var _getError$response;\n        if (((_getError$response = getError.response) === null || _getError$response === void 0 ? void 0 : _getError$response.status) === 405) {\n          try {\n            const result = await apiCallWithRetry(() => serviceRegistry.post(actualEndpoint, {}));\n            statusCode = 200; // Assuming success if no error\n            response = result;\n          } catch (postError) {\n            throw postError;\n          }\n        } else {\n          throw getError;\n        }\n      }\n      if (statusCode >= 400) {\n        status = 'failed';\n        error = `HTTP ${statusCode}`;\n      }\n    } catch (err) {\n      var _err$response;\n      if (err.code === 'ECONNABORTED') {\n        status = 'timeout';\n        error = 'Request timeout';\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n        status = 'unauthorized';\n        error = 'Unauthorized access';\n      } else {\n        status = 'failed';\n        error = err.message || 'Request failed';\n      }\n    }\n    const responseTime = Date.now() - startTime;\n    return {\n      endpoint: endpointName,\n      method: 'GET',\n      status,\n      responseTime,\n      statusCode,\n      error,\n      response\n    };\n  }\n\n  /**\r\n   * Get integration status for a specific service\r\n   */\n  getServiceStatus(service) {\n    return Array.from(this.integrationStatus.values()).filter(status => status.service === service);\n  }\n\n  /**\r\n   * Get overall integration health\r\n   */\n  getOverallHealth() {\n    const total = this.integrationStatus.size;\n    const healthy = Array.from(this.integrationStatus.values()).filter(status => status.status === 'connected').length;\n    return {\n      healthy,\n      total,\n      percentage: total > 0 ? Math.round(healthy / total * 100) : 0\n    };\n  }\n\n  /**\r\n   * Get all available endpoints for a service\r\n   */\n  getServiceEndpoints(service) {\n    return API_ENDPOINTS[service] || {};\n  }\n\n  /**\r\n   * Get the corresponding frontend service name\r\n   */\n  getFrontendService(backendService) {\n    return SERVICE_MAPPING[backendService] || 'unknown';\n  }\n\n  /**\r\n   * Get all services that need attention (errors or disconnections)\r\n   */\n  getServicesNeedingAttention() {\n    return Array.from(this.integrationStatus.values()).filter(status => status.status !== 'connected');\n  }\n\n  /**\r\n   * Export integration status report\r\n   */\n  exportStatusReport() {\n    const health = this.getOverallHealth();\n    const servicesNeedingAttention = this.getServicesNeedingAttention();\n    let report = `Comprehensive Integration Status Report - ${new Date().toISOString()}\\n`;\n    report += `Overall Health: ${health.percentage}% (${health.healthy}/${health.total})\\n\\n`;\n    if (servicesNeedingAttention.length > 0) {\n      report += `Services Needing Attention:\\n`;\n      servicesNeedingAttention.forEach(status => {\n        report += `- ${status.service}: ${status.status} - ${status.error || 'Unknown error'}\\n`;\n      });\n    } else {\n      report += `All services are healthy!\\n`;\n    }\n    return report;\n  }\n\n  /**\r\n   * Get service health status\r\n   */\n  getServiceHealth(serviceName) {\n    return this.serviceHealth.get(serviceName);\n  }\n\n  /**\r\n   * Get all service health statuses\r\n   */\n  getAllServiceHealth() {\n    return Array.from(this.serviceHealth.values());\n  }\n\n  /**\r\n   * Clear cached health data\r\n   */\n  clearHealthCache() {\n    this.serviceHealth.clear();\n    this.integrationStatus.clear();\n  }\n}\n\n// Export singleton instance\nexport const comprehensiveIntegrationService = new ComprehensiveIntegrationService();\nexport default ComprehensiveIntegrationService;","map":{"version":3,"names":["serviceRegistry","apiCallWithRetry","API_ENDPOINTS","AUTH","LOGIN","REGISTER","REFRESH","LOGOUT","ME","CHANGE_PASSWORD","FORGOT_PASSWORD","RESET_PASSWORD","LOGOUT_ALL","USERS","LIST","CREATE","GET","id","UPDATE","DELETE","BULK_UPDATE","BULK_DELETE","MFA","SETUP","VERIFY","DISABLE","BACKUP_CODES","RECOVERY","ADMIN","DASHBOARD","SYSTEM_STATUS","AUDIT_LOGS","SETTINGS","SAST","OVERVIEW","PROJECTS","PROJECT","SCANS","SCAN","VULNERABILITIES","SECURITY_HOTSPOTS","QUALITY_GATES","CODE_COVERAGE","DUPLICATIONS","STATISTICS","RULES","LANGUAGES","CONFIGURATION","METRICS","TRENDS","SECURITY_REPORTS","RELIABILITY","MAINTAINABILITY","ACTIVITY","DAST","PAYLOADS","REPORTS","WEBHOOK","RAST","EVENTS","ACTIONS","PROTECTION_STATUS","RASP","AGENTS","AGENT","ATTACKS","ATTACK","RULE","VULNERABILITY","VIRTUAL_PATCHES","ALERTS","ALERT","INTEGRATIONS","DASHBOARD_OVERVIEW","ATTACK_SUMMARY","AGENT_STATUS","HEARTBEAT","APPLICATION_SECURITY","CLOUD_SECURITY","AWS","AZURE","GCP","COMPLIANCE","THREAT_DETECTION","NETWORK_SECURITY","FIREWALL","IDS_IPS","VPN","MONITORING","DATA_SECURITY","CLASSIFICATION","ENCRYPTION","ACCESS_CONTROL","AUDIT","THREAT_INTELLIGENCE","FEEDS","INDICATORS","ANALYSIS","INCIDENTS","ASSIGN","STATUS","FRAMEWORKS","ASSESSMENTS","REMEDIATION","WORKFLOWS","EXECUTE","AI_ML","MODELS","PREDICTIONS","TRAINING","ANALYTICS","TEST","MEMBERS","EXPORT","SCHEDULE","PERFORMANCE","SECURITY","THREATS","WEBSOCKET","CONNECT","NOTIFICATIONS","SERVICE_MAPPING","ComprehensiveIntegrationService","constructor","integrationStatus","Map","serviceHealth","checkAllEndpoints","statusChecks","Object","entries","map","service","endpoints","serviceEndpoints","values","filter","endpoint","includes","startTime","Date","now","response","get","responseTime","set","status","lastCheck","error","message","Promise","all","testServiceComprehensive","serviceName","Error","endpointResults","endpointList","result","testEndpoint","push","successCount","r","length","successRate","averageResponseTime","reduce","sum","overallStatus","lastVerified","endpointName","statusCode","actualEndpoint","getError","_getError$response","post","postError","err","_err$response","code","method","getServiceStatus","Array","from","getOverallHealth","total","size","healthy","percentage","Math","round","getServiceEndpoints","getFrontendService","backendService","getServicesNeedingAttention","exportStatusReport","health","servicesNeedingAttention","report","toISOString","forEach","getServiceHealth","getAllServiceHealth","clearHealthCache","clear","comprehensiveIntegrationService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/comprehensiveIntegrationService.ts"],"sourcesContent":["import { serviceRegistry, apiCallWithRetry } from './serviceRegistry';\r\n\r\n// Comprehensive API endpoint mapping\r\nexport const API_ENDPOINTS = {\r\n  // Authentication & User Management\r\n  AUTH: {\r\n    LOGIN: '/api/v1/auth/login',\r\n    REGISTER: '/api/v1/auth/register',\r\n    REFRESH: '/api/v1/auth/refresh',\r\n    LOGOUT: '/api/v1/auth/logout',\r\n    ME: '/api/v1/auth/me',\r\n    CHANGE_PASSWORD: '/api/v1/auth/change-password',\r\n    FORGOT_PASSWORD: '/api/v1/auth/forgot-password',\r\n    RESET_PASSWORD: '/api/v1/auth/reset-password',\r\n    LOGOUT_ALL: '/api/v1/auth/logout-all'\r\n  },\r\n  USERS: {\r\n    LIST: '/api/v1/users',\r\n    CREATE: '/api/v1/users',\r\n    GET: (id: string) => `/api/v1/users/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/users/${id}`,\r\n    DELETE: (id: string) => `/api/v1/users/${id}`,\r\n    BULK_UPDATE: '/api/v1/users/bulk-update',\r\n    BULK_DELETE: '/api/v1/users/bulk-delete'\r\n  },\r\n  MFA: {\r\n    SETUP: '/api/v1/mfa/setup',\r\n    VERIFY: '/api/v1/mfa/verify',\r\n    DISABLE: '/api/v1/mfa/disable',\r\n    BACKUP_CODES: '/api/v1/mfa/backup-codes',\r\n    RECOVERY: '/api/v1/mfa/recovery'\r\n  },\r\n  ADMIN: {\r\n    DASHBOARD: '/api/v1/admin/dashboard',\r\n    USERS: '/api/v1/admin/users',\r\n    SYSTEM_STATUS: '/api/v1/admin/system-status',\r\n    AUDIT_LOGS: '/api/v1/admin/audit-logs',\r\n    SETTINGS: '/api/v1/admin/settings'\r\n  },\r\n\r\n  // Security Testing\r\n  SAST: {\r\n    DASHBOARD: '/api/v1/sast/dashboard',\r\n    OVERVIEW: '/api/v1/sast/overview',\r\n    PROJECTS: '/api/v1/sast/projects',\r\n    PROJECT: (id: string) => `/api/v1/sast/projects/${id}`,\r\n    SCANS: '/api/v1/sast/scans',\r\n    SCAN: (id: string) => `/api/v1/sast/scans/${id}`,\r\n    VULNERABILITIES: '/api/v1/sast/vulnerabilities',\r\n    SECURITY_HOTSPOTS: '/api/v1/sast/security-hotspots',\r\n    QUALITY_GATES: '/api/v1/sast/quality-gates',\r\n    CODE_COVERAGE: '/api/v1/sast/code-coverage',\r\n    DUPLICATIONS: '/api/v1/sast/duplications',\r\n    STATISTICS: '/api/v1/sast/statistics',\r\n    RULES: '/api/v1/sast/rules',\r\n    LANGUAGES: '/api/v1/sast/languages',\r\n    CONFIGURATION: (id: string) => `/api/v1/sast/projects/${id}/configuration`,\r\n    METRICS: (id: string) => `/api/v1/sast/projects/${id}/metrics`,\r\n    TRENDS: (id: string) => `/api/v1/sast/projects/${id}/trends`,\r\n    SECURITY_REPORTS: (id: string) => `/api/v1/sast/projects/${id}/security-reports`,\r\n    RELIABILITY: (id: string) => `/api/v1/sast/projects/${id}/reliability`,\r\n    MAINTAINABILITY: (id: string) => `/api/v1/sast/projects/${id}/maintainability`,\r\n    ACTIVITY: (id: string) => `/api/v1/sast/projects/${id}/activity`\r\n  },\r\n  DAST: {\r\n    OVERVIEW: '/api/v1/dast/overview',\r\n    PROJECTS: '/api/v1/dast/projects',\r\n    PROJECT: (id: string) => `/api/v1/dast/projects/${id}`,\r\n    SCANS: '/api/v1/dast/scans',\r\n    SCAN: (id: string) => `/api/v1/dast/scans/${id}`,\r\n    VULNERABILITIES: '/api/v1/dast/vulnerabilities',\r\n    PAYLOADS: '/api/v1/dast/payloads',\r\n    REPORTS: (id: string) => `/api/v1/dast/reports/${id}`,\r\n    WEBHOOK: '/api/v1/dast/webhook'\r\n  },\r\n  RAST: {\r\n    OVERVIEW: '/api/v1/rast/overview',\r\n    PROJECTS: '/api/v1/rast/projects',\r\n    PROJECT: (id: string) => `/api/v1/rast/projects/${id}`,\r\n    SCANS: '/api/v1/rast/scans',\r\n    SCAN: (id: string) => `/api/v1/rast/scans/${id}`,\r\n    VULNERABILITIES: '/api/v1/rast/vulnerabilities',\r\n    EVENTS: '/api/v1/rast/events',\r\n    ACTIONS: '/api/v1/rast/actions',\r\n    PROTECTION_STATUS: '/api/v1/rast/protection-status',\r\n    WEBHOOK: '/api/v1/rast/webhook'\r\n  },\r\n  RASP: {\r\n    AGENTS: '/api/v1/rasp/agents',\r\n    AGENT: (id: string) => `/api/v1/rasp/agents/${id}`,\r\n    ATTACKS: '/api/v1/rasp/attacks',\r\n    ATTACK: (id: string) => `/api/v1/rasp/attacks/${id}`,\r\n    RULES: '/api/v1/rasp/rules',\r\n    RULE: (id: string) => `/api/v1/rasp/rules/${id}`,\r\n    VULNERABILITIES: '/api/v1/rasp/vulnerabilities',\r\n    VULNERABILITY: (id: string) => `/api/v1/rasp/vulnerabilities/${id}`,\r\n    VIRTUAL_PATCHES: '/api/v1/rasp/virtual-patches',\r\n    ALERTS: '/api/v1/rasp/alerts',\r\n    ALERT: (id: string) => `/api/v1/rasp/alerts/${id}`,\r\n    INTEGRATIONS: '/api/v1/rasp/integrations',\r\n    DASHBOARD_OVERVIEW: '/api/v1/rasp/dashboard/overview',\r\n    ATTACK_SUMMARY: '/api/v1/rasp/dashboard/attack-summary',\r\n    AGENT_STATUS: '/api/v1/rasp/dashboard/agent-status',\r\n    HEARTBEAT: (id: string) => `/api/v1/rasp/agents/${id}/heartbeat`,\r\n    WEBHOOK: '/api/v1/rasp/webhook'\r\n  },\r\n  APPLICATION_SECURITY: {\r\n    OVERVIEW: '/api/v1/application-security/overview',\r\n    VULNERABILITIES: '/api/v1/application-security/vulnerabilities',\r\n    SCANS: '/api/v1/application-security/scans',\r\n    REPORTS: '/api/v1/application-security/reports',\r\n    CONFIGURATION: '/api/v1/application-security/configuration'\r\n  },\r\n  CLOUD_SECURITY: {\r\n    OVERVIEW: '/api/v1/cloud-security/overview',\r\n    AWS: '/api/v1/cloud-security/aws',\r\n    AZURE: '/api/v1/cloud-security/azure',\r\n    GCP: '/api/v1/cloud-security/gcp',\r\n    COMPLIANCE: '/api/v1/cloud-security/compliance',\r\n    THREAT_DETECTION: '/api/v1/cloud-security/threat-detection',\r\n    CONFIGURATION: '/api/v1/cloud-security/configuration'\r\n  },\r\n  NETWORK_SECURITY: {\r\n    OVERVIEW: '/api/v1/network-security/overview',\r\n    FIREWALL: '/api/v1/network-security/firewall',\r\n    IDS_IPS: '/api/v1/network-security/ids-ips',\r\n    VPN: '/api/v1/network-security/vpn',\r\n    MONITORING: '/api/v1/network-security/monitoring',\r\n    THREAT_DETECTION: '/api/v1/network-security/threat-detection'\r\n  },\r\n  DATA_SECURITY: {\r\n    OVERVIEW: '/api/v1/data-security/overview',\r\n    CLASSIFICATION: '/api/v1/data-security/classification',\r\n    ENCRYPTION: '/api/v1/data-security/encryption',\r\n    ACCESS_CONTROL: '/api/v1/data-security/access-control',\r\n    AUDIT: '/api/v1/data-security/audit',\r\n    COMPLIANCE: '/api/v1/data-security/compliance'\r\n  },\r\n  THREAT_INTELLIGENCE: {\r\n    OVERVIEW: '/api/v1/threat-intelligence/overview',\r\n    FEEDS: '/api/v1/threat-intelligence/feeds',\r\n    INDICATORS: '/api/v1/threat-intelligence/indicators',\r\n    REPORTS: '/api/v1/threat-intelligence/reports',\r\n    ANALYSIS: '/api/v1/threat-intelligence/analysis',\r\n    INTEGRATIONS: '/api/v1/threat-intelligence/integrations'\r\n  },\r\n  INCIDENTS: {\r\n    LIST: '/api/v1/incidents',\r\n    CREATE: '/api/v1/incidents',\r\n    GET: (id: string) => `/api/v1/incidents/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/incidents/${id}`,\r\n    DELETE: (id: string) => `/api/v1/incidents/${id}`,\r\n    ASSIGN: (id: string) => `/api/v1/incidents/${id}/assign`,\r\n    STATUS: (id: string) => `/api/v1/incidents/${id}/status`\r\n  },\r\n  COMPLIANCE: {\r\n    OVERVIEW: '/api/v1/compliance/overview',\r\n    FRAMEWORKS: '/api/v1/compliance/frameworks',\r\n    ASSESSMENTS: '/api/v1/compliance/assessments',\r\n    REPORTS: '/api/v1/compliance/reports',\r\n    REMEDIATION: '/api/v1/compliance/remediation'\r\n  },\r\n  WORKFLOWS: {\r\n    LIST: '/api/v1/workflows',\r\n    CREATE: '/api/v1/workflows',\r\n    GET: (id: string) => `/api/v1/workflows/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/workflows/${id}`,\r\n    DELETE: (id: string) => `/api/v1/workflows/${id}`,\r\n    EXECUTE: (id: string) => `/api/v1/workflows/${id}/execute`,\r\n    STATUS: (id: string) => `/api/v1/workflows/${id}/status`,\r\n  },\r\n  AI_ML: {\r\n    OVERVIEW: '/api/v1/ai-ml/overview',\r\n    MODELS: '/api/v1/ai-ml/models',\r\n    PREDICTIONS: '/api/v1/ai-ml/predictions',\r\n    TRAINING: '/api/v1/ai-ml/training',\r\n    ANALYTICS: '/api/v1/ai-ml/analytics'\r\n  },\r\n  INTEGRATIONS: {\r\n    LIST: '/api/v1/integrations',\r\n    CREATE: '/api/v1/integrations',\r\n    GET: (id: string) => `/api/v1/integrations/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/integrations/${id}`,\r\n    DELETE: (id: string) => `/api/v1/integrations/${id}`,\r\n    TEST: (id: string) => `/api/v1/integrations/${id}/test`,\r\n    STATUS: (id: string) => `/api/v1/integrations/${id}/status`\r\n  },\r\n  PROJECTS: {\r\n    LIST: '/api/v1/projects',\r\n    CREATE: '/api/v1/projects',\r\n    GET: (id: string) => `/api/v1/projects/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/projects/${id}`,\r\n    DELETE: (id: string) => `/api/v1/projects/${id}`,\r\n    MEMBERS: (id: string) => `/api/v1/projects/${id}/members`,\r\n    SETTINGS: (id: string) => `/api/v1/projects/${id}/settings`\r\n  },\r\n  REPORTS: {\r\n    LIST: '/api/v1/reports',\r\n    CREATE: '/api/v1/reports',\r\n    GET: (id: string) => `/api/v1/reports/${id}`,\r\n    UPDATE: (id: string) => `/api/v1/reports/${id}`,\r\n    DELETE: (id: string) => `/api/v1/reports/${id}`,\r\n    EXPORT: (id: string) => `/api/v1/reports/${id}/export`,\r\n    SCHEDULE: (id: string) => `/api/v1/reports/${id}/schedule`\r\n  },\r\n  DASHBOARD: {\r\n    OVERVIEW: '/api/v1/dashboard/overview',\r\n    METRICS: '/api/v1/dashboard/metrics',\r\n    ALERTS: '/api/v1/dashboard/alerts',\r\n    ACTIVITY: '/api/v1/dashboard/activity',\r\n    PERFORMANCE: '/api/v1/dashboard/performance'\r\n  },\r\n  SECURITY: {\r\n    OVERVIEW: '/api/v1/security/overview',\r\n    VULNERABILITIES: '/api/v1/security/vulnerabilities',\r\n    THREATS: '/api/v1/security/threats',\r\n    INCIDENTS: '/api/v1/security/incidents',\r\n    COMPLIANCE: '/api/v1/security/compliance'\r\n  },\r\n  WEBSOCKET: {\r\n    CONNECT: '/api/v1/websocket/connect',\r\n    EVENTS: '/api/v1/websocket/events',\r\n    NOTIFICATIONS: '/api/v1/websocket/notifications'\r\n  }\r\n};\r\n\r\n// Service mapping for frontend components\r\nexport const SERVICE_MAPPING = {\r\n  'SAST': 'Static Application Security Testing',\r\n  'DAST': 'Dynamic Application Security Testing',\r\n  'RASP': 'Runtime Application Self-Protection',\r\n  'CLOUD_SECURITY': 'Cloud Security',\r\n  'NETWORK_SECURITY': 'Network Security',\r\n  'DATA_SECURITY': 'Data Security',\r\n  'THREAT_INTELLIGENCE': 'Threat Intelligence',\r\n  'INCIDENTS': 'Security Incidents',\r\n  'COMPLIANCE': 'Compliance Management',\r\n  'WORKFLOWS': 'Security Workflows',\r\n  'AI_ML': 'AI/ML Security',\r\n  'INTEGRATIONS': 'Security Integrations',\r\n  'PROJECTS': 'Project Management',\r\n  'REPORTS': 'Security Reports',\r\n  'DASHBOARD': 'Security Dashboard',\r\n  'SECURITY': 'Overall Security',\r\n  'WEBSOCKET': 'Real-time Communications'\r\n};\r\n\r\n// Integration status tracking\r\nexport interface IntegrationStatus {\r\n  service: string;\r\n  status: 'connected' | 'disconnected' | 'error' | 'unknown';\r\n  lastCheck: Date;\r\n  endpoint: string;\r\n  responseTime?: number;\r\n  error?: string;\r\n}\r\n\r\n// Endpoint test result\r\nexport interface EndpointTestResult {\r\n  endpoint: string;\r\n  method: string;\r\n  status: 'success' | 'failed' | 'timeout' | 'unauthorized';\r\n  responseTime: number;\r\n  statusCode?: number;\r\n  error?: string;\r\n  response?: any;\r\n}\r\n\r\n// Service health status\r\nexport interface ServiceHealthStatus {\r\n  service: string;\r\n  endpoints: EndpointTestResult[];\r\n  overallStatus: 'healthy' | 'partial' | 'unhealthy';\r\n  successRate: number;\r\n  averageResponseTime: number;\r\n  lastVerified: Date;\r\n}\r\n\r\n// Main comprehensive integration service class\r\nclass ComprehensiveIntegrationService {\r\n  private integrationStatus: Map<string, IntegrationStatus> = new Map();\r\n  private serviceHealth: Map<string, ServiceHealthStatus> = new Map();\r\n\r\n  /**\r\n   * Check the health of all backend endpoints\r\n   */\r\n  async checkAllEndpoints(): Promise<Map<string, IntegrationStatus>> {\r\n    const statusChecks = Object.entries(API_ENDPOINTS).map(async ([service, endpoints]) => {\r\n      const serviceEndpoints = Object.values(endpoints).filter(endpoint => \r\n        typeof endpoint === 'string' && !endpoint.includes('{')\r\n      );\r\n      \r\n      for (const endpoint of serviceEndpoints) {\r\n        if (typeof endpoint !== 'string') continue;\r\n        \r\n        try {\r\n          const startTime = Date.now();\r\n          const response = await apiCallWithRetry(() => \r\n            serviceRegistry.get(endpoint)\r\n          );\r\n          const responseTime = Date.now() - startTime;\r\n          \r\n          this.integrationStatus.set(`${service}_${endpoint}`, {\r\n            service,\r\n            status: 'connected',\r\n            lastCheck: new Date(),\r\n            endpoint,\r\n            responseTime\r\n          });\r\n        } catch (error: any) {\r\n          this.integrationStatus.set(`${service}_${endpoint}`, {\r\n            service,\r\n            status: 'error',\r\n            lastCheck: new Date(),\r\n            endpoint,\r\n            error: error.message\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    await Promise.all(statusChecks);\r\n    return this.integrationStatus;\r\n  }\r\n\r\n  /**\r\n   * Test a specific service comprehensively\r\n   */\r\n  async testServiceComprehensive(serviceName: string): Promise<ServiceHealthStatus> {\r\n    const endpoints = API_ENDPOINTS[serviceName as keyof typeof API_ENDPOINTS];\r\n    if (!endpoints) {\r\n      throw new Error(`Service ${serviceName} not found`);\r\n    }\r\n\r\n    const endpointResults: EndpointTestResult[] = [];\r\n    const endpointList = Object.values(endpoints).filter(endpoint => \r\n      typeof endpoint === 'string' && !endpoint.includes('{')\r\n    );\r\n\r\n    for (const endpoint of endpointList) {\r\n      if (typeof endpoint !== 'string') continue;\r\n      \r\n      const result = await this.testEndpoint(endpoint, endpoint);\r\n      endpointResults.push(result);\r\n    }\r\n\r\n    const successCount = endpointResults.filter(r => r.status === 'success').length;\r\n    const successRate = (endpointList.length > 0) ? (successCount / endpointList.length) * 100 : 0;\r\n    const averageResponseTime = endpointResults\r\n      .filter(r => r.responseTime > 0)\r\n      .reduce((sum, r) => sum + r.responseTime, 0) / successCount || 0;\r\n\r\n    const overallStatus = successRate >= 90 ? 'healthy' : \r\n                         successRate >= 50 ? 'partial' : 'unhealthy';\r\n\r\n    const serviceHealth: ServiceHealthStatus = {\r\n      service: serviceName,\r\n      endpoints: endpointResults,\r\n      overallStatus,\r\n      successRate,\r\n      averageResponseTime,\r\n      lastVerified: new Date()\r\n    };\r\n\r\n    this.serviceHealth.set(serviceName, serviceHealth);\r\n    return serviceHealth;\r\n  }\r\n\r\n  /**\r\n   * Test a specific endpoint\r\n   */\r\n  private async testEndpoint(endpoint: string | ((id: string) => string), endpointName: string): Promise<EndpointTestResult> {\r\n    const startTime = Date.now();\r\n    let status: EndpointTestResult['status'] = 'success';\r\n    let statusCode: number | undefined;\r\n    let error: string | undefined;\r\n    let response: any;\r\n\r\n    try {\r\n      const actualEndpoint = typeof endpoint === 'function' ? endpoint('test-id') : endpoint;\r\n      \r\n      try {\r\n        const result = await apiCallWithRetry(() => \r\n          serviceRegistry.get(actualEndpoint)\r\n        );\r\n        statusCode = 200; // Assuming success if no error\r\n        response = result;\r\n      } catch (getError: any) {\r\n        if (getError.response?.status === 405) {\r\n          try {\r\n            const result = await apiCallWithRetry(() => \r\n              serviceRegistry.post(actualEndpoint, {})\r\n            );\r\n            statusCode = 200; // Assuming success if no error\r\n            response = result;\r\n          } catch (postError: any) {\r\n            throw postError;\r\n          }\r\n        } else {\r\n          throw getError;\r\n        }\r\n      }\r\n\r\n      if (statusCode >= 400) {\r\n        status = 'failed';\r\n        error = `HTTP ${statusCode}`;\r\n      }\r\n    } catch (err: any) {\r\n      if (err.code === 'ECONNABORTED') {\r\n        status = 'timeout';\r\n        error = 'Request timeout';\r\n      } else if (err.response?.status === 401) {\r\n        status = 'unauthorized';\r\n        error = 'Unauthorized access';\r\n      } else {\r\n        status = 'failed';\r\n        error = err.message || 'Request failed';\r\n      }\r\n    }\r\n\r\n    const responseTime = Date.now() - startTime;\r\n\r\n    return {\r\n      endpoint: endpointName,\r\n      method: 'GET',\r\n      status,\r\n      responseTime,\r\n      statusCode,\r\n      error,\r\n      response\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get integration status for a specific service\r\n   */\r\n  getServiceStatus(service: string): IntegrationStatus[] {\r\n    return Array.from(this.integrationStatus.values())\r\n      .filter(status => status.service === service);\r\n  }\r\n\r\n  /**\r\n   * Get overall integration health\r\n   */\r\n  getOverallHealth(): { healthy: number; total: number; percentage: number } {\r\n    const total = this.integrationStatus.size;\r\n    const healthy = Array.from(this.integrationStatus.values())\r\n      .filter(status => status.status === 'connected').length;\r\n    \r\n    return {\r\n      healthy,\r\n      total,\r\n      percentage: total > 0 ? Math.round((healthy / total) * 100) : 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all available endpoints for a service\r\n   */\r\n  getServiceEndpoints(service: string): Record<string, string | ((id: string) => string)> {\r\n    return API_ENDPOINTS[service as keyof typeof API_ENDPOINTS] || {};\r\n  }\r\n\r\n  /**\r\n   * Get the corresponding frontend service name\r\n   */\r\n  getFrontendService(backendService: string): string {\r\n    return SERVICE_MAPPING[backendService as keyof typeof SERVICE_MAPPING] || 'unknown';\r\n  }\r\n\r\n  /**\r\n   * Get all services that need attention (errors or disconnections)\r\n   */\r\n  getServicesNeedingAttention(): IntegrationStatus[] {\r\n    return Array.from(this.integrationStatus.values())\r\n      .filter(status => status.status !== 'connected');\r\n  }\r\n\r\n  /**\r\n   * Export integration status report\r\n   */\r\n  exportStatusReport(): string {\r\n    const health = this.getOverallHealth();\r\n    const servicesNeedingAttention = this.getServicesNeedingAttention();\r\n    \r\n    let report = `Comprehensive Integration Status Report - ${new Date().toISOString()}\\n`;\r\n    report += `Overall Health: ${health.percentage}% (${health.healthy}/${health.total})\\n\\n`;\r\n    \r\n    if (servicesNeedingAttention.length > 0) {\r\n      report += `Services Needing Attention:\\n`;\r\n      servicesNeedingAttention.forEach(status => {\r\n        report += `- ${status.service}: ${status.status} - ${status.error || 'Unknown error'}\\n`;\r\n      });\r\n    } else {\r\n      report += `All services are healthy!\\n`;\r\n    }\r\n    \r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Get service health status\r\n   */\r\n  getServiceHealth(serviceName: string): ServiceHealthStatus | undefined {\r\n    return this.serviceHealth.get(serviceName);\r\n  }\r\n\r\n  /**\r\n   * Get all service health statuses\r\n   */\r\n  getAllServiceHealth(): ServiceHealthStatus[] {\r\n    return Array.from(this.serviceHealth.values());\r\n  }\r\n\r\n  /**\r\n   * Clear cached health data\r\n   */\r\n  clearHealthCache(): void {\r\n    this.serviceHealth.clear();\r\n    this.integrationStatus.clear();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const comprehensiveIntegrationService = new ComprehensiveIntegrationService();\r\nexport default ComprehensiveIntegrationService;\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,mBAAmB;;AAErE;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACAC,IAAI,EAAE;IACJC,KAAK,EAAE,oBAAoB;IAC3BC,QAAQ,EAAE,uBAAuB;IACjCC,OAAO,EAAE,sBAAsB;IAC/BC,MAAM,EAAE,qBAAqB;IAC7BC,EAAE,EAAE,iBAAiB;IACrBC,eAAe,EAAE,8BAA8B;IAC/CC,eAAe,EAAE,8BAA8B;IAC/CC,cAAc,EAAE,6BAA6B;IAC7CC,UAAU,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACLC,IAAI,EAAE,eAAe;IACrBC,MAAM,EAAE,eAAe;IACvBC,GAAG,EAAGC,EAAU,IAAK,iBAAiBA,EAAE,EAAE;IAC1CC,MAAM,EAAGD,EAAU,IAAK,iBAAiBA,EAAE,EAAE;IAC7CE,MAAM,EAAGF,EAAU,IAAK,iBAAiBA,EAAE,EAAE;IAC7CG,WAAW,EAAE,2BAA2B;IACxCC,WAAW,EAAE;EACf,CAAC;EACDC,GAAG,EAAE;IACHC,KAAK,EAAE,mBAAmB;IAC1BC,MAAM,EAAE,oBAAoB;IAC5BC,OAAO,EAAE,qBAAqB;IAC9BC,YAAY,EAAE,0BAA0B;IACxCC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLC,SAAS,EAAE,yBAAyB;IACpChB,KAAK,EAAE,qBAAqB;IAC5BiB,aAAa,EAAE,6BAA6B;IAC5CC,UAAU,EAAE,0BAA0B;IACtCC,QAAQ,EAAE;EACZ,CAAC;EAED;EACAC,IAAI,EAAE;IACJJ,SAAS,EAAE,wBAAwB;IACnCK,QAAQ,EAAE,uBAAuB;IACjCC,QAAQ,EAAE,uBAAuB;IACjCC,OAAO,EAAGnB,EAAU,IAAK,yBAAyBA,EAAE,EAAE;IACtDoB,KAAK,EAAE,oBAAoB;IAC3BC,IAAI,EAAGrB,EAAU,IAAK,sBAAsBA,EAAE,EAAE;IAChDsB,eAAe,EAAE,8BAA8B;IAC/CC,iBAAiB,EAAE,gCAAgC;IACnDC,aAAa,EAAE,4BAA4B;IAC3CC,aAAa,EAAE,4BAA4B;IAC3CC,YAAY,EAAE,2BAA2B;IACzCC,UAAU,EAAE,yBAAyB;IACrCC,KAAK,EAAE,oBAAoB;IAC3BC,SAAS,EAAE,wBAAwB;IACnCC,aAAa,EAAG9B,EAAU,IAAK,yBAAyBA,EAAE,gBAAgB;IAC1E+B,OAAO,EAAG/B,EAAU,IAAK,yBAAyBA,EAAE,UAAU;IAC9DgC,MAAM,EAAGhC,EAAU,IAAK,yBAAyBA,EAAE,SAAS;IAC5DiC,gBAAgB,EAAGjC,EAAU,IAAK,yBAAyBA,EAAE,mBAAmB;IAChFkC,WAAW,EAAGlC,EAAU,IAAK,yBAAyBA,EAAE,cAAc;IACtEmC,eAAe,EAAGnC,EAAU,IAAK,yBAAyBA,EAAE,kBAAkB;IAC9EoC,QAAQ,EAAGpC,EAAU,IAAK,yBAAyBA,EAAE;EACvD,CAAC;EACDqC,IAAI,EAAE;IACJpB,QAAQ,EAAE,uBAAuB;IACjCC,QAAQ,EAAE,uBAAuB;IACjCC,OAAO,EAAGnB,EAAU,IAAK,yBAAyBA,EAAE,EAAE;IACtDoB,KAAK,EAAE,oBAAoB;IAC3BC,IAAI,EAAGrB,EAAU,IAAK,sBAAsBA,EAAE,EAAE;IAChDsB,eAAe,EAAE,8BAA8B;IAC/CgB,QAAQ,EAAE,uBAAuB;IACjCC,OAAO,EAAGvC,EAAU,IAAK,wBAAwBA,EAAE,EAAE;IACrDwC,OAAO,EAAE;EACX,CAAC;EACDC,IAAI,EAAE;IACJxB,QAAQ,EAAE,uBAAuB;IACjCC,QAAQ,EAAE,uBAAuB;IACjCC,OAAO,EAAGnB,EAAU,IAAK,yBAAyBA,EAAE,EAAE;IACtDoB,KAAK,EAAE,oBAAoB;IAC3BC,IAAI,EAAGrB,EAAU,IAAK,sBAAsBA,EAAE,EAAE;IAChDsB,eAAe,EAAE,8BAA8B;IAC/CoB,MAAM,EAAE,qBAAqB;IAC7BC,OAAO,EAAE,sBAAsB;IAC/BC,iBAAiB,EAAE,gCAAgC;IACnDJ,OAAO,EAAE;EACX,CAAC;EACDK,IAAI,EAAE;IACJC,MAAM,EAAE,qBAAqB;IAC7BC,KAAK,EAAG/C,EAAU,IAAK,uBAAuBA,EAAE,EAAE;IAClDgD,OAAO,EAAE,sBAAsB;IAC/BC,MAAM,EAAGjD,EAAU,IAAK,wBAAwBA,EAAE,EAAE;IACpD4B,KAAK,EAAE,oBAAoB;IAC3BsB,IAAI,EAAGlD,EAAU,IAAK,sBAAsBA,EAAE,EAAE;IAChDsB,eAAe,EAAE,8BAA8B;IAC/C6B,aAAa,EAAGnD,EAAU,IAAK,gCAAgCA,EAAE,EAAE;IACnEoD,eAAe,EAAE,8BAA8B;IAC/CC,MAAM,EAAE,qBAAqB;IAC7BC,KAAK,EAAGtD,EAAU,IAAK,uBAAuBA,EAAE,EAAE;IAClDuD,YAAY,EAAE,2BAA2B;IACzCC,kBAAkB,EAAE,iCAAiC;IACrDC,cAAc,EAAE,uCAAuC;IACvDC,YAAY,EAAE,qCAAqC;IACnDC,SAAS,EAAG3D,EAAU,IAAK,uBAAuBA,EAAE,YAAY;IAChEwC,OAAO,EAAE;EACX,CAAC;EACDoB,oBAAoB,EAAE;IACpB3C,QAAQ,EAAE,uCAAuC;IACjDK,eAAe,EAAE,8CAA8C;IAC/DF,KAAK,EAAE,oCAAoC;IAC3CmB,OAAO,EAAE,sCAAsC;IAC/CT,aAAa,EAAE;EACjB,CAAC;EACD+B,cAAc,EAAE;IACd5C,QAAQ,EAAE,iCAAiC;IAC3C6C,GAAG,EAAE,4BAA4B;IACjCC,KAAK,EAAE,8BAA8B;IACrCC,GAAG,EAAE,4BAA4B;IACjCC,UAAU,EAAE,mCAAmC;IAC/CC,gBAAgB,EAAE,yCAAyC;IAC3DpC,aAAa,EAAE;EACjB,CAAC;EACDqC,gBAAgB,EAAE;IAChBlD,QAAQ,EAAE,mCAAmC;IAC7CmD,QAAQ,EAAE,mCAAmC;IAC7CC,OAAO,EAAE,kCAAkC;IAC3CC,GAAG,EAAE,8BAA8B;IACnCC,UAAU,EAAE,qCAAqC;IACjDL,gBAAgB,EAAE;EACpB,CAAC;EACDM,aAAa,EAAE;IACbvD,QAAQ,EAAE,gCAAgC;IAC1CwD,cAAc,EAAE,sCAAsC;IACtDC,UAAU,EAAE,kCAAkC;IAC9CC,cAAc,EAAE,sCAAsC;IACtDC,KAAK,EAAE,6BAA6B;IACpCX,UAAU,EAAE;EACd,CAAC;EACDY,mBAAmB,EAAE;IACnB5D,QAAQ,EAAE,sCAAsC;IAChD6D,KAAK,EAAE,mCAAmC;IAC1CC,UAAU,EAAE,wCAAwC;IACpDxC,OAAO,EAAE,qCAAqC;IAC9CyC,QAAQ,EAAE,sCAAsC;IAChDzB,YAAY,EAAE;EAChB,CAAC;EACD0B,SAAS,EAAE;IACTpF,IAAI,EAAE,mBAAmB;IACzBC,MAAM,EAAE,mBAAmB;IAC3BC,GAAG,EAAGC,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IAC9CC,MAAM,EAAGD,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IACjDE,MAAM,EAAGF,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IACjDkF,MAAM,EAAGlF,EAAU,IAAK,qBAAqBA,EAAE,SAAS;IACxDmF,MAAM,EAAGnF,EAAU,IAAK,qBAAqBA,EAAE;EACjD,CAAC;EACDiE,UAAU,EAAE;IACVhD,QAAQ,EAAE,6BAA6B;IACvCmE,UAAU,EAAE,+BAA+B;IAC3CC,WAAW,EAAE,gCAAgC;IAC7C9C,OAAO,EAAE,4BAA4B;IACrC+C,WAAW,EAAE;EACf,CAAC;EACDC,SAAS,EAAE;IACT1F,IAAI,EAAE,mBAAmB;IACzBC,MAAM,EAAE,mBAAmB;IAC3BC,GAAG,EAAGC,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IAC9CC,MAAM,EAAGD,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IACjDE,MAAM,EAAGF,EAAU,IAAK,qBAAqBA,EAAE,EAAE;IACjDwF,OAAO,EAAGxF,EAAU,IAAK,qBAAqBA,EAAE,UAAU;IAC1DmF,MAAM,EAAGnF,EAAU,IAAK,qBAAqBA,EAAE;EACjD,CAAC;EACDyF,KAAK,EAAE;IACLxE,QAAQ,EAAE,wBAAwB;IAClCyE,MAAM,EAAE,sBAAsB;IAC9BC,WAAW,EAAE,2BAA2B;IACxCC,QAAQ,EAAE,wBAAwB;IAClCC,SAAS,EAAE;EACb,CAAC;EACDtC,YAAY,EAAE;IACZ1D,IAAI,EAAE,sBAAsB;IAC5BC,MAAM,EAAE,sBAAsB;IAC9BC,GAAG,EAAGC,EAAU,IAAK,wBAAwBA,EAAE,EAAE;IACjDC,MAAM,EAAGD,EAAU,IAAK,wBAAwBA,EAAE,EAAE;IACpDE,MAAM,EAAGF,EAAU,IAAK,wBAAwBA,EAAE,EAAE;IACpD8F,IAAI,EAAG9F,EAAU,IAAK,wBAAwBA,EAAE,OAAO;IACvDmF,MAAM,EAAGnF,EAAU,IAAK,wBAAwBA,EAAE;EACpD,CAAC;EACDkB,QAAQ,EAAE;IACRrB,IAAI,EAAE,kBAAkB;IACxBC,MAAM,EAAE,kBAAkB;IAC1BC,GAAG,EAAGC,EAAU,IAAK,oBAAoBA,EAAE,EAAE;IAC7CC,MAAM,EAAGD,EAAU,IAAK,oBAAoBA,EAAE,EAAE;IAChDE,MAAM,EAAGF,EAAU,IAAK,oBAAoBA,EAAE,EAAE;IAChD+F,OAAO,EAAG/F,EAAU,IAAK,oBAAoBA,EAAE,UAAU;IACzDe,QAAQ,EAAGf,EAAU,IAAK,oBAAoBA,EAAE;EAClD,CAAC;EACDuC,OAAO,EAAE;IACP1C,IAAI,EAAE,iBAAiB;IACvBC,MAAM,EAAE,iBAAiB;IACzBC,GAAG,EAAGC,EAAU,IAAK,mBAAmBA,EAAE,EAAE;IAC5CC,MAAM,EAAGD,EAAU,IAAK,mBAAmBA,EAAE,EAAE;IAC/CE,MAAM,EAAGF,EAAU,IAAK,mBAAmBA,EAAE,EAAE;IAC/CgG,MAAM,EAAGhG,EAAU,IAAK,mBAAmBA,EAAE,SAAS;IACtDiG,QAAQ,EAAGjG,EAAU,IAAK,mBAAmBA,EAAE;EACjD,CAAC;EACDY,SAAS,EAAE;IACTK,QAAQ,EAAE,4BAA4B;IACtCc,OAAO,EAAE,2BAA2B;IACpCsB,MAAM,EAAE,0BAA0B;IAClCjB,QAAQ,EAAE,4BAA4B;IACtC8D,WAAW,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRlF,QAAQ,EAAE,2BAA2B;IACrCK,eAAe,EAAE,kCAAkC;IACnD8E,OAAO,EAAE,0BAA0B;IACnCnB,SAAS,EAAE,4BAA4B;IACvChB,UAAU,EAAE;EACd,CAAC;EACDoC,SAAS,EAAE;IACTC,OAAO,EAAE,2BAA2B;IACpC5D,MAAM,EAAE,0BAA0B;IAClC6D,aAAa,EAAE;EACjB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7B,MAAM,EAAE,qCAAqC;EAC7C,MAAM,EAAE,sCAAsC;EAC9C,MAAM,EAAE,qCAAqC;EAC7C,gBAAgB,EAAE,gBAAgB;EAClC,kBAAkB,EAAE,kBAAkB;EACtC,eAAe,EAAE,eAAe;EAChC,qBAAqB,EAAE,qBAAqB;EAC5C,WAAW,EAAE,oBAAoB;EACjC,YAAY,EAAE,uBAAuB;EACrC,WAAW,EAAE,oBAAoB;EACjC,OAAO,EAAE,gBAAgB;EACzB,cAAc,EAAE,uBAAuB;EACvC,UAAU,EAAE,oBAAoB;EAChC,SAAS,EAAE,kBAAkB;EAC7B,WAAW,EAAE,oBAAoB;EACjC,UAAU,EAAE,kBAAkB;EAC9B,WAAW,EAAE;AACf,CAAC;;AAED;;AAUA;;AAWA;;AAUA;AACA,MAAMC,+BAA+B,CAAC;EAAAC,YAAA;IAAA,KAC5BC,iBAAiB,GAAmC,IAAIC,GAAG,CAAC,CAAC;IAAA,KAC7DC,aAAa,GAAqC,IAAID,GAAG,CAAC,CAAC;EAAA;EAEnE;AACF;AACA;EACE,MAAME,iBAAiBA,CAAA,EAA4C;IACjE,MAAMC,YAAY,GAAGC,MAAM,CAACC,OAAO,CAAChI,aAAa,CAAC,CAACiI,GAAG,CAAC,OAAO,CAACC,OAAO,EAAEC,SAAS,CAAC,KAAK;MACrF,MAAMC,gBAAgB,GAAGL,MAAM,CAACM,MAAM,CAACF,SAAS,CAAC,CAACG,MAAM,CAACC,QAAQ,IAC/D,OAAOA,QAAQ,KAAK,QAAQ,IAAI,CAACA,QAAQ,CAACC,QAAQ,CAAC,GAAG,CACxD,CAAC;MAED,KAAK,MAAMD,QAAQ,IAAIH,gBAAgB,EAAE;QACvC,IAAI,OAAOG,QAAQ,KAAK,QAAQ,EAAE;QAElC,IAAI;UACF,MAAME,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;UAC5B,MAAMC,QAAQ,GAAG,MAAM7I,gBAAgB,CAAC,MACtCD,eAAe,CAAC+I,GAAG,CAACN,QAAQ,CAC9B,CAAC;UACD,MAAMO,YAAY,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;UAE3C,IAAI,CAACf,iBAAiB,CAACqB,GAAG,CAAC,GAAGb,OAAO,IAAIK,QAAQ,EAAE,EAAE;YACnDL,OAAO;YACPc,MAAM,EAAE,WAAW;YACnBC,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC;YACrBH,QAAQ;YACRO;UACF,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOI,KAAU,EAAE;UACnB,IAAI,CAACxB,iBAAiB,CAACqB,GAAG,CAAC,GAAGb,OAAO,IAAIK,QAAQ,EAAE,EAAE;YACnDL,OAAO;YACPc,MAAM,EAAE,OAAO;YACfC,SAAS,EAAE,IAAIP,IAAI,CAAC,CAAC;YACrBH,QAAQ;YACRW,KAAK,EAAEA,KAAK,CAACC;UACf,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC;IAEF,MAAMC,OAAO,CAACC,GAAG,CAACvB,YAAY,CAAC;IAC/B,OAAO,IAAI,CAACJ,iBAAiB;EAC/B;;EAEA;AACF;AACA;EACE,MAAM4B,wBAAwBA,CAACC,WAAmB,EAAgC;IAChF,MAAMpB,SAAS,GAAGnI,aAAa,CAACuJ,WAAW,CAA+B;IAC1E,IAAI,CAACpB,SAAS,EAAE;MACd,MAAM,IAAIqB,KAAK,CAAC,WAAWD,WAAW,YAAY,CAAC;IACrD;IAEA,MAAME,eAAqC,GAAG,EAAE;IAChD,MAAMC,YAAY,GAAG3B,MAAM,CAACM,MAAM,CAACF,SAAS,CAAC,CAACG,MAAM,CAACC,QAAQ,IAC3D,OAAOA,QAAQ,KAAK,QAAQ,IAAI,CAACA,QAAQ,CAACC,QAAQ,CAAC,GAAG,CACxD,CAAC;IAED,KAAK,MAAMD,QAAQ,IAAImB,YAAY,EAAE;MACnC,IAAI,OAAOnB,QAAQ,KAAK,QAAQ,EAAE;MAElC,MAAMoB,MAAM,GAAG,MAAM,IAAI,CAACC,YAAY,CAACrB,QAAQ,EAAEA,QAAQ,CAAC;MAC1DkB,eAAe,CAACI,IAAI,CAACF,MAAM,CAAC;IAC9B;IAEA,MAAMG,YAAY,GAAGL,eAAe,CAACnB,MAAM,CAACyB,CAAC,IAAIA,CAAC,CAACf,MAAM,KAAK,SAAS,CAAC,CAACgB,MAAM;IAC/E,MAAMC,WAAW,GAAIP,YAAY,CAACM,MAAM,GAAG,CAAC,GAAKF,YAAY,GAAGJ,YAAY,CAACM,MAAM,GAAI,GAAG,GAAG,CAAC;IAC9F,MAAME,mBAAmB,GAAGT,eAAe,CACxCnB,MAAM,CAACyB,CAAC,IAAIA,CAAC,CAACjB,YAAY,GAAG,CAAC,CAAC,CAC/BqB,MAAM,CAAC,CAACC,GAAG,EAAEL,CAAC,KAAKK,GAAG,GAAGL,CAAC,CAACjB,YAAY,EAAE,CAAC,CAAC,GAAGgB,YAAY,IAAI,CAAC;IAElE,MAAMO,aAAa,GAAGJ,WAAW,IAAI,EAAE,GAAG,SAAS,GAC9BA,WAAW,IAAI,EAAE,GAAG,SAAS,GAAG,WAAW;IAEhE,MAAMrC,aAAkC,GAAG;MACzCM,OAAO,EAAEqB,WAAW;MACpBpB,SAAS,EAAEsB,eAAe;MAC1BY,aAAa;MACbJ,WAAW;MACXC,mBAAmB;MACnBI,YAAY,EAAE,IAAI5B,IAAI,CAAC;IACzB,CAAC;IAED,IAAI,CAACd,aAAa,CAACmB,GAAG,CAACQ,WAAW,EAAE3B,aAAa,CAAC;IAClD,OAAOA,aAAa;EACtB;;EAEA;AACF;AACA;EACE,MAAcgC,YAAYA,CAACrB,QAA2C,EAAEgC,YAAoB,EAA+B;IACzH,MAAM9B,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5B,IAAIK,MAAoC,GAAG,SAAS;IACpD,IAAIwB,UAA8B;IAClC,IAAItB,KAAyB;IAC7B,IAAIN,QAAa;IAEjB,IAAI;MACF,MAAM6B,cAAc,GAAG,OAAOlC,QAAQ,KAAK,UAAU,GAAGA,QAAQ,CAAC,SAAS,CAAC,GAAGA,QAAQ;MAEtF,IAAI;QACF,MAAMoB,MAAM,GAAG,MAAM5J,gBAAgB,CAAC,MACpCD,eAAe,CAAC+I,GAAG,CAAC4B,cAAc,CACpC,CAAC;QACDD,UAAU,GAAG,GAAG,CAAC,CAAC;QAClB5B,QAAQ,GAAGe,MAAM;MACnB,CAAC,CAAC,OAAOe,QAAa,EAAE;QAAA,IAAAC,kBAAA;QACtB,IAAI,EAAAA,kBAAA,GAAAD,QAAQ,CAAC9B,QAAQ,cAAA+B,kBAAA,uBAAjBA,kBAAA,CAAmB3B,MAAM,MAAK,GAAG,EAAE;UACrC,IAAI;YACF,MAAMW,MAAM,GAAG,MAAM5J,gBAAgB,CAAC,MACpCD,eAAe,CAAC8K,IAAI,CAACH,cAAc,EAAE,CAAC,CAAC,CACzC,CAAC;YACDD,UAAU,GAAG,GAAG,CAAC,CAAC;YAClB5B,QAAQ,GAAGe,MAAM;UACnB,CAAC,CAAC,OAAOkB,SAAc,EAAE;YACvB,MAAMA,SAAS;UACjB;QACF,CAAC,MAAM;UACL,MAAMH,QAAQ;QAChB;MACF;MAEA,IAAIF,UAAU,IAAI,GAAG,EAAE;QACrBxB,MAAM,GAAG,QAAQ;QACjBE,KAAK,GAAG,QAAQsB,UAAU,EAAE;MAC9B;IACF,CAAC,CAAC,OAAOM,GAAQ,EAAE;MAAA,IAAAC,aAAA;MACjB,IAAID,GAAG,CAACE,IAAI,KAAK,cAAc,EAAE;QAC/BhC,MAAM,GAAG,SAAS;QAClBE,KAAK,GAAG,iBAAiB;MAC3B,CAAC,MAAM,IAAI,EAAA6B,aAAA,GAAAD,GAAG,CAAClC,QAAQ,cAAAmC,aAAA,uBAAZA,aAAA,CAAc/B,MAAM,MAAK,GAAG,EAAE;QACvCA,MAAM,GAAG,cAAc;QACvBE,KAAK,GAAG,qBAAqB;MAC/B,CAAC,MAAM;QACLF,MAAM,GAAG,QAAQ;QACjBE,KAAK,GAAG4B,GAAG,CAAC3B,OAAO,IAAI,gBAAgB;MACzC;IACF;IAEA,MAAML,YAAY,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAE3C,OAAO;MACLF,QAAQ,EAAEgC,YAAY;MACtBU,MAAM,EAAE,KAAK;MACbjC,MAAM;MACNF,YAAY;MACZ0B,UAAU;MACVtB,KAAK;MACLN;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACEsC,gBAAgBA,CAAChD,OAAe,EAAuB;IACrD,OAAOiD,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1D,iBAAiB,CAACW,MAAM,CAAC,CAAC,CAAC,CAC/CC,MAAM,CAACU,MAAM,IAAIA,MAAM,CAACd,OAAO,KAAKA,OAAO,CAAC;EACjD;;EAEA;AACF;AACA;EACEmD,gBAAgBA,CAAA,EAA2D;IACzE,MAAMC,KAAK,GAAG,IAAI,CAAC5D,iBAAiB,CAAC6D,IAAI;IACzC,MAAMC,OAAO,GAAGL,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1D,iBAAiB,CAACW,MAAM,CAAC,CAAC,CAAC,CACxDC,MAAM,CAACU,MAAM,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,CAAC,CAACgB,MAAM;IAEzD,OAAO;MACLwB,OAAO;MACPF,KAAK;MACLG,UAAU,EAAEH,KAAK,GAAG,CAAC,GAAGI,IAAI,CAACC,KAAK,CAAEH,OAAO,GAAGF,KAAK,GAAI,GAAG,CAAC,GAAG;IAChE,CAAC;EACH;;EAEA;AACF;AACA;EACEM,mBAAmBA,CAAC1D,OAAe,EAAqD;IACtF,OAAOlI,aAAa,CAACkI,OAAO,CAA+B,IAAI,CAAC,CAAC;EACnE;;EAEA;AACF;AACA;EACE2D,kBAAkBA,CAACC,cAAsB,EAAU;IACjD,OAAOvE,eAAe,CAACuE,cAAc,CAAiC,IAAI,SAAS;EACrF;;EAEA;AACF;AACA;EACEC,2BAA2BA,CAAA,EAAwB;IACjD,OAAOZ,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC1D,iBAAiB,CAACW,MAAM,CAAC,CAAC,CAAC,CAC/CC,MAAM,CAACU,MAAM,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,CAAC;EACpD;;EAEA;AACF;AACA;EACEgD,kBAAkBA,CAAA,EAAW;IAC3B,MAAMC,MAAM,GAAG,IAAI,CAACZ,gBAAgB,CAAC,CAAC;IACtC,MAAMa,wBAAwB,GAAG,IAAI,CAACH,2BAA2B,CAAC,CAAC;IAEnE,IAAII,MAAM,GAAG,6CAA6C,IAAIzD,IAAI,CAAC,CAAC,CAAC0D,WAAW,CAAC,CAAC,IAAI;IACtFD,MAAM,IAAI,mBAAmBF,MAAM,CAACR,UAAU,MAAMQ,MAAM,CAACT,OAAO,IAAIS,MAAM,CAACX,KAAK,OAAO;IAEzF,IAAIY,wBAAwB,CAAClC,MAAM,GAAG,CAAC,EAAE;MACvCmC,MAAM,IAAI,+BAA+B;MACzCD,wBAAwB,CAACG,OAAO,CAACrD,MAAM,IAAI;QACzCmD,MAAM,IAAI,KAAKnD,MAAM,CAACd,OAAO,KAAKc,MAAM,CAACA,MAAM,MAAMA,MAAM,CAACE,KAAK,IAAI,eAAe,IAAI;MAC1F,CAAC,CAAC;IACJ,CAAC,MAAM;MACLiD,MAAM,IAAI,6BAA6B;IACzC;IAEA,OAAOA,MAAM;EACf;;EAEA;AACF;AACA;EACEG,gBAAgBA,CAAC/C,WAAmB,EAAmC;IACrE,OAAO,IAAI,CAAC3B,aAAa,CAACiB,GAAG,CAACU,WAAW,CAAC;EAC5C;;EAEA;AACF;AACA;EACEgD,mBAAmBA,CAAA,EAA0B;IAC3C,OAAOpB,KAAK,CAACC,IAAI,CAAC,IAAI,CAACxD,aAAa,CAACS,MAAM,CAAC,CAAC,CAAC;EAChD;;EAEA;AACF;AACA;EACEmE,gBAAgBA,CAAA,EAAS;IACvB,IAAI,CAAC5E,aAAa,CAAC6E,KAAK,CAAC,CAAC;IAC1B,IAAI,CAAC/E,iBAAiB,CAAC+E,KAAK,CAAC,CAAC;EAChC;AACF;;AAEA;AACA,OAAO,MAAMC,+BAA+B,GAAG,IAAIlF,+BAA+B,CAAC,CAAC;AACpF,eAAeA,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}