{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default configuration\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized access\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Retry function for API calls\nexport const apiCallWithRetry = async (apiCall, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await apiCall();\n    } catch (error) {\n      lastError = error;\n      if (attempt === maxRetries) {\n        throw error;\n      }\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\n    }\n  }\n  throw lastError;\n};\nexport { apiClient };","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","apiCallWithRetry","apiCall","maxRetries","delay","lastError","attempt","resolve","setTimeout"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/utils/apiClient.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default configuration\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Retry function for API calls\r\nexport const apiCallWithRetry = async <T>(\r\n  apiCall: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  delay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: any;\r\n  \r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await apiCall();\r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      if (attempt === maxRetries) {\r\n        throw error;\r\n      }\r\n      \r\n      // Wait before retrying\r\n      await new Promise(resolve => setTimeout(resolve, delay * attempt));\r\n    }\r\n  }\r\n  \r\n  throw lastError;\r\n};\r\n\r\nexport { apiClient }; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,SAAS,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,gBAAgB,GAAG,MAAAA,CAC9BC,OAAyB,EACzBC,UAAkB,GAAG,CAAC,EACtBC,KAAa,GAAG,IAAI,KACL;EACf,IAAIC,SAAc;EAElB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIH,UAAU,EAAEG,OAAO,EAAE,EAAE;IACtD,IAAI;MACF,OAAO,MAAMJ,OAAO,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdc,SAAS,GAAGd,KAAK;MAEjB,IAAIe,OAAO,KAAKH,UAAU,EAAE;QAC1B,MAAMZ,KAAK;MACb;;MAEA;MACA,MAAM,IAAIC,OAAO,CAACe,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEH,KAAK,GAAGE,OAAO,CAAC,CAAC;IACpE;EACF;EAEA,MAAMD,SAAS;AACjB,CAAC;AAED,SAAS9B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}