{"ast":null,"code":"import { apiClient } from '../utils/apiClient';\n\n// Enums matching backend schemas\nexport let ScanStatus = /*#__PURE__*/function (ScanStatus) {\n  ScanStatus[\"PENDING\"] = \"pending\";\n  ScanStatus[\"RUNNING\"] = \"running\";\n  ScanStatus[\"COMPLETED\"] = \"completed\";\n  ScanStatus[\"FAILED\"] = \"failed\";\n  ScanStatus[\"CANCELLED\"] = \"cancelled\";\n  ScanStatus[\"PAUSED\"] = \"paused\";\n  return ScanStatus;\n}({});\nexport let VulnerabilitySeverity = /*#__PURE__*/function (VulnerabilitySeverity) {\n  VulnerabilitySeverity[\"CRITICAL\"] = \"critical\";\n  VulnerabilitySeverity[\"HIGH\"] = \"high\";\n  VulnerabilitySeverity[\"MEDIUM\"] = \"medium\";\n  VulnerabilitySeverity[\"LOW\"] = \"low\";\n  VulnerabilitySeverity[\"INFO\"] = \"info\";\n  return VulnerabilitySeverity;\n}({});\nexport let VulnerabilityStatus = /*#__PURE__*/function (VulnerabilityStatus) {\n  VulnerabilityStatus[\"OPEN\"] = \"open\";\n  VulnerabilityStatus[\"CONFIRMED\"] = \"confirmed\";\n  VulnerabilityStatus[\"FALSE_POSITIVE\"] = \"false_positive\";\n  VulnerabilityStatus[\"FIXED\"] = \"fixed\";\n  VulnerabilityStatus[\"ACCEPTED\"] = \"accepted\";\n  return VulnerabilityStatus;\n}({});\nexport let ScanType = /*#__PURE__*/function (ScanType) {\n  ScanType[\"FULL_SCAN\"] = \"full_scan\";\n  ScanType[\"QUICK_SCAN\"] = \"quick_scan\";\n  ScanType[\"CUSTOM_SCAN\"] = \"custom_scan\";\n  ScanType[\"SCHEDULED_SCAN\"] = \"scheduled_scan\";\n  return ScanType;\n}({});\nexport let AuthenticationType = /*#__PURE__*/function (AuthenticationType) {\n  AuthenticationType[\"NONE\"] = \"none\";\n  AuthenticationType[\"BASIC\"] = \"basic\";\n  AuthenticationType[\"FORM\"] = \"form\";\n  AuthenticationType[\"OAUTH\"] = \"oauth\";\n  AuthenticationType[\"API_KEY\"] = \"api_key\";\n  AuthenticationType[\"CUSTOM\"] = \"custom\";\n  return AuthenticationType;\n}({});\n\n// Base interfaces matching backend schemas\n\n// Create and update interfaces\n\n// Response interfaces\n\n// Filter and statistics interfaces\n\n// Response wrapper interfaces\n\n// User interface (simplified for DAST)\n\nclass DASTService {\n  // DAST Projects\n  async getDASTProjects(skip = 0, limit = 100, filter) {\n    const params = new URLSearchParams();\n    if (skip) params.append('skip', skip.toString());\n    if (limit) params.append('limit', limit.toString());\n    if (filter !== null && filter !== void 0 && filter.scan_status) params.append('scan_status', filter.scan_status);\n    if (filter !== null && filter !== void 0 && filter.vulnerability_severity) params.append('vulnerability_severity', filter.vulnerability_severity);\n    if (filter !== null && filter !== void 0 && filter.scan_type) params.append('scan_type', filter.scan_type);\n    if (filter !== null && filter !== void 0 && filter.date_from) params.append('date_from', filter.date_from);\n    if (filter !== null && filter !== void 0 && filter.date_to) params.append('date_to', filter.date_to);\n    if (filter !== null && filter !== void 0 && filter.tags) filter.tags.forEach(tag => params.append('tags', tag));\n    if (filter !== null && filter !== void 0 && filter.search) params.append('search', filter.search);\n    const response = await apiClient.get(`/dast/projects?${params.toString()}`);\n    return response.data;\n  }\n  async getDASTProject(projectId) {\n    const response = await apiClient.get(`/dast/projects/${projectId}`);\n    return response.data;\n  }\n  async createDASTProject(projectData) {\n    const response = await apiClient.post('/dast/projects', projectData);\n    return response.data;\n  }\n  async updateDASTProject(projectId, updateData) {\n    const response = await apiClient.put(`/dast/projects/${projectId}`, updateData);\n    return response.data;\n  }\n  async deleteDASTProject(projectId) {\n    const response = await apiClient.delete(`/dast/projects/${projectId}`);\n    return response.data;\n  }\n  async cloneDASTProject(projectId, newName) {\n    const response = await apiClient.post(`/dast/projects/${projectId}/clone`, {\n      name: newName\n    });\n    return response.data;\n  }\n  async exportDASTProject(projectId, format = 'json') {\n    const response = await apiClient.get(`/dast/projects/${projectId}/export?format=${format}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // DAST Scans\n  async getDASTScans(projectId, skip = 0, limit = 100, filter) {\n    const params = new URLSearchParams();\n    if (projectId) params.append('project_id', projectId.toString());\n    if (skip) params.append('skip', skip.toString());\n    if (limit) params.append('limit', limit.toString());\n    if (filter !== null && filter !== void 0 && filter.scan_status) params.append('scan_status', filter.scan_status);\n    if (filter !== null && filter !== void 0 && filter.scan_type) params.append('scan_type', filter.scan_type);\n    if (filter !== null && filter !== void 0 && filter.date_from) params.append('date_from', filter.date_from);\n    if (filter !== null && filter !== void 0 && filter.date_to) params.append('date_to', filter.date_to);\n    const response = await apiClient.get(`/dast/scans?${params.toString()}`);\n    return response.data;\n  }\n  async getDASTScan(scanId) {\n    const response = await apiClient.get(`/dast/scans/${scanId}`);\n    return response.data;\n  }\n  async createDASTScan(scanData) {\n    const response = await apiClient.post('/dast/scans', scanData);\n    return response.data;\n  }\n  async updateDASTScan(scanId, updateData) {\n    const response = await apiClient.put(`/dast/scans/${scanId}`, updateData);\n    return response.data;\n  }\n  async deleteDASTScan(scanId) {\n    const response = await apiClient.delete(`/dast/scans/${scanId}`);\n    return response.data;\n  }\n  async startDASTScan(scanId) {\n    const response = await apiClient.post(`/dast/scans/${scanId}/start`);\n    return response.data;\n  }\n  async stopDASTScan(scanId) {\n    const response = await apiClient.post(`/dast/scans/${scanId}/stop`);\n    return response.data;\n  }\n  async pauseDASTScan(scanId) {\n    const response = await apiClient.post(`/dast/scans/${scanId}/pause`);\n    return response.data;\n  }\n  async resumeDASTScan(scanId) {\n    const response = await apiClient.post(`/dast/scans/${scanId}/resume`);\n    return response.data;\n  }\n  async getScanProgress(scanId) {\n    const response = await apiClient.get(`/dast/scans/${scanId}/progress`);\n    return response.data;\n  }\n  async getScanLogs(scanId, level) {\n    const params = level ? `?level=${level}` : '';\n    const response = await apiClient.get(`/dast/scans/${scanId}/logs${params}`);\n    return response.data;\n  }\n\n  // DAST Vulnerabilities\n  async getDASTVulnerabilities(projectId, scanId, skip = 0, limit = 100, filter) {\n    const params = new URLSearchParams();\n    if (projectId) params.append('project_id', projectId.toString());\n    if (scanId) params.append('scan_id', scanId.toString());\n    if (skip) params.append('skip', skip.toString());\n    if (limit) params.append('limit', limit.toString());\n    if (filter !== null && filter !== void 0 && filter.vulnerability_severity) params.append('vulnerability_severity', filter.vulnerability_severity);\n    if (filter !== null && filter !== void 0 && filter.vulnerability_status) params.append('vulnerability_status', filter.vulnerability_status);\n    if (filter !== null && filter !== void 0 && filter.date_from) params.append('date_from', filter.date_from);\n    if (filter !== null && filter !== void 0 && filter.date_to) params.append('date_to', filter.date_to);\n    if (filter !== null && filter !== void 0 && filter.search) params.append('search', filter.search);\n    const response = await apiClient.get(`/dast/vulnerabilities?${params.toString()}`);\n    return response.data;\n  }\n  async getDASTVulnerability(vulnerabilityId) {\n    const response = await apiClient.get(`/dast/vulnerabilities/${vulnerabilityId}`);\n    return response.data;\n  }\n  async updateDASTVulnerability(vulnerabilityId, updateData) {\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}`, updateData);\n    return response.data;\n  }\n  async deleteDASTVulnerability(vulnerabilityId) {\n    const response = await apiClient.delete(`/dast/vulnerabilities/${vulnerabilityId}`);\n    return response.data;\n  }\n  async markVulnerabilityAsFalsePositive(vulnerabilityId, reason) {\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}/false-positive`, {\n      reason\n    });\n    return response.data;\n  }\n  async assignVulnerability(vulnerabilityId, userId) {\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}/assign`, {\n      assigned_to: userId\n    });\n    return response.data;\n  }\n  async addVulnerabilityNote(vulnerabilityId, note) {\n    const response = await apiClient.post(`/dast/vulnerabilities/${vulnerabilityId}/notes`, {\n      note\n    });\n    return response.data;\n  }\n\n  // Bulk operations\n  async bulkUpdateVulnerabilities(vulnerabilityIds, updates) {\n    const response = await apiClient.put('/dast/vulnerabilities/bulk-update', {\n      vulnerability_ids: vulnerabilityIds,\n      updates\n    });\n    return response.data;\n  }\n  async bulkDeleteVulnerabilities(vulnerabilityIds) {\n    const response = await apiClient.delete('/dast/vulnerabilities/bulk-delete', {\n      data: {\n        vulnerability_ids: vulnerabilityIds\n      }\n    });\n    return response.data;\n  }\n\n  // Dashboard and Statistics\n  async getDASTDashboard() {\n    const response = await apiClient.get('/dast/dashboard');\n    return response.data;\n  }\n  async getDASTStats(filter) {\n    const params = new URLSearchParams();\n    if (filter !== null && filter !== void 0 && filter.project_id) params.append('project_id', filter.project_id.toString());\n    if (filter !== null && filter !== void 0 && filter.date_from) params.append('date_from', filter.date_from);\n    if (filter !== null && filter !== void 0 && filter.date_to) params.append('date_to', filter.date_to);\n    const response = await apiClient.get(`/dast/stats?${params.toString()}`);\n    return response.data;\n  }\n\n  // Reports\n  async generateDASTReport(projectId, scanId, format = 'html', includeVulnerabilities = true) {\n    const params = new URLSearchParams();\n    params.append('format', format);\n    params.append('include_vulnerabilities', includeVulnerabilities.toString());\n    if (scanId) params.append('scan_id', scanId.toString());\n    const response = await apiClient.get(`/dast/projects/${projectId}/report?${params.toString()}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async generateVulnerabilityReport(vulnerabilityIds, format = 'html') {\n    const response = await apiClient.post(`/dast/vulnerabilities/report?format=${format}`, {\n      vulnerability_ids: vulnerabilityIds\n    }, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // Scan scheduling\n  async scheduleDASTScan(projectId, scheduleData) {\n    const response = await apiClient.post(`/dast/projects/${projectId}/schedule`, scheduleData);\n    return response.data;\n  }\n  async getScheduledScans(projectId) {\n    const params = projectId ? `?project_id=${projectId}` : '';\n    const response = await apiClient.get(`/dast/scans/scheduled${params}`);\n    return response.data;\n  }\n  async updateScheduledScan(scheduleId, updates) {\n    const response = await apiClient.put(`/dast/scans/scheduled/${scheduleId}`, updates);\n    return response.data;\n  }\n  async deleteScheduledScan(scheduleId) {\n    const response = await apiClient.delete(`/dast/scans/scheduled/${scheduleId}`);\n    return response.data;\n  }\n\n  // Authentication testing\n  async testAuthentication(projectId, authConfig) {\n    const response = await apiClient.post(`/dast/projects/${projectId}/test-auth`, authConfig);\n    return response.data;\n  }\n\n  // Custom rules\n  async getCustomRules(projectId) {\n    const response = await apiClient.get(`/dast/projects/${projectId}/custom-rules`);\n    return response.data;\n  }\n  async createCustomRule(projectId, ruleData) {\n    const response = await apiClient.post(`/dast/projects/${projectId}/custom-rules`, ruleData);\n    return response.data;\n  }\n  async updateCustomRule(projectId, ruleId, ruleData) {\n    const response = await apiClient.put(`/dast/projects/${projectId}/custom-rules/${ruleId}`, ruleData);\n    return response.data;\n  }\n  async deleteCustomRule(projectId, ruleId) {\n    const response = await apiClient.delete(`/dast/projects/${projectId}/custom-rules/${ruleId}`);\n    return response.data;\n  }\n\n  // Export and import\n  async exportDASTData(projectId, format = 'json', includeScans = true, includeVulnerabilities = true) {\n    const params = new URLSearchParams();\n    params.append('format', format);\n    params.append('include_scans', includeScans.toString());\n    params.append('include_vulnerabilities', includeVulnerabilities.toString());\n    const response = await apiClient.get(`/dast/projects/${projectId}/export-data?${params.toString()}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async importDASTData(projectId, data) {\n    const formData = new FormData();\n    formData.append('data', data);\n    const response = await apiClient.post(`/dast/projects/${projectId}/import-data`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n}\nexport const dastService = new DASTService();\nexport default dastService;","map":{"version":3,"names":["apiClient","ScanStatus","VulnerabilitySeverity","VulnerabilityStatus","ScanType","AuthenticationType","DASTService","getDASTProjects","skip","limit","filter","params","URLSearchParams","append","toString","scan_status","vulnerability_severity","scan_type","date_from","date_to","tags","forEach","tag","search","response","get","data","getDASTProject","projectId","createDASTProject","projectData","post","updateDASTProject","updateData","put","deleteDASTProject","delete","cloneDASTProject","newName","name","exportDASTProject","format","responseType","getDASTScans","getDASTScan","scanId","createDASTScan","scanData","updateDASTScan","deleteDASTScan","startDASTScan","stopDASTScan","pauseDASTScan","resumeDASTScan","getScanProgress","getScanLogs","level","getDASTVulnerabilities","vulnerability_status","getDASTVulnerability","vulnerabilityId","updateDASTVulnerability","deleteDASTVulnerability","markVulnerabilityAsFalsePositive","reason","assignVulnerability","userId","assigned_to","addVulnerabilityNote","note","bulkUpdateVulnerabilities","vulnerabilityIds","updates","vulnerability_ids","bulkDeleteVulnerabilities","getDASTDashboard","getDASTStats","project_id","generateDASTReport","includeVulnerabilities","generateVulnerabilityReport","scheduleDASTScan","scheduleData","getScheduledScans","updateScheduledScan","scheduleId","deleteScheduledScan","testAuthentication","authConfig","getCustomRules","createCustomRule","ruleData","updateCustomRule","ruleId","deleteCustomRule","exportDASTData","includeScans","importDASTData","formData","FormData","headers","dastService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/dastService.ts"],"sourcesContent":["import { apiClient } from '../utils/apiClient';\r\n\r\n// Enums matching backend schemas\r\nexport enum ScanStatus {\r\n  PENDING = \"pending\",\r\n  RUNNING = \"running\",\r\n  COMPLETED = \"completed\",\r\n  FAILED = \"failed\",\r\n  CANCELLED = \"cancelled\",\r\n  PAUSED = \"paused\"\r\n}\r\n\r\nexport enum VulnerabilitySeverity {\r\n  CRITICAL = \"critical\",\r\n  HIGH = \"high\",\r\n  MEDIUM = \"medium\",\r\n  LOW = \"low\",\r\n  INFO = \"info\"\r\n}\r\n\r\nexport enum VulnerabilityStatus {\r\n  OPEN = \"open\",\r\n  CONFIRMED = \"confirmed\",\r\n  FALSE_POSITIVE = \"false_positive\",\r\n  FIXED = \"fixed\",\r\n  ACCEPTED = \"accepted\"\r\n}\r\n\r\nexport enum ScanType {\r\n  FULL_SCAN = \"full_scan\",\r\n  QUICK_SCAN = \"quick_scan\",\r\n  CUSTOM_SCAN = \"custom_scan\",\r\n  SCHEDULED_SCAN = \"scheduled_scan\"\r\n}\r\n\r\nexport enum AuthenticationType {\r\n  NONE = \"none\",\r\n  BASIC = \"basic\",\r\n  FORM = \"form\",\r\n  OAUTH = \"oauth\",\r\n  API_KEY = \"api_key\",\r\n  CUSTOM = \"custom\"\r\n}\r\n\r\n// Base interfaces matching backend schemas\r\nexport interface DASTProjectBase {\r\n  name: string;\r\n  description?: string;\r\n  target_url: string;\r\n  target_scope: string[];\r\n  excluded_paths?: string[];\r\n  authentication_config?: AuthenticationConfig;\r\n  scan_configuration?: ScanConfiguration;\r\n  is_active?: boolean;\r\n  tags?: string[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface AuthenticationConfig {\r\n  auth_type: AuthenticationType;\r\n  username?: string;\r\n  password?: string;\r\n  login_url?: string;\r\n  form_data?: Record<string, any>;\r\n  headers?: Record<string, string>;\r\n  cookies?: Record<string, string>;\r\n  oauth_config?: OAuthConfig;\r\n  api_key_config?: APIKeyConfig;\r\n}\r\n\r\nexport interface OAuthConfig {\r\n  client_id: string;\r\n  client_secret: string;\r\n  authorization_url: string;\r\n  token_url: string;\r\n  scope: string[];\r\n  redirect_uri: string;\r\n}\r\n\r\nexport interface APIKeyConfig {\r\n  key_name: string;\r\n  key_value: string;\r\n  header_name?: string;\r\n  query_param?: string;\r\n}\r\n\r\nexport interface ScanConfiguration {\r\n  scan_type: ScanType;\r\n  max_depth: number;\r\n  max_pages: number;\r\n  max_time: number; // minutes\r\n  threads: number;\r\n  delay_between_requests: number; // milliseconds\r\n  user_agent?: string;\r\n  custom_headers?: Record<string, string>;\r\n  excluded_parameters?: string[];\r\n  included_parameters?: string[];\r\n  custom_rules?: CustomRule[];\r\n  scan_schedule?: ScanSchedule;\r\n}\r\n\r\nexport interface CustomRule {\r\n  name: string;\r\n  description: string;\r\n  pattern: string;\r\n  severity: VulnerabilitySeverity;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface ScanSchedule {\r\n  enabled: boolean;\r\n  frequency: 'daily' | 'weekly' | 'monthly';\r\n  time: string; // HH:MM format\r\n  day_of_week?: number; // 0-6, Sunday = 0\r\n  day_of_month?: number; // 1-31\r\n  timezone: string;\r\n}\r\n\r\n// Create and update interfaces\r\nexport interface DASTProjectCreate extends DASTProjectBase {}\r\n\r\nexport interface DASTProjectUpdate {\r\n  name?: string;\r\n  description?: string;\r\n  target_url?: string;\r\n  target_scope?: string[];\r\n  excluded_paths?: string[];\r\n  authentication_config?: AuthenticationConfig;\r\n  scan_configuration?: ScanConfiguration;\r\n  is_active?: boolean;\r\n  tags?: string[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface DASTScanCreate {\r\n  project_id: number;\r\n  scan_name: string;\r\n  scan_type: ScanType;\r\n  scan_configuration?: Partial<ScanConfiguration>;\r\n  scheduled_start?: string;\r\n  priority?: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\nexport interface DASTScanUpdate {\r\n  scan_name?: string;\r\n  scan_configuration?: Partial<ScanConfiguration>;\r\n  priority?: 'low' | 'medium' | 'high' | 'critical';\r\n}\r\n\r\n// Response interfaces\r\nexport interface DASTProjectInDB extends DASTProjectBase {\r\n  id: number;\r\n  created_by: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_scan?: string;\r\n  total_scans: number;\r\n  total_vulnerabilities: number;\r\n  risk_score: number;\r\n}\r\n\r\nexport interface DASTProject extends DASTProjectInDB {\r\n  creator: User;\r\n  scans: DASTScan[];\r\n  vulnerabilities: DASTVulnerability[];\r\n  scan_history: ScanHistory[];\r\n}\r\n\r\nexport interface DASTScanInDB {\r\n  id: number;\r\n  project_id: number;\r\n  scan_name: string;\r\n  scan_type: ScanType;\r\n  status: ScanStatus;\r\n  progress: number; // 0-100\r\n  started_at: string;\r\n  completed_at?: string;\r\n  scan_configuration: ScanConfiguration;\r\n  scan_results?: ScanResults;\r\n  error_message?: string;\r\n  priority: 'low' | 'medium' | 'high' | 'critical';\r\n  created_by: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface DASTScan extends DASTScanInDB {\r\n  project: DASTProject;\r\n  creator: User;\r\n  vulnerabilities: DASTVulnerability[];\r\n  scan_logs: ScanLog[];\r\n}\r\n\r\nexport interface ScanResults {\r\n  total_pages_scanned: number;\r\n  total_requests_made: number;\r\n  scan_duration: number; // seconds\r\n  vulnerabilities_found: number;\r\n  pages_with_vulnerabilities: number;\r\n  scan_coverage: number; // percentage\r\n  scan_summary: Record<string, any>;\r\n}\r\n\r\nexport interface ScanLog {\r\n  id: number;\r\n  scan_id: number;\r\n  timestamp: string;\r\n  level: 'info' | 'warning' | 'error' | 'debug';\r\n  message: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\nexport interface DASTVulnerabilityInDB {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  vulnerability_type: string;\r\n  title: string;\r\n  description: string;\r\n  severity: VulnerabilitySeverity;\r\n  status: VulnerabilityStatus;\r\n  cwe_id?: string;\r\n  cvss_score?: number;\r\n  cvss_vector?: string;\r\n  affected_url: string;\r\n  affected_parameter?: string;\r\n  proof_of_concept?: string;\r\n  remediation_steps: string[];\r\n  references: string[];\r\n  false_positive_reason?: string;\r\n  assigned_to?: number;\r\n  notes?: string;\r\n  discovered_at: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface DASTVulnerability extends DASTVulnerabilityInDB {\r\n  scan: DASTScan;\r\n  project: DASTProject;\r\n  assigned_user?: User;\r\n  vulnerability_details: VulnerabilityDetails;\r\n}\r\n\r\nexport interface VulnerabilityDetails {\r\n  request_details: RequestDetails;\r\n  response_details: ResponseDetails;\r\n  attack_vector: string;\r\n  impact_description: string;\r\n  likelihood: 'low' | 'medium' | 'high';\r\n  technical_details: Record<string, any>;\r\n}\r\n\r\nexport interface RequestDetails {\r\n  method: string;\r\n  url: string;\r\n  headers: Record<string, string>;\r\n  body?: string;\r\n  parameters: Record<string, string>;\r\n}\r\n\r\nexport interface ResponseDetails {\r\n  status_code: number;\r\n  headers: Record<string, string>;\r\n  body?: string;\r\n  response_time: number; // milliseconds\r\n}\r\n\r\nexport interface ScanHistory {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  scan_name: string;\r\n  scan_type: ScanType;\r\n  status: ScanStatus;\r\n  started_at: string;\r\n  completed_at?: string;\r\n  vulnerabilities_found: number;\r\n  risk_score: number;\r\n}\r\n\r\n// Filter and statistics interfaces\r\nexport interface DASTFilter {\r\n  project_id?: number;\r\n  scan_status?: ScanStatus;\r\n  vulnerability_severity?: VulnerabilitySeverity;\r\n  vulnerability_status?: VulnerabilityStatus;\r\n  scan_type?: ScanType;\r\n  date_from?: string;\r\n  date_to?: string;\r\n  tags?: string[];\r\n  search?: string;\r\n}\r\n\r\nexport interface DASTStats {\r\n  total_projects: number;\r\n  active_projects: number;\r\n  total_scans: number;\r\n  running_scans: number;\r\n  completed_scans: number;\r\n  failed_scans: number;\r\n  total_vulnerabilities: number;\r\n  critical_vulnerabilities: number;\r\n  high_vulnerabilities: number;\r\n  medium_vulnerabilities: number;\r\n  low_vulnerabilities: number;\r\n  info_vulnerabilities: number;\r\n  vulnerabilities_by_type: Record<string, number>;\r\n  vulnerabilities_by_severity: Record<string, number>;\r\n  avg_scan_duration: number; // minutes\r\n  scan_success_rate: number; // percentage\r\n  risk_score_trend: Record<string, number>[];\r\n}\r\n\r\nexport interface DASTDashboard {\r\n  overview: DASTStats;\r\n  recent_scans: DASTScan[];\r\n  recent_vulnerabilities: DASTVulnerability[];\r\n  project_summary: ProjectSummary[];\r\n  scan_trends: ScanTrend[];\r\n  vulnerability_trends: VulnerabilityTrend[];\r\n  top_vulnerability_types: TopVulnerabilityType[];\r\n}\r\n\r\nexport interface ProjectSummary {\r\n  id: number;\r\n  name: string;\r\n  target_url: string;\r\n  last_scan: string;\r\n  total_vulnerabilities: number;\r\n  risk_score: number;\r\n  scan_status: ScanStatus;\r\n}\r\n\r\nexport interface ScanTrend {\r\n  date: string;\r\n  total_scans: number;\r\n  completed_scans: number;\r\n  failed_scans: number;\r\n  avg_duration: number;\r\n}\r\n\r\nexport interface VulnerabilityTrend {\r\n  date: string;\r\n  total_vulnerabilities: number;\r\n  critical_vulnerabilities: number;\r\n  high_vulnerabilities: number;\r\n  medium_vulnerabilities: number;\r\n  low_vulnerabilities: number;\r\n}\r\n\r\nexport interface TopVulnerabilityType {\r\n  vulnerability_type: string;\r\n  count: number;\r\n  severity: VulnerabilitySeverity;\r\n  affected_projects: number;\r\n}\r\n\r\n// Response wrapper interfaces\r\nexport interface DASTProjectResponseWrapper {\r\n  projects: DASTProject[];\r\n  total: number;\r\n  skip: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface DASTScanResponseWrapper {\r\n  scans: DASTScan[];\r\n  total: number;\r\n  skip: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface DASTVulnerabilityResponseWrapper {\r\n  vulnerabilities: DASTVulnerability[];\r\n  total: number;\r\n  skip: number;\r\n  limit: number;\r\n}\r\n\r\n// User interface (simplified for DAST)\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  username: string;\r\n  full_name?: string;\r\n  role: string;\r\n}\r\n\r\nclass DASTService {\r\n  // DAST Projects\r\n  async getDASTProjects(\r\n    skip: number = 0,\r\n    limit: number = 100,\r\n    filter?: DASTFilter\r\n  ): Promise<DASTProjectResponseWrapper> {\r\n    const params = new URLSearchParams();\r\n    if (skip) params.append('skip', skip.toString());\r\n    if (limit) params.append('limit', limit.toString());\r\n    if (filter?.scan_status) params.append('scan_status', filter.scan_status);\r\n    if (filter?.vulnerability_severity) params.append('vulnerability_severity', filter.vulnerability_severity);\r\n    if (filter?.scan_type) params.append('scan_type', filter.scan_type);\r\n    if (filter?.date_from) params.append('date_from', filter.date_from);\r\n    if (filter?.date_to) params.append('date_to', filter.date_to);\r\n    if (filter?.tags) filter.tags.forEach(tag => params.append('tags', tag));\r\n    if (filter?.search) params.append('search', filter.search);\r\n\r\n    const response = await apiClient.get(`/dast/projects?${params.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getDASTProject(projectId: number): Promise<DASTProject> {\r\n    const response = await apiClient.get(`/dast/projects/${projectId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async createDASTProject(projectData: DASTProjectCreate): Promise<DASTProject> {\r\n    const response = await apiClient.post('/dast/projects', projectData);\r\n    return response.data;\r\n  }\r\n\r\n  async updateDASTProject(projectId: number, updateData: DASTProjectUpdate): Promise<DASTProject> {\r\n    const response = await apiClient.put(`/dast/projects/${projectId}`, updateData);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDASTProject(projectId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.delete(`/dast/projects/${projectId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async cloneDASTProject(projectId: number, newName: string): Promise<DASTProject> {\r\n    const response = await apiClient.post(`/dast/projects/${projectId}/clone`, { name: newName });\r\n    return response.data;\r\n  }\r\n\r\n  async exportDASTProject(projectId: number, format: 'json' | 'xml' | 'pdf' = 'json'): Promise<Blob> {\r\n    const response = await apiClient.get(`/dast/projects/${projectId}/export?format=${format}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // DAST Scans\r\n  async getDASTScans(\r\n    projectId?: number,\r\n    skip: number = 0,\r\n    limit: number = 100,\r\n    filter?: DASTFilter\r\n  ): Promise<DASTScanResponseWrapper> {\r\n    const params = new URLSearchParams();\r\n    if (projectId) params.append('project_id', projectId.toString());\r\n    if (skip) params.append('skip', skip.toString());\r\n    if (limit) params.append('limit', limit.toString());\r\n    if (filter?.scan_status) params.append('scan_status', filter.scan_status);\r\n    if (filter?.scan_type) params.append('scan_type', filter.scan_type);\r\n    if (filter?.date_from) params.append('date_from', filter.date_from);\r\n    if (filter?.date_to) params.append('date_to', filter.date_to);\r\n\r\n    const response = await apiClient.get(`/dast/scans?${params.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getDASTScan(scanId: number): Promise<DASTScan> {\r\n    const response = await apiClient.get(`/dast/scans/${scanId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async createDASTScan(scanData: DASTScanCreate): Promise<DASTScan> {\r\n    const response = await apiClient.post('/dast/scans', scanData);\r\n    return response.data;\r\n  }\r\n\r\n  async updateDASTScan(scanId: number, updateData: DASTScanUpdate): Promise<DASTScan> {\r\n    const response = await apiClient.put(`/dast/scans/${scanId}`, updateData);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDASTScan(scanId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.delete(`/dast/scans/${scanId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async startDASTScan(scanId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.post(`/dast/scans/${scanId}/start`);\r\n    return response.data;\r\n  }\r\n\r\n  async stopDASTScan(scanId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.post(`/dast/scans/${scanId}/stop`);\r\n    return response.data;\r\n  }\r\n\r\n  async pauseDASTScan(scanId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.post(`/dast/scans/${scanId}/pause`);\r\n    return response.data;\r\n  }\r\n\r\n  async resumeDASTScan(scanId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.post(`/dast/scans/${scanId}/resume`);\r\n    return response.data;\r\n  }\r\n\r\n  async getScanProgress(scanId: number): Promise<{ progress: number; status: ScanStatus; message?: string }> {\r\n    const response = await apiClient.get(`/dast/scans/${scanId}/progress`);\r\n    return response.data;\r\n  }\r\n\r\n  async getScanLogs(scanId: number, level?: string): Promise<ScanLog[]> {\r\n    const params = level ? `?level=${level}` : '';\r\n    const response = await apiClient.get(`/dast/scans/${scanId}/logs${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // DAST Vulnerabilities\r\n  async getDASTVulnerabilities(\r\n    projectId?: number,\r\n    scanId?: number,\r\n    skip: number = 0,\r\n    limit: number = 100,\r\n    filter?: DASTFilter\r\n  ): Promise<DASTVulnerabilityResponseWrapper> {\r\n    const params = new URLSearchParams();\r\n    if (projectId) params.append('project_id', projectId.toString());\r\n    if (scanId) params.append('scan_id', scanId.toString());\r\n    if (skip) params.append('skip', skip.toString());\r\n    if (limit) params.append('limit', limit.toString());\r\n    if (filter?.vulnerability_severity) params.append('vulnerability_severity', filter.vulnerability_severity);\r\n    if (filter?.vulnerability_status) params.append('vulnerability_status', filter.vulnerability_status);\r\n    if (filter?.date_from) params.append('date_from', filter.date_from);\r\n    if (filter?.date_to) params.append('date_to', filter.date_to);\r\n    if (filter?.search) params.append('search', filter.search);\r\n\r\n    const response = await apiClient.get(`/dast/vulnerabilities?${params.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getDASTVulnerability(vulnerabilityId: number): Promise<DASTVulnerability> {\r\n    const response = await apiClient.get(`/dast/vulnerabilities/${vulnerabilityId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async updateDASTVulnerability(\r\n    vulnerabilityId: number,\r\n    updateData: Partial<DASTVulnerability>\r\n  ): Promise<DASTVulnerability> {\r\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}`, updateData);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDASTVulnerability(vulnerabilityId: number): Promise<{ message: string }> {\r\n    const response = await apiClient.delete(`/dast/vulnerabilities/${vulnerabilityId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async markVulnerabilityAsFalsePositive(\r\n    vulnerabilityId: number,\r\n    reason: string\r\n  ): Promise<DASTVulnerability> {\r\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}/false-positive`, { reason });\r\n    return response.data;\r\n  }\r\n\r\n  async assignVulnerability(vulnerabilityId: number, userId: number): Promise<DASTVulnerability> {\r\n    const response = await apiClient.put(`/dast/vulnerabilities/${vulnerabilityId}/assign`, { assigned_to: userId });\r\n    return response.data;\r\n  }\r\n\r\n  async addVulnerabilityNote(vulnerabilityId: number, note: string): Promise<DASTVulnerability> {\r\n    const response = await apiClient.post(`/dast/vulnerabilities/${vulnerabilityId}/notes`, { note });\r\n    return response.data;\r\n  }\r\n\r\n  // Bulk operations\r\n  async bulkUpdateVulnerabilities(\r\n    vulnerabilityIds: number[],\r\n    updates: Partial<DASTVulnerability>\r\n  ): Promise<{ message: string }> {\r\n    const response = await apiClient.put('/dast/vulnerabilities/bulk-update', {\r\n      vulnerability_ids: vulnerabilityIds,\r\n      updates\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async bulkDeleteVulnerabilities(vulnerabilityIds: number[]): Promise<{ message: string }> {\r\n    const response = await apiClient.delete('/dast/vulnerabilities/bulk-delete', {\r\n      data: { vulnerability_ids: vulnerabilityIds }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Dashboard and Statistics\r\n  async getDASTDashboard(): Promise<DASTDashboard> {\r\n    const response = await apiClient.get('/dast/dashboard');\r\n    return response.data;\r\n  }\r\n\r\n  async getDASTStats(filter?: DASTFilter): Promise<DASTStats> {\r\n    const params = new URLSearchParams();\r\n    if (filter?.project_id) params.append('project_id', filter.project_id.toString());\r\n    if (filter?.date_from) params.append('date_from', filter.date_from);\r\n    if (filter?.date_to) params.append('date_to', filter.date_to);\r\n\r\n    const response = await apiClient.get(`/dast/stats?${params.toString()}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Reports\r\n  async generateDASTReport(\r\n    projectId: number,\r\n    scanId?: number,\r\n    format: 'html' | 'pdf' | 'json' | 'xml' = 'html',\r\n    includeVulnerabilities: boolean = true\r\n  ): Promise<Blob> {\r\n    const params = new URLSearchParams();\r\n    params.append('format', format);\r\n    params.append('include_vulnerabilities', includeVulnerabilities.toString());\r\n    if (scanId) params.append('scan_id', scanId.toString());\r\n\r\n    const response = await apiClient.get(`/dast/projects/${projectId}/report?${params.toString()}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async generateVulnerabilityReport(\r\n    vulnerabilityIds: number[],\r\n    format: 'html' | 'pdf' | 'json' = 'html'\r\n  ): Promise<Blob> {\r\n    const response = await apiClient.post(`/dast/vulnerabilities/report?format=${format}`, {\r\n      vulnerability_ids: vulnerabilityIds\r\n    }, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Scan scheduling\r\n  async scheduleDASTScan(\r\n    projectId: number,\r\n    scheduleData: {\r\n      scan_name: string;\r\n      scan_type: ScanType;\r\n      schedule: ScanSchedule;\r\n      scan_configuration?: Partial<ScanConfiguration>;\r\n    }\r\n  ): Promise<{ message: string; schedule_id: string }> {\r\n    const response = await apiClient.post(`/dast/projects/${projectId}/schedule`, scheduleData);\r\n    return response.data;\r\n  }\r\n\r\n  async getScheduledScans(projectId?: number): Promise<DASTScan[]> {\r\n    const params = projectId ? `?project_id=${projectId}` : '';\r\n    const response = await apiClient.get(`/dast/scans/scheduled${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  async updateScheduledScan(scheduleId: string, updates: any): Promise<{ message: string }> {\r\n    const response = await apiClient.put(`/dast/scans/scheduled/${scheduleId}`, updates);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteScheduledScan(scheduleId: string): Promise<{ message: string }> {\r\n    const response = await apiClient.delete(`/dast/scans/scheduled/${scheduleId}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Authentication testing\r\n  async testAuthentication(\r\n    projectId: number,\r\n    authConfig: AuthenticationConfig\r\n  ): Promise<{ success: boolean; message: string; details?: any }> {\r\n    const response = await apiClient.post(`/dast/projects/${projectId}/test-auth`, authConfig);\r\n    return response.data;\r\n  }\r\n\r\n  // Custom rules\r\n  async getCustomRules(projectId: number): Promise<CustomRule[]> {\r\n    const response = await apiClient.get(`/dast/projects/${projectId}/custom-rules`);\r\n    return response.data;\r\n  }\r\n\r\n  async createCustomRule(projectId: number, ruleData: CustomRule): Promise<CustomRule> {\r\n    const response = await apiClient.post(`/dast/projects/${projectId}/custom-rules`, ruleData);\r\n    return response.data;\r\n  }\r\n\r\n  async updateCustomRule(projectId: number, ruleId: string, ruleData: Partial<CustomRule>): Promise<CustomRule> {\r\n    const response = await apiClient.put(`/dast/projects/${projectId}/custom-rules/${ruleId}`, ruleData);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteCustomRule(projectId: number, ruleId: string): Promise<{ message: string }> {\r\n    const response = await apiClient.delete(`/dast/projects/${projectId}/custom-rules/${ruleId}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Export and import\r\n  async exportDASTData(\r\n    projectId: number,\r\n    format: 'json' | 'xml' | 'csv' = 'json',\r\n    includeScans: boolean = true,\r\n    includeVulnerabilities: boolean = true\r\n  ): Promise<Blob> {\r\n    const params = new URLSearchParams();\r\n    params.append('format', format);\r\n    params.append('include_scans', includeScans.toString());\r\n    params.append('include_vulnerabilities', includeVulnerabilities.toString());\r\n\r\n    const response = await apiClient.get(`/dast/projects/${projectId}/export-data?${params.toString()}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async importDASTData(projectId: number, data: File): Promise<{ message: string; imported_items: number }> {\r\n    const formData = new FormData();\r\n    formData.append('data', data);\r\n\r\n    const response = await apiClient.post(`/dast/projects/${projectId}/import-data`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport const dastService = new DASTService();\r\nexport default dastService;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;;AAE9C;AACA,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAStB,WAAYC,qBAAqB,0BAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAAA,OAArBA,qBAAqB;AAAA;AAQjC,WAAYC,mBAAmB,0BAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAA,OAAnBA,mBAAmB;AAAA;AAQ/B,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAOpB,WAAYC,kBAAkB,0BAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAlBA,kBAAkB;EAAA,OAAlBA,kBAAkB;AAAA;;AAS9B;;AA0EA;;AA+BA;;AAoIA;;AA6EA;;AAsBA;;AASA,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,eAAeA,CACnBC,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,GAAG,EACnBC,MAAmB,EACkB;IACrC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIJ,IAAI,EAAEG,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC;IAChD,IAAIL,KAAK,EAAEE,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;IACnD,IAAIJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEK,WAAW,EAAEJ,MAAM,CAACE,MAAM,CAAC,aAAa,EAAEH,MAAM,CAACK,WAAW,CAAC;IACzE,IAAIL,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEM,sBAAsB,EAAEL,MAAM,CAACE,MAAM,CAAC,wBAAwB,EAAEH,MAAM,CAACM,sBAAsB,CAAC;IAC1G,IAAIN,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEO,SAAS,EAAEN,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACO,SAAS,CAAC;IACnE,IAAIP,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEQ,SAAS,EAAEP,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACQ,SAAS,CAAC;IACnE,IAAIR,MAAM,aAANA,MAAM,eAANA,MAAM,CAAES,OAAO,EAAER,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,MAAM,CAACS,OAAO,CAAC;IAC7D,IAAIT,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEU,IAAI,EAAEV,MAAM,CAACU,IAAI,CAACC,OAAO,CAACC,GAAG,IAAIX,MAAM,CAACE,MAAM,CAAC,MAAM,EAAES,GAAG,CAAC,CAAC;IACxE,IAAIZ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEa,MAAM,EAAEZ,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAACa,MAAM,CAAC;IAE1D,MAAMC,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBd,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC3E,OAAOU,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,cAAcA,CAACC,SAAiB,EAAwB;IAC5D,MAAMJ,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBG,SAAS,EAAE,CAAC;IACnE,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMG,iBAAiBA,CAACC,WAA8B,EAAwB;IAC5E,MAAMN,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,gBAAgB,EAAED,WAAW,CAAC;IACpE,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMM,iBAAiBA,CAACJ,SAAiB,EAAEK,UAA6B,EAAwB;IAC9F,MAAMT,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,kBAAkBN,SAAS,EAAE,EAAEK,UAAU,CAAC;IAC/E,OAAOT,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMS,iBAAiBA,CAACP,SAAiB,EAAgC;IACvE,MAAMJ,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,kBAAkBR,SAAS,EAAE,CAAC;IACtE,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMW,gBAAgBA,CAACT,SAAiB,EAAEU,OAAe,EAAwB;IAC/E,MAAMd,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,kBAAkBH,SAAS,QAAQ,EAAE;MAAEW,IAAI,EAAED;IAAQ,CAAC,CAAC;IAC7F,OAAOd,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMc,iBAAiBA,CAACZ,SAAiB,EAAEa,MAA8B,GAAG,MAAM,EAAiB;IACjG,MAAMjB,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBG,SAAS,kBAAkBa,MAAM,EAAE,EAAE;MAC1FC,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMiB,YAAYA,CAChBf,SAAkB,EAClBpB,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,GAAG,EACnBC,MAAmB,EACe;IAClC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIgB,SAAS,EAAEjB,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEe,SAAS,CAACd,QAAQ,CAAC,CAAC,CAAC;IAChE,IAAIN,IAAI,EAAEG,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC;IAChD,IAAIL,KAAK,EAAEE,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;IACnD,IAAIJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEK,WAAW,EAAEJ,MAAM,CAACE,MAAM,CAAC,aAAa,EAAEH,MAAM,CAACK,WAAW,CAAC;IACzE,IAAIL,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEO,SAAS,EAAEN,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACO,SAAS,CAAC;IACnE,IAAIP,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEQ,SAAS,EAAEP,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACQ,SAAS,CAAC;IACnE,IAAIR,MAAM,aAANA,MAAM,eAANA,MAAM,CAAES,OAAO,EAAER,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,MAAM,CAACS,OAAO,CAAC;IAE7D,MAAMK,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,eAAed,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IACxE,OAAOU,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMkB,WAAWA,CAACC,MAAc,EAAqB;IACnD,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,eAAeoB,MAAM,EAAE,CAAC;IAC7D,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMoB,cAAcA,CAACC,QAAwB,EAAqB;IAChE,MAAMvB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,aAAa,EAAEgB,QAAQ,CAAC;IAC9D,OAAOvB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMsB,cAAcA,CAACH,MAAc,EAAEZ,UAA0B,EAAqB;IAClF,MAAMT,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,eAAeW,MAAM,EAAE,EAAEZ,UAAU,CAAC;IACzE,OAAOT,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMuB,cAAcA,CAACJ,MAAc,EAAgC;IACjE,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,eAAeS,MAAM,EAAE,CAAC;IAChE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMwB,aAAaA,CAACL,MAAc,EAAgC;IAChE,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,eAAec,MAAM,QAAQ,CAAC;IACpE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMyB,YAAYA,CAACN,MAAc,EAAgC;IAC/D,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,eAAec,MAAM,OAAO,CAAC;IACnE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM0B,aAAaA,CAACP,MAAc,EAAgC;IAChE,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,eAAec,MAAM,QAAQ,CAAC;IACpE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM2B,cAAcA,CAACR,MAAc,EAAgC;IACjE,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,eAAec,MAAM,SAAS,CAAC;IACrE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM4B,eAAeA,CAACT,MAAc,EAAuE;IACzG,MAAMrB,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,eAAeoB,MAAM,WAAW,CAAC;IACtE,OAAOrB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM6B,WAAWA,CAACV,MAAc,EAAEW,KAAc,EAAsB;IACpE,MAAM7C,MAAM,GAAG6C,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,EAAE;IAC7C,MAAMhC,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,eAAeoB,MAAM,QAAQlC,MAAM,EAAE,CAAC;IAC3E,OAAOa,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM+B,sBAAsBA,CAC1B7B,SAAkB,EAClBiB,MAAe,EACfrC,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,GAAG,EACnBC,MAAmB,EACwB;IAC3C,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIgB,SAAS,EAAEjB,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEe,SAAS,CAACd,QAAQ,CAAC,CAAC,CAAC;IAChE,IAAI+B,MAAM,EAAElC,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEgC,MAAM,CAAC/B,QAAQ,CAAC,CAAC,CAAC;IACvD,IAAIN,IAAI,EAAEG,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC;IAChD,IAAIL,KAAK,EAAEE,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;IACnD,IAAIJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEM,sBAAsB,EAAEL,MAAM,CAACE,MAAM,CAAC,wBAAwB,EAAEH,MAAM,CAACM,sBAAsB,CAAC;IAC1G,IAAIN,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEgD,oBAAoB,EAAE/C,MAAM,CAACE,MAAM,CAAC,sBAAsB,EAAEH,MAAM,CAACgD,oBAAoB,CAAC;IACpG,IAAIhD,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEQ,SAAS,EAAEP,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACQ,SAAS,CAAC;IACnE,IAAIR,MAAM,aAANA,MAAM,eAANA,MAAM,CAAES,OAAO,EAAER,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,MAAM,CAACS,OAAO,CAAC;IAC7D,IAAIT,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEa,MAAM,EAAEZ,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAACa,MAAM,CAAC;IAE1D,MAAMC,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,yBAAyBd,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAClF,OAAOU,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMiC,oBAAoBA,CAACC,eAAuB,EAA8B;IAC9E,MAAMpC,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,yBAAyBmC,eAAe,EAAE,CAAC;IAChF,OAAOpC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMmC,uBAAuBA,CAC3BD,eAAuB,EACvB3B,UAAsC,EACV;IAC5B,MAAMT,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,yBAAyB0B,eAAe,EAAE,EAAE3B,UAAU,CAAC;IAC5F,OAAOT,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMoC,uBAAuBA,CAACF,eAAuB,EAAgC;IACnF,MAAMpC,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,yBAAyBwB,eAAe,EAAE,CAAC;IACnF,OAAOpC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMqC,gCAAgCA,CACpCH,eAAuB,EACvBI,MAAc,EACc;IAC5B,MAAMxC,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,yBAAyB0B,eAAe,iBAAiB,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC3G,OAAOxC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMuC,mBAAmBA,CAACL,eAAuB,EAAEM,MAAc,EAA8B;IAC7F,MAAM1C,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,yBAAyB0B,eAAe,SAAS,EAAE;MAAEO,WAAW,EAAED;IAAO,CAAC,CAAC;IAChH,OAAO1C,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM0C,oBAAoBA,CAACR,eAAuB,EAAES,IAAY,EAA8B;IAC5F,MAAM7C,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,yBAAyB6B,eAAe,QAAQ,EAAE;MAAES;IAAK,CAAC,CAAC;IACjG,OAAO7C,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM4C,yBAAyBA,CAC7BC,gBAA0B,EAC1BC,OAAmC,EACL;IAC9B,MAAMhD,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,mCAAmC,EAAE;MACxEuC,iBAAiB,EAAEF,gBAAgB;MACnCC;IACF,CAAC,CAAC;IACF,OAAOhD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMgD,yBAAyBA,CAACH,gBAA0B,EAAgC;IACxF,MAAM/C,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,mCAAmC,EAAE;MAC3EV,IAAI,EAAE;QAAE+C,iBAAiB,EAAEF;MAAiB;IAC9C,CAAC,CAAC;IACF,OAAO/C,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMiD,gBAAgBA,CAAA,EAA2B;IAC/C,MAAMnD,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,iBAAiB,CAAC;IACvD,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMkD,YAAYA,CAAClE,MAAmB,EAAsB;IAC1D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIF,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEmE,UAAU,EAAElE,MAAM,CAACE,MAAM,CAAC,YAAY,EAAEH,MAAM,CAACmE,UAAU,CAAC/D,QAAQ,CAAC,CAAC,CAAC;IACjF,IAAIJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEQ,SAAS,EAAEP,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,MAAM,CAACQ,SAAS,CAAC;IACnE,IAAIR,MAAM,aAANA,MAAM,eAANA,MAAM,CAAES,OAAO,EAAER,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,MAAM,CAACS,OAAO,CAAC;IAE7D,MAAMK,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,eAAed,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IACxE,OAAOU,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMoD,kBAAkBA,CACtBlD,SAAiB,EACjBiB,MAAe,EACfJ,MAAuC,GAAG,MAAM,EAChDsC,sBAA+B,GAAG,IAAI,EACvB;IACf,MAAMpE,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE4B,MAAM,CAAC;IAC/B9B,MAAM,CAACE,MAAM,CAAC,yBAAyB,EAAEkE,sBAAsB,CAACjE,QAAQ,CAAC,CAAC,CAAC;IAC3E,IAAI+B,MAAM,EAAElC,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEgC,MAAM,CAAC/B,QAAQ,CAAC,CAAC,CAAC;IAEvD,MAAMU,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBG,SAAS,WAAWjB,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE;MAC9F4B,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMsD,2BAA2BA,CAC/BT,gBAA0B,EAC1B9B,MAA+B,GAAG,MAAM,EACzB;IACf,MAAMjB,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,uCAAuCU,MAAM,EAAE,EAAE;MACrFgC,iBAAiB,EAAEF;IACrB,CAAC,EAAE;MACD7B,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMuD,gBAAgBA,CACpBrD,SAAiB,EACjBsD,YAKC,EACkD;IACnD,MAAM1D,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,kBAAkBH,SAAS,WAAW,EAAEsD,YAAY,CAAC;IAC3F,OAAO1D,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMyD,iBAAiBA,CAACvD,SAAkB,EAAuB;IAC/D,MAAMjB,MAAM,GAAGiB,SAAS,GAAG,eAAeA,SAAS,EAAE,GAAG,EAAE;IAC1D,MAAMJ,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,wBAAwBd,MAAM,EAAE,CAAC;IACtE,OAAOa,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM0D,mBAAmBA,CAACC,UAAkB,EAAEb,OAAY,EAAgC;IACxF,MAAMhD,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,yBAAyBmD,UAAU,EAAE,EAAEb,OAAO,CAAC;IACpF,OAAOhD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAM4D,mBAAmBA,CAACD,UAAkB,EAAgC;IAC1E,MAAM7D,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,yBAAyBiD,UAAU,EAAE,CAAC;IAC9E,OAAO7D,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM6D,kBAAkBA,CACtB3D,SAAiB,EACjB4D,UAAgC,EAC+B;IAC/D,MAAMhE,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,kBAAkBH,SAAS,YAAY,EAAE4D,UAAU,CAAC;IAC1F,OAAOhE,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM+D,cAAcA,CAAC7D,SAAiB,EAAyB;IAC7D,MAAMJ,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBG,SAAS,eAAe,CAAC;IAChF,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMgE,gBAAgBA,CAAC9D,SAAiB,EAAE+D,QAAoB,EAAuB;IACnF,MAAMnE,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,kBAAkBH,SAAS,eAAe,EAAE+D,QAAQ,CAAC;IAC3F,OAAOnE,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMkE,gBAAgBA,CAAChE,SAAiB,EAAEiE,MAAc,EAAEF,QAA6B,EAAuB;IAC5G,MAAMnE,QAAQ,GAAG,MAAMxB,SAAS,CAACkC,GAAG,CAAC,kBAAkBN,SAAS,iBAAiBiE,MAAM,EAAE,EAAEF,QAAQ,CAAC;IACpG,OAAOnE,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMoE,gBAAgBA,CAAClE,SAAiB,EAAEiE,MAAc,EAAgC;IACtF,MAAMrE,QAAQ,GAAG,MAAMxB,SAAS,CAACoC,MAAM,CAAC,kBAAkBR,SAAS,iBAAiBiE,MAAM,EAAE,CAAC;IAC7F,OAAOrE,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMqE,cAAcA,CAClBnE,SAAiB,EACjBa,MAA8B,GAAG,MAAM,EACvCuD,YAAqB,GAAG,IAAI,EAC5BjB,sBAA+B,GAAG,IAAI,EACvB;IACf,MAAMpE,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAE4B,MAAM,CAAC;IAC/B9B,MAAM,CAACE,MAAM,CAAC,eAAe,EAAEmF,YAAY,CAAClF,QAAQ,CAAC,CAAC,CAAC;IACvDH,MAAM,CAACE,MAAM,CAAC,yBAAyB,EAAEkE,sBAAsB,CAACjE,QAAQ,CAAC,CAAC,CAAC;IAE3E,MAAMU,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAG,CAAC,kBAAkBG,SAAS,gBAAgBjB,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE;MACnG4B,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMuE,cAAcA,CAACrE,SAAiB,EAAEF,IAAU,EAAwD;IACxG,MAAMwE,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACrF,MAAM,CAAC,MAAM,EAAEa,IAAI,CAAC;IAE7B,MAAMF,QAAQ,GAAG,MAAMxB,SAAS,CAAC+B,IAAI,CAAC,kBAAkBH,SAAS,cAAc,EAAEsE,QAAQ,EAAE;MACzFE,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAO5E,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,OAAO,MAAM2E,WAAW,GAAG,IAAI/F,WAAW,CAAC,CAAC;AAC5C,eAAe+F,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}