{"ast":null,"code":"import{api}from'./apiClient';// Comprehensive Integration Service\n// This service ensures all frontend services are properly connected to backend endpoints\nclass ComprehensiveIntegrationService{constructor(){this.baseUrl=process.env.REACT_APP_API_URL||'http://localhost:8000';}// Test all available backend endpoints\nasync testAllIntegrations(){const results=[];// Test Authentication & Users\nresults.push(await this.testAuthIntegration());results.push(await this.testUsersIntegration());// Test Security Testing Services\nresults.push(await this.testSASTIntegration());results.push(await this.testDASTIntegration());results.push(await this.testRASPIntegration());// Test Cloud & Network Security\nresults.push(await this.testCloudSecurityIntegration());results.push(await this.testNetworkSecurityIntegration());results.push(await this.testEndpointSecurityIntegration());// Test Data & Analytics\nresults.push(await this.testDataSecurityIntegration());results.push(await this.testSIEMSOARIntegration());results.push(await this.testAnalyticsIntegration());// Test Intelligence & Management\nresults.push(await this.testThreatIntelligenceIntegration());results.push(await this.testIAMIntegration());results.push(await this.testAdminIntegration());// Test Additional Services\nresults.push(await this.testProjectsIntegration());results.push(await this.testReportsIntegration());results.push(await this.testCICDIntegration());results.push(await this.testQualityGoalsIntegration());results.push(await this.testDeviceControlIntegration());results.push(await this.testDataProtectionIntegration());results.push(await this.testMonitoringIntegration());return results;}// Test Authentication Integration\nasync testAuthIntegration(){const endpoints=[];const startTime=Date.now();try{// Test login endpoint\nconst loginStart=Date.now();try{await api.post('/api/v1/auth/login',{username:'admin@cybershield.com',password:'password'});endpoints.push({endpoint:'/api/v1/auth/login',method:'POST',status:'working',responseTime:Date.now()-loginStart,lastTested:new Date().toISOString()});}catch(error){endpoints.push({endpoint:'/api/v1/auth/login',method:'POST',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}// Test OAuth login endpoint\nconst oauthStart=Date.now();try{await api.post('/api/v1/auth/login/oauth',{username:'admin@cybershield.com',password:'password'});endpoints.push({endpoint:'/api/v1/auth/login/oauth',method:'POST',status:'working',responseTime:Date.now()-oauthStart,lastTested:new Date().toISOString()});}catch(error){endpoints.push({endpoint:'/api/v1/auth/login/oauth',method:'POST',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}// Test health endpoint\ntry{await api.get('/health');endpoints.push({endpoint:'/health',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){endpoints.push({endpoint:'/health',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;const averageResponseTime=endpoints.filter(e=>e.responseTime).reduce((sum,e)=>sum+(e.responseTime||0),0)/workingEndpoints||0;return{service:'Authentication & Health',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime};}// Test Users Integration\nasync testUsersIntegration(){const endpoints=[];try{// Test users endpoint (might require authentication)\ntry{await api.get('/api/v1/users');endpoints.push({endpoint:'/api/v1/users',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){// 401 is expected without authentication\nendpoints.push({endpoint:'/api/v1/users',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/users',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'User Management',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test SAST Integration\nasync testSASTIntegration(){const endpoints=[];try{// Test SAST dashboard endpoint\ntry{await api.get('/api/v1/sast/dashboard');endpoints.push({endpoint:'/api/v1/sast/dashboard',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/sast/dashboard',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/sast/dashboard',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}// Test SAST projects endpoint\ntry{await api.get('/api/v1/sast/projects');endpoints.push({endpoint:'/api/v1/sast/projects',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/sast/projects',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/sast/projects',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'SAST (Static Application Security Testing)',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test DAST Integration\nasync testDASTIntegration(){const endpoints=[];try{// Test DAST endpoints\ntry{await api.get('/dast');endpoints.push({endpoint:'/dast',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/dast',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/dast',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'DAST (Dynamic Application Security Testing)',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test RASP Integration\nasync testRASPIntegration(){const endpoints=[];try{// Test RASP endpoints\ntry{await api.get('/api/rasp');endpoints.push({endpoint:'/api/rasp',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/rasp',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/rasp',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'RASP (Runtime Application Self-Protection)',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Cloud Security Integration\nasync testCloudSecurityIntegration(){const endpoints=[];try{// Test Cloud Security endpoints\ntry{await api.get('/api/v1/cloud-security');endpoints.push({endpoint:'/api/v1/cloud-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/cloud-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/cloud-security',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Cloud Security',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Network Security Integration\nasync testNetworkSecurityIntegration(){const endpoints=[];try{// Test Network Security endpoints\ntry{await api.get('/api/v1/network-security');endpoints.push({endpoint:'/api/v1/network-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/network-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/network-security',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Network Security',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Endpoint Security Integration\nasync testEndpointSecurityIntegration(){const endpoints=[];try{// Test Endpoint Security endpoints\ntry{await api.get('/api/v1/endpoint-antivirus-edr');endpoints.push({endpoint:'/api/v1/endpoint-antivirus-edr',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/endpoint-antivirus-edr',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/endpoint-antivirus-edr',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Endpoint Security',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Data Security Integration\nasync testDataSecurityIntegration(){const endpoints=[];try{// Test Data Security endpoints\ntry{await api.get('/api/v1/data-security');endpoints.push({endpoint:'/api/v1/data-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/data-security',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/data-security',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Data Security',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test SIEM/SOAR Integration\nasync testSIEMSOARIntegration(){const endpoints=[];try{// Test SIEM/SOAR endpoints\ntry{await api.get('/api/v1/siem-soar');endpoints.push({endpoint:'/api/v1/siem-soar',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/siem-soar',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/siem-soar',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'SIEM/SOAR',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Analytics Integration\nasync testAnalyticsIntegration(){const endpoints=[];try{// Test Analytics endpoints (if available)\ntry{await api.get('/api/v1/analytics');endpoints.push({endpoint:'/api/v1/analytics',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/analytics',method:'GET',status:'working',lastTested:new Date().toISOString()});}else if(error instanceof Error&&error.message.includes('404')){// Analytics endpoint might not exist yet\nendpoints.push({endpoint:'/api/v1/analytics',method:'GET',status:'not_tested',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/analytics',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Analytics',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Threat Intelligence Integration\nasync testThreatIntelligenceIntegration(){const endpoints=[];try{// Test Threat Intelligence endpoints (if available)\ntry{await api.get('/api/v1/threat-intelligence');endpoints.push({endpoint:'/api/v1/threat-intelligence',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/threat-intelligence',method:'GET',status:'working',lastTested:new Date().toISOString()});}else if(error instanceof Error&&error.message.includes('404')){// Threat Intelligence endpoint might not exist yet\nendpoints.push({endpoint:'/api/v1/threat-intelligence',method:'GET',status:'not_tested',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/threat-intelligence',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Threat Intelligence',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test IAM Integration\nasync testIAMIntegration(){const endpoints=[];try{// Test IAM endpoints\ntry{await api.get('/api/v1/iam');endpoints.push({endpoint:'/api/v1/iam',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/iam',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/iam',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'IAM (Identity and Access Management)',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Admin Integration\nasync testAdminIntegration(){const endpoints=[];try{// Test Admin endpoints (if available)\ntry{await api.get('/api/v1/admin');endpoints.push({endpoint:'/api/v1/admin',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/admin',method:'GET',status:'working',lastTested:new Date().toISOString()});}else if(error instanceof Error&&error.message.includes('404')){// Admin endpoint might not exist yet\nendpoints.push({endpoint:'/api/v1/admin',method:'GET',status:'not_tested',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/admin',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Admin',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Projects Integration\nasync testProjectsIntegration(){const endpoints=[];try{// Test Projects endpoints\ntry{await api.get('/api/v1/projects');endpoints.push({endpoint:'/api/v1/projects',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/projects',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/projects',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Projects',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Reports Integration\nasync testReportsIntegration(){const endpoints=[];try{// Test Reports endpoints\ntry{await api.get('/api/v1/reports');endpoints.push({endpoint:'/api/v1/reports',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/reports',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/reports',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Reports',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test CI/CD Integration\nasync testCICDIntegration(){const endpoints=[];try{// Test CI/CD endpoints\ntry{await api.get('/api/v1/cicd');endpoints.push({endpoint:'/api/v1/cicd',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/cicd',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/cicd',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'CI/CD',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Quality Goals Integration\nasync testQualityGoalsIntegration(){const endpoints=[];try{// Test Quality Goals endpoints\ntry{await api.get('/api/v1/quality-goals');endpoints.push({endpoint:'/api/v1/quality-goals',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/quality-goals',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/quality-goals',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Quality Goals',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Device Control Integration\nasync testDeviceControlIntegration(){const endpoints=[];try{// Test Device Control endpoints\ntry{await api.get('/api/v1/device-control');endpoints.push({endpoint:'/api/v1/device-control',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/device-control',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/device-control',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Device Control',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Data Protection Integration\nasync testDataProtectionIntegration(){const endpoints=[];try{// Test Data Protection endpoints\ntry{await api.get('/api/v1/data-protection');endpoints.push({endpoint:'/api/v1/data-protection',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/data-protection',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/data-protection',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Data Protection',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Test Monitoring Integration\nasync testMonitoringIntegration(){const endpoints=[];try{// Test Monitoring SIEM/SOAR endpoints\ntry{await api.get('/api/v1/monitoring-siem-soar');endpoints.push({endpoint:'/api/v1/monitoring-siem-soar',method:'GET',status:'working',lastTested:new Date().toISOString()});}catch(error){if(error instanceof Error&&error.message.includes('401')){endpoints.push({endpoint:'/api/v1/monitoring-siem-soar',method:'GET',status:'working',lastTested:new Date().toISOString()});}else{endpoints.push({endpoint:'/api/v1/monitoring-siem-soar',method:'GET',status:'failing',lastTested:new Date().toISOString(),error:error instanceof Error?error.message:'Unknown error'});}}}catch(error){// Handle any unexpected errors\n}const workingEndpoints=endpoints.filter(e=>e.status==='working').length;const failedEndpoints=endpoints.filter(e=>e.status==='failing').length;return{service:'Monitoring SIEM/SOAR',success:failedEndpoints===0,endpoints,totalEndpoints:endpoints.length,workingEndpoints,failedEndpoints,averageResponseTime:0};}// Get overall integration health\nasync getOverallHealth(){const results=await this.testAllIntegrations();const totalServices=results.length;const healthyServices=results.filter(r=>r.success).length;const partialServices=results.filter(r=>!r.success&&r.workingEndpoints>0).length;const unhealthyServices=results.filter(r=>r.workingEndpoints===0).length;const overallHealth=Math.round(healthyServices/totalServices*100);return{totalServices,healthyServices,partialServices,unhealthyServices,overallHealth,services:results};}// Export integration report\nexportReport(results){const timestamp=new Date().toISOString();let report=\"# CyberShield Integration Report\\n\\n\";report+=\"**Generated:** \".concat(timestamp,\"\\n\\n\");report+=\"## Summary\\n\\n\";const totalServices=results.length;const healthyServices=results.filter(r=>r.success).length;const partialServices=results.filter(r=>!r.success&&r.workingEndpoints>0).length;const unhealthyServices=results.filter(r=>r.workingEndpoints===0).length;report+=\"- **Total Services:** \".concat(totalServices,\"\\n\");report+=\"- **Healthy Services:** \".concat(healthyServices,\"\\n\");report+=\"- **Partial Services:** \".concat(partialServices,\"\\n\");report+=\"- **Unhealthy Services:** \".concat(unhealthyServices,\"\\n\");report+=\"- **Overall Health:** \".concat(Math.round(healthyServices/totalServices*100),\"%\\n\\n\");report+=\"## Detailed Results\\n\\n\";results.forEach(result=>{const status=result.success?'✅':result.workingEndpoints>0?'⚠️':'❌';report+=\"### \".concat(status,\" \").concat(result.service,\"\\n\\n\");report+=\"- **Status:** \".concat(result.success?'Healthy':result.workingEndpoints>0?'Partial':'Unhealthy',\"\\n\");report+=\"- **Working Endpoints:** \".concat(result.workingEndpoints,\"/\").concat(result.totalEndpoints,\"\\n\");report+=\"- **Failed Endpoints:** \".concat(result.failedEndpoints,\"\\n\");if(result.averageResponseTime>0){report+=\"- **Average Response Time:** \".concat(result.averageResponseTime.toFixed(2),\"ms\\n\");}report+=\"\\n\";if(result.endpoints.length>0){report+=\"#### Endpoint Details:\\n\\n\";result.endpoints.forEach(endpoint=>{const endpointStatus=endpoint.status==='working'?'✅':endpoint.status==='failing'?'❌':'⚠️';report+=\"- \".concat(endpointStatus,\" `\").concat(endpoint.method,\" \").concat(endpoint.endpoint,\"` - \").concat(endpoint.status,\"\\n\");if(endpoint.error){report+=\"  - Error: \".concat(endpoint.error,\"\\n\");}});report+=\"\\n\";}});return report;}}export const comprehensiveIntegrationService=new ComprehensiveIntegrationService();export default comprehensiveIntegrationService;","map":{"version":3,"names":["api","ComprehensiveIntegrationService","constructor","baseUrl","process","env","REACT_APP_API_URL","testAllIntegrations","results","push","testAuthIntegration","testUsersIntegration","testSASTIntegration","testDASTIntegration","testRASPIntegration","testCloudSecurityIntegration","testNetworkSecurityIntegration","testEndpointSecurityIntegration","testDataSecurityIntegration","testSIEMSOARIntegration","testAnalyticsIntegration","testThreatIntelligenceIntegration","testIAMIntegration","testAdminIntegration","testProjectsIntegration","testReportsIntegration","testCICDIntegration","testQualityGoalsIntegration","testDeviceControlIntegration","testDataProtectionIntegration","testMonitoringIntegration","endpoints","startTime","Date","now","loginStart","post","username","password","endpoint","method","status","responseTime","lastTested","toISOString","error","Error","message","oauthStart","get","workingEndpoints","filter","e","length","failedEndpoints","averageResponseTime","reduce","sum","service","success","totalEndpoints","includes","getOverallHealth","totalServices","healthyServices","r","partialServices","unhealthyServices","overallHealth","Math","round","services","exportReport","timestamp","report","concat","forEach","result","toFixed","endpointStatus","comprehensiveIntegrationService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/comprehensiveIntegrationService.ts"],"sourcesContent":["import { api } from './apiClient';\r\n\r\n// Comprehensive Integration Service\r\n// This service ensures all frontend services are properly connected to backend endpoints\r\n\r\nexport interface IntegrationStatus {\r\n  service: string;\r\n  status: 'healthy' | 'partial' | 'unhealthy';\r\n  endpoints: EndpointStatus[];\r\n  lastChecked: string;\r\n  overallHealth: number; // 0-100\r\n}\r\n\r\nexport interface EndpointStatus {\r\n  endpoint: string;\r\n  method: string;\r\n  status: 'working' | 'failing' | 'not_tested';\r\n  responseTime?: number;\r\n  lastTested: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface IntegrationTestResult {\r\n  service: string;\r\n  success: boolean;\r\n  endpoints: EndpointStatus[];\r\n  totalEndpoints: number;\r\n  workingEndpoints: number;\r\n  failedEndpoints: number;\r\n  averageResponseTime: number;\r\n}\r\n\r\nclass ComprehensiveIntegrationService {\r\n  private readonly baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  // Test all available backend endpoints\r\n  async testAllIntegrations(): Promise<IntegrationTestResult[]> {\r\n    const results: IntegrationTestResult[] = [];\r\n\r\n    // Test Authentication & Users\r\n    results.push(await this.testAuthIntegration());\r\n    results.push(await this.testUsersIntegration());\r\n\r\n    // Test Security Testing Services\r\n    results.push(await this.testSASTIntegration());\r\n    results.push(await this.testDASTIntegration());\r\n    results.push(await this.testRASPIntegration());\r\n\r\n    // Test Cloud & Network Security\r\n    results.push(await this.testCloudSecurityIntegration());\r\n    results.push(await this.testNetworkSecurityIntegration());\r\n    results.push(await this.testEndpointSecurityIntegration());\r\n\r\n    // Test Data & Analytics\r\n    results.push(await this.testDataSecurityIntegration());\r\n    results.push(await this.testSIEMSOARIntegration());\r\n    results.push(await this.testAnalyticsIntegration());\r\n\r\n    // Test Intelligence & Management\r\n    results.push(await this.testThreatIntelligenceIntegration());\r\n    results.push(await this.testIAMIntegration());\r\n    results.push(await this.testAdminIntegration());\r\n\r\n    // Test Additional Services\r\n    results.push(await this.testProjectsIntegration());\r\n    results.push(await this.testReportsIntegration());\r\n    results.push(await this.testCICDIntegration());\r\n    results.push(await this.testQualityGoalsIntegration());\r\n    results.push(await this.testDeviceControlIntegration());\r\n    results.push(await this.testDataProtectionIntegration());\r\n    results.push(await this.testMonitoringIntegration());\r\n\r\n    return results;\r\n  }\r\n\r\n  // Test Authentication Integration\r\n  private async testAuthIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Test login endpoint\r\n      const loginStart = Date.now();\r\n      try {\r\n        await api.post('/api/v1/auth/login', {\r\n          username: 'admin@cybershield.com',\r\n          password: 'password'\r\n        });\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login',\r\n          method: 'POST',\r\n          status: 'working',\r\n          responseTime: Date.now() - loginStart,\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login',\r\n          method: 'POST',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n      // Test OAuth login endpoint\r\n      const oauthStart = Date.now();\r\n      try {\r\n        await api.post('/api/v1/auth/login/oauth', {\r\n          username: 'admin@cybershield.com',\r\n          password: 'password'\r\n        });\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login/oauth',\r\n          method: 'POST',\r\n          status: 'working',\r\n          responseTime: Date.now() - oauthStart,\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/api/v1/auth/login/oauth',\r\n          method: 'POST',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n      // Test health endpoint\r\n      try {\r\n        await api.get('/health');\r\n        endpoints.push({\r\n          endpoint: '/health',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        endpoints.push({\r\n          endpoint: '/health',\r\n          method: 'GET',\r\n          status: 'failing',\r\n          lastTested: new Date().toISOString(),\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n    const averageResponseTime = endpoints\r\n      .filter(e => e.responseTime)\r\n      .reduce((sum, e) => sum + (e.responseTime || 0), 0) / workingEndpoints || 0;\r\n\r\n    return {\r\n      service: 'Authentication & Health',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime\r\n    };\r\n  }\r\n\r\n  // Test Users Integration\r\n  private async testUsersIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test users endpoint (might require authentication)\r\n      try {\r\n        await api.get('/api/v1/users');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/users',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          // 401 is expected without authentication\r\n          endpoints.push({\r\n            endpoint: '/api/v1/users',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/users',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'User Management',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test SAST Integration\r\n  private async testSASTIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test SAST dashboard endpoint\r\n      try {\r\n        await api.get('/api/v1/sast/dashboard');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/sast/dashboard',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/dashboard',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/dashboard',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Test SAST projects endpoint\r\n      try {\r\n        await api.get('/api/v1/sast/projects');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/sast/projects',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/projects',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/sast/projects',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'SAST (Static Application Security Testing)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test DAST Integration\r\n  private async testDASTIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test DAST endpoints\r\n      try {\r\n        await api.get('/dast');\r\n        endpoints.push({\r\n          endpoint: '/dast',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/dast',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/dast',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'DAST (Dynamic Application Security Testing)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test RASP Integration\r\n  private async testRASPIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test RASP endpoints\r\n      try {\r\n        await api.get('/api/rasp');\r\n        endpoints.push({\r\n          endpoint: '/api/rasp',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/rasp',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/rasp',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'RASP (Runtime Application Self-Protection)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Cloud Security Integration\r\n  private async testCloudSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Cloud Security endpoints\r\n      try {\r\n        await api.get('/api/v1/cloud-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/cloud-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cloud-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cloud-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Cloud Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Network Security Integration\r\n  private async testNetworkSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Network Security endpoints\r\n      try {\r\n        await api.get('/api/v1/network-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/network-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/network-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/network-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Network Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Endpoint Security Integration\r\n  private async testEndpointSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Endpoint Security endpoints\r\n      try {\r\n        await api.get('/api/v1/endpoint-antivirus-edr');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/endpoint-antivirus-edr',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/endpoint-antivirus-edr',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/endpoint-antivirus-edr',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Endpoint Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Data Security Integration\r\n  private async testDataSecurityIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Data Security endpoints\r\n      try {\r\n        await api.get('/api/v1/data-security');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/data-security',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-security',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-security',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Data Security',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test SIEM/SOAR Integration\r\n  private async testSIEMSOARIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test SIEM/SOAR endpoints\r\n      try {\r\n        await api.get('/api/v1/siem-soar');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/siem-soar',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/siem-soar',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/siem-soar',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'SIEM/SOAR',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Analytics Integration\r\n  private async testAnalyticsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Analytics endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/analytics');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/analytics',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Analytics endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/analytics',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Analytics',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Threat Intelligence Integration\r\n  private async testThreatIntelligenceIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Threat Intelligence endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/threat-intelligence');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/threat-intelligence',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Threat Intelligence endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/threat-intelligence',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Threat Intelligence',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test IAM Integration\r\n  private async testIAMIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test IAM endpoints\r\n      try {\r\n        await api.get('/api/v1/iam');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/iam',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/iam',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/iam',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'IAM (Identity and Access Management)',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Admin Integration\r\n  private async testAdminIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Admin endpoints (if available)\r\n      try {\r\n        await api.get('/api/v1/admin');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/admin',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else if (error instanceof Error && error.message.includes('404')) {\r\n          // Admin endpoint might not exist yet\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'not_tested',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/admin',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Admin',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Projects Integration\r\n  private async testProjectsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Projects endpoints\r\n      try {\r\n        await api.get('/api/v1/projects');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/projects',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/projects',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/projects',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Projects',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Reports Integration\r\n  private async testReportsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Reports endpoints\r\n      try {\r\n        await api.get('/api/v1/reports');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/reports',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/reports',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/reports',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Reports',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test CI/CD Integration\r\n  private async testCICDIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test CI/CD endpoints\r\n      try {\r\n        await api.get('/api/v1/cicd');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/cicd',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cicd',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/cicd',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'CI/CD',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Quality Goals Integration\r\n  private async testQualityGoalsIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Quality Goals endpoints\r\n      try {\r\n        await api.get('/api/v1/quality-goals');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/quality-goals',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/quality-goals',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/quality-goals',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Quality Goals',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Device Control Integration\r\n  private async testDeviceControlIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Device Control endpoints\r\n      try {\r\n        await api.get('/api/v1/device-control');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/device-control',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/device-control',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/device-control',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Device Control',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Data Protection Integration\r\n  private async testDataProtectionIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Data Protection endpoints\r\n      try {\r\n        await api.get('/api/v1/data-protection');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/data-protection',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-protection',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/data-protection',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Data Protection',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Test Monitoring Integration\r\n  private async testMonitoringIntegration(): Promise<IntegrationTestResult> {\r\n    const endpoints: EndpointStatus[] = [];\r\n\r\n    try {\r\n      // Test Monitoring SIEM/SOAR endpoints\r\n      try {\r\n        await api.get('/api/v1/monitoring-siem-soar');\r\n        endpoints.push({\r\n          endpoint: '/api/v1/monitoring-siem-soar',\r\n          method: 'GET',\r\n          status: 'working',\r\n          lastTested: new Date().toISOString()\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error && error.message.includes('401')) {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/monitoring-siem-soar',\r\n            method: 'GET',\r\n            status: 'working',\r\n            lastTested: new Date().toISOString()\r\n          });\r\n        } else {\r\n          endpoints.push({\r\n            endpoint: '/api/v1/monitoring-siem-soar',\r\n            method: 'GET',\r\n            status: 'failing',\r\n            lastTested: new Date().toISOString(),\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Handle any unexpected errors\r\n    }\r\n\r\n    const workingEndpoints = endpoints.filter(e => e.status === 'working').length;\r\n    const failedEndpoints = endpoints.filter(e => e.status === 'failing').length;\r\n\r\n    return {\r\n      service: 'Monitoring SIEM/SOAR',\r\n      success: failedEndpoints === 0,\r\n      endpoints,\r\n      totalEndpoints: endpoints.length,\r\n      workingEndpoints,\r\n      failedEndpoints,\r\n      averageResponseTime: 0\r\n    };\r\n  }\r\n\r\n  // Get overall integration health\r\n  async getOverallHealth(): Promise<{\r\n    totalServices: number;\r\n    healthyServices: number;\r\n    partialServices: number;\r\n    unhealthyServices: number;\r\n    overallHealth: number;\r\n    services: IntegrationTestResult[];\r\n  }> {\r\n    const results = await this.testAllIntegrations();\r\n    \r\n    const totalServices = results.length;\r\n    const healthyServices = results.filter(r => r.success).length;\r\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\r\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\r\n    const overallHealth = Math.round((healthyServices / totalServices) * 100);\r\n\r\n    return {\r\n      totalServices,\r\n      healthyServices,\r\n      partialServices,\r\n      unhealthyServices,\r\n      overallHealth,\r\n      services: results\r\n    };\r\n  }\r\n\r\n  // Export integration report\r\n  exportReport(results: IntegrationTestResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    let report = `# CyberShield Integration Report\\n\\n`;\r\n    report += `**Generated:** ${timestamp}\\n\\n`;\r\n    \r\n    report += `## Summary\\n\\n`;\r\n    const totalServices = results.length;\r\n    const healthyServices = results.filter(r => r.success).length;\r\n    const partialServices = results.filter(r => !r.success && r.workingEndpoints > 0).length;\r\n    const unhealthyServices = results.filter(r => r.workingEndpoints === 0).length;\r\n    \r\n    report += `- **Total Services:** ${totalServices}\\n`;\r\n    report += `- **Healthy Services:** ${healthyServices}\\n`;\r\n    report += `- **Partial Services:** ${partialServices}\\n`;\r\n    report += `- **Unhealthy Services:** ${unhealthyServices}\\n`;\r\n    report += `- **Overall Health:** ${Math.round((healthyServices / totalServices) * 100)}%\\n\\n`;\r\n    \r\n    report += `## Detailed Results\\n\\n`;\r\n    \r\n    results.forEach(result => {\r\n      const status = result.success ? '✅' : result.workingEndpoints > 0 ? '⚠️' : '❌';\r\n      report += `### ${status} ${result.service}\\n\\n`;\r\n      report += `- **Status:** ${result.success ? 'Healthy' : result.workingEndpoints > 0 ? 'Partial' : 'Unhealthy'}\\n`;\r\n      report += `- **Working Endpoints:** ${result.workingEndpoints}/${result.totalEndpoints}\\n`;\r\n      report += `- **Failed Endpoints:** ${result.failedEndpoints}\\n`;\r\n      if (result.averageResponseTime > 0) {\r\n        report += `- **Average Response Time:** ${result.averageResponseTime.toFixed(2)}ms\\n`;\r\n      }\r\n      report += `\\n`;\r\n      \r\n      if (result.endpoints.length > 0) {\r\n        report += `#### Endpoint Details:\\n\\n`;\r\n        result.endpoints.forEach(endpoint => {\r\n          const endpointStatus = endpoint.status === 'working' ? '✅' : endpoint.status === 'failing' ? '❌' : '⚠️';\r\n          report += `- ${endpointStatus} \\`${endpoint.method} ${endpoint.endpoint}\\` - ${endpoint.status}\\n`;\r\n          if (endpoint.error) {\r\n            report += `  - Error: ${endpoint.error}\\n`;\r\n          }\r\n        });\r\n        report += `\\n`;\r\n      }\r\n    });\r\n    \r\n    return report;\r\n  }\r\n}\r\n\r\nexport const comprehensiveIntegrationService = new ComprehensiveIntegrationService();\r\nexport default comprehensiveIntegrationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}