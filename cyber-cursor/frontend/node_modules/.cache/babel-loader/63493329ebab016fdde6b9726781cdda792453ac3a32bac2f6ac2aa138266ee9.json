{"ast":null,"code":"import { serviceRegistry, apiCallWithRetry } from './serviceRegistry';\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\nclass RASTService {\n  /**\r\n   * Get RAST overview data\r\n   */\n  async getOverview() {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(API_ENDPOINTS.RAST.OVERVIEW));\n      return response;\n    } catch (error) {\n      console.error('Failed to fetch RAST overview:', error);\n      // Return mock data for development\n      return {\n        total_projects: 12,\n        total_scans: 156,\n        last_scan: new Date().toISOString(),\n        active_scans: 3,\n        protection_enabled_projects: 8,\n        runtime_events_today: 45,\n        attacks_blocked_today: 12\n      };\n    }\n  }\n\n  /**\r\n   * Get all RAST projects\r\n   */\n  async getProjects() {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(API_ENDPOINTS.RAST.PROJECTS));\n      return response;\n    } catch (error) {\n      console.error('Failed to fetch RAST projects:', error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        name: 'E-commerce Platform',\n        description: 'Main e-commerce application with payment processing',\n        target_url: 'https://example-store.com',\n        status: 'active',\n        owner_id: 1,\n        created_at: '2024-01-15T10:00:00Z',\n        updated_at: '2024-01-20T14:30:00Z',\n        protection_enabled: true,\n        runtime_monitoring: true\n      }, {\n        id: 2,\n        name: 'Admin Dashboard',\n        description: 'Internal administration interface',\n        target_url: 'https://admin.example.com',\n        status: 'active',\n        owner_id: 1,\n        created_at: '2024-01-10T09:00:00Z',\n        updated_at: '2024-01-18T16:45:00Z',\n        protection_enabled: true,\n        runtime_monitoring: false\n      }];\n    }\n  }\n\n  /**\r\n   * Create a new RAST project\r\n   */\n  async createProject(projectData) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.post(API_ENDPOINTS.RAST.PROJECTS, projectData));\n      return response;\n    } catch (error) {\n      console.error('Failed to create RAST project:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get a specific RAST project\r\n   */\n  async getProject(id) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(API_ENDPOINTS.RAST.PROJECT(id.toString())));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch RAST project ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Update a RAST project\r\n   */\n  async updateProject(id, projectData) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.put(API_ENDPOINTS.RAST.PROJECT(id.toString()), projectData));\n      return response;\n    } catch (error) {\n      console.error(`Failed to update RAST project ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete a RAST project\r\n   */\n  async deleteProject(id) {\n    try {\n      await apiCallWithRetry(() => serviceRegistry.delete(API_ENDPOINTS.RAST.PROJECT(id.toString())));\n    } catch (error) {\n      console.error(`Failed to delete RAST project ${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get RAST scans for a project\r\n   */\n  async getScans(projectId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}?project_id=${projectId}`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch RAST scans for project ${projectId}:`, error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        project_id: projectId,\n        status: 'completed',\n        started_at: '2024-01-20T10:00:00Z',\n        completed_at: '2024-01-20T12:30:00Z',\n        findings_count: 8,\n        severity_distribution: {\n          critical: 1,\n          high: 2,\n          medium: 3,\n          low: 2\n        },\n        scan_config: {\n          scan_type: 'comprehensive',\n          max_duration: 7200,\n          threads: 10\n        }\n      }];\n    }\n  }\n\n  /**\r\n   * Get RAST vulnerabilities for a project\r\n   */\n  async getVulnerabilities(projectId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.VULNERABILITIES}?project_id=${projectId}`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch RAST vulnerabilities for project ${projectId}:`, error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        scan_id: 1,\n        project_id: projectId,\n        severity: 'high',\n        title: 'SQL Injection Vulnerability',\n        description: 'Potential SQL injection in login form',\n        cwe_id: 'CWE-89',\n        url: '/login',\n        parameter: 'username',\n        status: 'open',\n        created_at: '2024-01-20T12:30:00Z',\n        runtime_context: 'Login endpoint'\n      }];\n    }\n  }\n\n  /**\r\n   * Get RAST events for a project\r\n   */\n  async getEvents(projectId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.EVENTS}?project_id=${projectId}`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch RAST events for project ${projectId}:`, error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        project_id: projectId,\n        event_type: 'attack_detected',\n        severity: 'high',\n        description: 'SQL injection attempt detected',\n        timestamp: '2024-01-20T15:30:00Z',\n        source_ip: '192.168.1.100',\n        user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n        request_data: {\n          url: '/login',\n          method: 'POST'\n        }\n      }];\n    }\n  }\n\n  /**\r\n   * Get RAST actions for a project\r\n   */\n  async getActions(projectId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.ACTIONS}?project_id=${projectId}`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch RAST actions for project ${projectId}:`, error);\n      // Return mock data for development\n      return [{\n        id: 1,\n        project_id: projectId,\n        action_type: 'block_request',\n        description: 'Blocked SQL injection attempt',\n        timestamp: '2024-01-20T15:30:00Z',\n        target_ip: '192.168.1.100',\n        action_data: {\n          reason: 'SQL injection pattern detected'\n        }\n      }];\n    }\n  }\n\n  /**\r\n   * Get protection status for a project\r\n   */\n  async getProtectionStatus(projectId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.PROTECTION_STATUS}?project_id=${projectId}`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch protection status for project ${projectId}:`, error);\n      // Return mock data for development\n      return {\n        project_id: projectId,\n        protection_enabled: true,\n        runtime_monitoring: true,\n        last_attack: '2024-01-20T15:30:00Z',\n        attacks_blocked: 15,\n        vulnerabilities_protected: 8,\n        active_rules: 25,\n        agent_status: 'online'\n      };\n    }\n  }\n\n  /**\r\n   * Start a new RAST scan\r\n   */\n  async startScan(projectId, scanConfig) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.post(API_ENDPOINTS.RAST.SCANS, {\n        project_id: projectId,\n        ...scanConfig\n      }));\n      return response;\n    } catch (error) {\n      console.error(`Failed to start RAST scan for project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get scan status\r\n   */\n  async getScanStatus(scanId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(API_ENDPOINTS.RAST.SCAN(scanId.toString())));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch scan status for scan ${scanId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Stop a running scan\r\n   */\n  async stopScan(scanId) {\n    try {\n      await apiCallWithRetry(() => serviceRegistry.patch(API_ENDPOINTS.RAST.SCAN(scanId.toString()), {\n        status: 'stopped'\n      }));\n    } catch (error) {\n      console.error(`Failed to stop scan ${scanId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get scan report\r\n   */\n  async getScanReport(scanId) {\n    try {\n      const response = await apiCallWithRetry(() => serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}/${scanId}/report`));\n      return response;\n    } catch (error) {\n      console.error(`Failed to fetch report for scan ${scanId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Enable/disable protection for a project\r\n   */\n  async toggleProtection(projectId, enabled) {\n    try {\n      await apiCallWithRetry(() => serviceRegistry.patch(API_ENDPOINTS.RAST.PROJECT(projectId.toString()), {\n        protection_enabled: enabled\n      }));\n    } catch (error) {\n      console.error(`Failed to toggle protection for project ${projectId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Update protection rules\r\n   */\n  async updateProtectionRules(projectId, rules) {\n    try {\n      await apiCallWithRetry(() => serviceRegistry.put(`${API_ENDPOINTS.RAST.PROJECT(projectId.toString())}/protection-rules`, rules));\n    } catch (error) {\n      console.error(`Failed to update protection rules for project ${projectId}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const rastService = new RASTService();\nexport default rastService;","map":{"version":3,"names":["serviceRegistry","apiCallWithRetry","API_ENDPOINTS","RASTService","getOverview","response","get","RAST","OVERVIEW","error","console","total_projects","total_scans","last_scan","Date","toISOString","active_scans","protection_enabled_projects","runtime_events_today","attacks_blocked_today","getProjects","PROJECTS","id","name","description","target_url","status","owner_id","created_at","updated_at","protection_enabled","runtime_monitoring","createProject","projectData","post","getProject","PROJECT","toString","updateProject","put","deleteProject","delete","getScans","projectId","SCANS","project_id","started_at","completed_at","findings_count","severity_distribution","critical","high","medium","low","scan_config","scan_type","max_duration","threads","getVulnerabilities","VULNERABILITIES","scan_id","severity","title","cwe_id","url","parameter","runtime_context","getEvents","EVENTS","event_type","timestamp","source_ip","user_agent","request_data","method","getActions","ACTIONS","action_type","target_ip","action_data","reason","getProtectionStatus","PROTECTION_STATUS","last_attack","attacks_blocked","vulnerabilities_protected","active_rules","agent_status","startScan","scanConfig","getScanStatus","scanId","SCAN","stopScan","patch","getScanReport","toggleProtection","enabled","updateProtectionRules","rules","rastService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/rastService.ts"],"sourcesContent":["import { serviceRegistry, apiCallWithRetry } from './serviceRegistry';\r\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\r\n\r\nexport interface RASTProject {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  target_url: string;\r\n  status: string;\r\n  owner_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  protection_enabled: boolean;\r\n  runtime_monitoring: boolean;\r\n}\r\n\r\nexport interface RASTScan {\r\n  id: number;\r\n  project_id: number;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  started_at: string;\r\n  completed_at?: string;\r\n  findings_count: number;\r\n  severity_distribution: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  scan_config: {\r\n    scan_type: string;\r\n    max_duration: number;\r\n    threads: number;\r\n  };\r\n}\r\n\r\nexport interface RASTVulnerability {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  title: string;\r\n  description: string;\r\n  cwe_id?: string;\r\n  cve_id?: string;\r\n  url: string;\r\n  parameter?: string;\r\n  payload?: string;\r\n  status: 'open' | 'fixed' | 'false_positive';\r\n  created_at: string;\r\n  runtime_context?: string;\r\n}\r\n\r\nexport interface RASTEvent {\r\n  id: number;\r\n  project_id: number;\r\n  event_type: 'attack_detected' | 'vulnerability_exploited' | 'anomaly_detected' | 'protection_triggered';\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  timestamp: string;\r\n  source_ip?: string;\r\n  user_agent?: string;\r\n  request_data?: any;\r\n  response_data?: any;\r\n}\r\n\r\nexport interface RASTAction {\r\n  id: number;\r\n  project_id: number;\r\n  action_type: 'block_request' | 'log_event' | 'redirect' | 'custom_response';\r\n  description: string;\r\n  timestamp: string;\r\n  target_ip?: string;\r\n  target_url?: string;\r\n  action_data?: any;\r\n}\r\n\r\nexport interface RASTProtectionStatus {\r\n  project_id: number;\r\n  protection_enabled: boolean;\r\n  runtime_monitoring: boolean;\r\n  last_attack: string;\r\n  attacks_blocked: number;\r\n  vulnerabilities_protected: number;\r\n  active_rules: number;\r\n  agent_status: 'online' | 'offline' | 'error';\r\n}\r\n\r\nexport interface RASTReport {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  generated_at: string;\r\n  summary: {\r\n    total_vulnerabilities: number;\r\n    critical_count: number;\r\n    high_count: number;\r\n    medium_count: number;\r\n    low_count: number;\r\n    runtime_events: number;\r\n    protection_actions: number;\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface RASTOverview {\r\n  total_projects: number;\r\n  total_scans: number;\r\n  last_scan: string;\r\n  active_scans: number;\r\n  protection_enabled_projects: number;\r\n  runtime_events_today: number;\r\n  attacks_blocked_today: number;\r\n}\r\n\r\nclass RASTService {\r\n  /**\r\n   * Get RAST overview data\r\n   */\r\n  async getOverview(): Promise<RASTOverview> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.OVERVIEW)\r\n      );\r\n      return response as RASTOverview;\r\n    } catch (error) {\r\n      console.error('Failed to fetch RAST overview:', error);\r\n      // Return mock data for development\r\n      return {\r\n        total_projects: 12,\r\n        total_scans: 156,\r\n        last_scan: new Date().toISOString(),\r\n        active_scans: 3,\r\n        protection_enabled_projects: 8,\r\n        runtime_events_today: 45,\r\n        attacks_blocked_today: 12\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all RAST projects\r\n   */\r\n  async getProjects(): Promise<RASTProject[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.PROJECTS)\r\n      );\r\n      return response as RASTProject[];\r\n    } catch (error) {\r\n      console.error('Failed to fetch RAST projects:', error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          name: 'E-commerce Platform',\r\n          description: 'Main e-commerce application with payment processing',\r\n          target_url: 'https://example-store.com',\r\n          status: 'active',\r\n          owner_id: 1,\r\n          created_at: '2024-01-15T10:00:00Z',\r\n          updated_at: '2024-01-20T14:30:00Z',\r\n          protection_enabled: true,\r\n          runtime_monitoring: true\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Admin Dashboard',\r\n          description: 'Internal administration interface',\r\n          target_url: 'https://admin.example.com',\r\n          status: 'active',\r\n          owner_id: 1,\r\n          created_at: '2024-01-10T09:00:00Z',\r\n          updated_at: '2024-01-18T16:45:00Z',\r\n          protection_enabled: true,\r\n          runtime_monitoring: false\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new RAST project\r\n   */\r\n  async createProject(projectData: Partial<RASTProject>): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.post(API_ENDPOINTS.RAST.PROJECTS, projectData)\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error('Failed to create RAST project:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific RAST project\r\n   */\r\n  async getProject(id: number): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.PROJECT(id.toString()))\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a RAST project\r\n   */\r\n  async updateProject(id: number, projectData: Partial<RASTProject>): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.put(API_ENDPOINTS.RAST.PROJECT(id.toString()), projectData)\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error(`Failed to update RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a RAST project\r\n   */\r\n  async deleteProject(id: number): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.delete(API_ENDPOINTS.RAST.PROJECT(id.toString()))\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to delete RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST scans for a project\r\n   */\r\n  async getScans(projectId: number): Promise<RASTScan[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTScan[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST scans for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          status: 'completed',\r\n          started_at: '2024-01-20T10:00:00Z',\r\n          completed_at: '2024-01-20T12:30:00Z',\r\n          findings_count: 8,\r\n          severity_distribution: {\r\n            critical: 1,\r\n            high: 2,\r\n            medium: 3,\r\n            low: 2\r\n          },\r\n          scan_config: {\r\n            scan_type: 'comprehensive',\r\n            max_duration: 7200,\r\n            threads: 10\r\n          }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST vulnerabilities for a project\r\n   */\r\n  async getVulnerabilities(projectId: number): Promise<RASTVulnerability[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.VULNERABILITIES}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTVulnerability[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST vulnerabilities for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          scan_id: 1,\r\n          project_id: projectId,\r\n          severity: 'high',\r\n          title: 'SQL Injection Vulnerability',\r\n          description: 'Potential SQL injection in login form',\r\n          cwe_id: 'CWE-89',\r\n          url: '/login',\r\n          parameter: 'username',\r\n          status: 'open',\r\n          created_at: '2024-01-20T12:30:00Z',\r\n          runtime_context: 'Login endpoint'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST events for a project\r\n   */\r\n  async getEvents(projectId: number): Promise<RASTEvent[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.EVENTS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTEvent[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST events for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          event_type: 'attack_detected',\r\n          severity: 'high',\r\n          description: 'SQL injection attempt detected',\r\n          timestamp: '2024-01-20T15:30:00Z',\r\n          source_ip: '192.168.1.100',\r\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\r\n          request_data: { url: '/login', method: 'POST' }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST actions for a project\r\n   */\r\n  async getActions(projectId: number): Promise<RASTAction[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.ACTIONS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTAction[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST actions for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          action_type: 'block_request',\r\n          description: 'Blocked SQL injection attempt',\r\n          timestamp: '2024-01-20T15:30:00Z',\r\n          target_ip: '192.168.1.100',\r\n          action_data: { reason: 'SQL injection pattern detected' }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get protection status for a project\r\n   */\r\n  async getProtectionStatus(projectId: number): Promise<RASTProtectionStatus> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.PROTECTION_STATUS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTProtectionStatus;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch protection status for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return {\r\n        project_id: projectId,\r\n        protection_enabled: true,\r\n        runtime_monitoring: true,\r\n        last_attack: '2024-01-20T15:30:00Z',\r\n        attacks_blocked: 15,\r\n        vulnerabilities_protected: 8,\r\n        active_rules: 25,\r\n        agent_status: 'online'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new RAST scan\r\n   */\r\n  async startScan(projectId: number, scanConfig: any): Promise<RASTScan> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.post(API_ENDPOINTS.RAST.SCANS, {\r\n          project_id: projectId,\r\n          ...scanConfig\r\n        })\r\n      );\r\n      return response as RASTScan;\r\n    } catch (error) {\r\n      console.error(`Failed to start RAST scan for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get scan status\r\n   */\r\n  async getScanStatus(scanId: number): Promise<RASTScan> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.SCAN(scanId.toString()))\r\n      );\r\n      return response as RASTScan;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch scan status for scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop a running scan\r\n   */\r\n  async stopScan(scanId: number): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.patch(API_ENDPOINTS.RAST.SCAN(scanId.toString()), { status: 'stopped' })\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to stop scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get scan report\r\n   */\r\n  async getScanReport(scanId: number): Promise<RASTReport> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}/${scanId}/report`)\r\n      );\r\n      return response as RASTReport;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch report for scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable/disable protection for a project\r\n   */\r\n  async toggleProtection(projectId: number, enabled: boolean): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.patch(API_ENDPOINTS.RAST.PROJECT(projectId.toString()), {\r\n          protection_enabled: enabled\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to toggle protection for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update protection rules\r\n   */\r\n  async updateProtectionRules(projectId: number, rules: any): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.put(`${API_ENDPOINTS.RAST.PROJECT(projectId.toString())}/protection-rules`, rules)\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to update protection rules for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const rastService = new RASTService();\r\nexport default rastService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}