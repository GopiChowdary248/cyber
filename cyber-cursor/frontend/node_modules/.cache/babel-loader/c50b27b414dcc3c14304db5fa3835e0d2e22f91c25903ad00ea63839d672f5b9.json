{"ast":null,"code":"import { apiClient } from '../utils/apiClient';\n\n// Enums for CI/CD\nexport let PipelineStatus = /*#__PURE__*/function (PipelineStatus) {\n  PipelineStatus[\"PENDING\"] = \"PENDING\";\n  PipelineStatus[\"RUNNING\"] = \"RUNNING\";\n  PipelineStatus[\"SUCCESS\"] = \"SUCCESS\";\n  PipelineStatus[\"FAILED\"] = \"FAILED\";\n  PipelineStatus[\"CANCELLED\"] = \"CANCELLED\";\n  PipelineStatus[\"SKIPPED\"] = \"SKIPPED\";\n  return PipelineStatus;\n}({});\nexport let PipelineTrigger = /*#__PURE__*/function (PipelineTrigger) {\n  PipelineTrigger[\"MANUAL\"] = \"MANUAL\";\n  PipelineTrigger[\"SCHEDULED\"] = \"SCHEDULED\";\n  PipelineTrigger[\"WEBHOOK\"] = \"WEBHOOK\";\n  PipelineTrigger[\"PUSH\"] = \"PUSH\";\n  PipelineTrigger[\"PULL_REQUEST\"] = \"PULL_REQUEST\";\n  PipelineTrigger[\"MERGE\"] = \"MERGE\";\n  return PipelineTrigger;\n}({});\nexport let SecurityScanType = /*#__PURE__*/function (SecurityScanType) {\n  SecurityScanType[\"SAST\"] = \"SAST\";\n  SecurityScanType[\"DAST\"] = \"DAST\";\n  SecurityScanType[\"SCA\"] = \"SCA\";\n  SecurityScanType[\"CONTAINER_SCAN\"] = \"CONTAINER_SCAN\";\n  SecurityScanType[\"INFRASTRUCTURE_SCAN\"] = \"INFRASTRUCTURE_SCAN\";\n  return SecurityScanType;\n}({});\n\n// Interfaces\n\nclass CICDService {\n  constructor() {\n    this.baseUrl = '/api/v1/cicd';\n  }\n  // Get all pipelines with pagination and filtering\n  async getPipelines(page = 1, limit = 20, filter) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n      ...((filter === null || filter === void 0 ? void 0 : filter.status) && {\n        status: filter.status\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.trigger) && {\n        trigger: filter.trigger\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.security_scan_type) && {\n        security_scan_type: filter.security_scan_type\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.project_id) && {\n        project_id: filter.project_id\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.team_id) && {\n        team_id: filter.team_id\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.enabled) !== undefined && {\n        enabled: filter.enabled.toString()\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.created_after) && {\n        created_after: filter.created_after\n      }),\n      ...((filter === null || filter === void 0 ? void 0 : filter.created_before) && {\n        created_before: filter.created_before\n      })\n    });\n    const response = await apiClient.get(`${this.baseUrl}/pipelines?${params}`);\n    return response.data;\n  }\n\n  // Get a specific pipeline by ID\n  async getPipeline(pipelineId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}`);\n    return response.data;\n  }\n\n  // Create a new pipeline\n  async createPipeline(pipelineData) {\n    const response = await apiClient.post(`${this.baseUrl}/pipelines`, pipelineData);\n    return response.data;\n  }\n\n  // Update an existing pipeline\n  async updatePipeline(pipelineId, pipelineData) {\n    const response = await apiClient.put(`${this.baseUrl}/pipelines/${pipelineId}`, pipelineData);\n    return response.data;\n  }\n\n  // Delete a pipeline\n  async deletePipeline(pipelineId) {\n    await apiClient.delete(`${this.baseUrl}/pipelines/${pipelineId}`);\n  }\n\n  // Enable/disable a pipeline\n  async togglePipeline(pipelineId, enabled) {\n    const response = await apiClient.patch(`${this.baseUrl}/pipelines/${pipelineId}/toggle`, {\n      enabled\n    });\n    return response.data;\n  }\n\n  // Trigger a pipeline run manually\n  async triggerPipeline(pipelineId, branch) {\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/trigger`, {\n      branch\n    });\n    return response.data;\n  }\n\n  // Get pipeline runs\n  async getPipelineRuns(pipelineId, page = 1, limit = 20) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs?${params}`);\n    return response.data;\n  }\n\n  // Get a specific pipeline run\n  async getPipelineRun(pipelineId, runId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}`);\n    return response.data;\n  }\n\n  // Cancel a pipeline run\n  async cancelPipelineRun(pipelineId, runId) {\n    await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/cancel`);\n  }\n\n  // Retry a failed pipeline run\n  async retryPipelineRun(pipelineId, runId) {\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/retry`);\n    return response.data;\n  }\n\n  // Get pipeline logs\n  async getPipelineLogs(pipelineId, runId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/logs`);\n    return response.data.logs;\n  }\n\n  // Get pipeline artifacts\n  async getPipelineArtifacts(pipelineId, runId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/artifacts`);\n    return response.data.artifacts;\n  }\n\n  // Download pipeline artifact\n  async downloadArtifact(pipelineId, runId, artifactPath) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/artifacts/download`, {\n      params: {\n        path: artifactPath\n      },\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // Get security scan results for a pipeline run\n  async getSecurityScanResults(pipelineId, runId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/security-scan`);\n    return response.data.results;\n  }\n\n  // Get security scan report\n  async getSecurityScanReport(pipelineId, runId, scanType) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/security-scan/${scanType}/report`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // Get pipelines for a specific project\n  async getProjectPipelines(projectId, page = 1, limit = 20) {\n    const params = new URLSearchParams({\n      project_id: projectId,\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/project/${projectId}?${params}`);\n    return response.data;\n  }\n\n  // Get pipelines for a specific team\n  async getTeamPipelines(teamId, page = 1, limit = 20) {\n    const params = new URLSearchParams({\n      team_id: teamId,\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/team/${teamId}?${params}`);\n    return response.data;\n  }\n\n  // Get CI/CD metrics and statistics\n  async getCICDMetrics(projectId, teamId, dateFrom, dateTo) {\n    const params = new URLSearchParams();\n    if (projectId) params.append('project_id', projectId);\n    if (teamId) params.append('team_id', teamId);\n    if (dateFrom) params.append('date_from', dateFrom);\n    if (dateTo) params.append('date_to', dateTo);\n    const response = await apiClient.get(`${this.baseUrl}/metrics?${params}`);\n    return response.data;\n  }\n\n  // Get failed pipelines\n  async getFailedPipelines(page = 1, limit = 20) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/failed?${params}`);\n    return response.data;\n  }\n\n  // Get pipeline templates\n  async getPipelineTemplates() {\n    const response = await apiClient.get(`${this.baseUrl}/templates`);\n    return response.data;\n  }\n\n  // Create pipeline from template\n  async createFromTemplate(templateId, customizations) {\n    const response = await apiClient.post(`${this.baseUrl}/from-template/${templateId}`, customizations);\n    return response.data;\n  }\n\n  // Validate pipeline configuration\n  async validatePipeline(pipelineData) {\n    const response = await apiClient.post(`${this.baseUrl}/validate`, pipelineData);\n    return response.data;\n  }\n\n  // Test pipeline connection\n  async testPipelineConnection(pipelineData) {\n    const response = await apiClient.post(`${this.baseUrl}/test-connection`, pipelineData);\n    return response.data;\n  }\n\n  // Get webhook configuration\n  async getWebhookConfig(pipelineId) {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/webhook`);\n    return response.data;\n  }\n\n  // Regenerate webhook secret\n  async regenerateWebhookSecret(pipelineId) {\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/webhook/regenerate`);\n    return response.data;\n  }\n\n  // Export pipeline configuration\n  async exportPipelineConfig(pipelineId, format = 'yaml') {\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/export`, {\n      params: {\n        format\n      }\n    });\n    return response.data.config;\n  }\n\n  // Import pipeline configuration\n  async importPipelineConfig(config, format = 'yaml') {\n    const response = await apiClient.post(`${this.baseUrl}/import`, {\n      config,\n      format\n    });\n    return response.data;\n  }\n\n  // Bulk operations\n  async bulkEnablePipelines(pipelineIds) {\n    await apiClient.patch(`${this.baseUrl}/pipelines/bulk-enable`, {\n      pipeline_ids: pipelineIds\n    });\n  }\n  async bulkDisablePipelines(pipelineIds) {\n    await apiClient.patch(`${this.baseUrl}/pipelines/bulk-disable`, {\n      pipeline_ids: pipelineIds\n    });\n  }\n  async bulkDeletePipelines(pipelineIds) {\n    await apiClient.delete(`${this.baseUrl}/pipelines/bulk-delete`, {\n      data: {\n        pipeline_ids: pipelineIds\n      }\n    });\n  }\n}\nexport const cicdService = new CICDService();\nexport default cicdService;","map":{"version":3,"names":["apiClient","PipelineStatus","PipelineTrigger","SecurityScanType","CICDService","constructor","baseUrl","getPipelines","page","limit","filter","params","URLSearchParams","toString","status","trigger","security_scan_type","project_id","team_id","enabled","undefined","created_after","created_before","response","get","data","getPipeline","pipelineId","createPipeline","pipelineData","post","updatePipeline","put","deletePipeline","delete","togglePipeline","patch","triggerPipeline","branch","getPipelineRuns","getPipelineRun","runId","cancelPipelineRun","retryPipelineRun","getPipelineLogs","logs","getPipelineArtifacts","artifacts","downloadArtifact","artifactPath","path","responseType","getSecurityScanResults","results","getSecurityScanReport","scanType","getProjectPipelines","projectId","getTeamPipelines","teamId","getCICDMetrics","dateFrom","dateTo","append","getFailedPipelines","getPipelineTemplates","createFromTemplate","templateId","customizations","validatePipeline","testPipelineConnection","getWebhookConfig","regenerateWebhookSecret","exportPipelineConfig","format","config","importPipelineConfig","bulkEnablePipelines","pipelineIds","pipeline_ids","bulkDisablePipelines","bulkDeletePipelines","cicdService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/cicdService.ts"],"sourcesContent":["import { apiClient } from '../utils/apiClient';\r\n\r\n// Enums for CI/CD\r\nexport enum PipelineStatus {\r\n  PENDING = \"PENDING\",\r\n  RUNNING = \"RUNNING\",\r\n  SUCCESS = \"SUCCESS\",\r\n  FAILED = \"FAILED\",\r\n  CANCELLED = \"CANCELLED\",\r\n  SKIPPED = \"SKIPPED\"\r\n}\r\n\r\nexport enum PipelineTrigger {\r\n  MANUAL = \"MANUAL\",\r\n  SCHEDULED = \"SCHEDULED\",\r\n  WEBHOOK = \"WEBHOOK\",\r\n  PUSH = \"PUSH\",\r\n  PULL_REQUEST = \"PULL_REQUEST\",\r\n  MERGE = \"MERGE\"\r\n}\r\n\r\nexport enum SecurityScanType {\r\n  SAST = \"SAST\",\r\n  DAST = \"DAST\",\r\n  SCA = \"SCA\",\r\n  CONTAINER_SCAN = \"CONTAINER_SCAN\",\r\n  INFRASTRUCTURE_SCAN = \"INFRASTRUCTURE_SCAN\"\r\n}\r\n\r\n// Interfaces\r\nexport interface PipelineBase {\r\n  name: string;\r\n  description?: string;\r\n  repository_url: string;\r\n  branch: string;\r\n  trigger: PipelineTrigger;\r\n  security_scan_types: SecurityScanType[];\r\n  enabled: boolean;\r\n  schedule?: string;\r\n  webhook_url?: string;\r\n}\r\n\r\nexport interface PipelineCreate extends PipelineBase {\r\n  project_id?: string;\r\n  team_id?: string;\r\n  environment_variables?: Record<string, string>;\r\n  secrets?: Record<string, string>;\r\n}\r\n\r\nexport interface PipelineUpdate extends Partial<PipelineBase> {\r\n  id: string;\r\n}\r\n\r\nexport interface PipelineResponse extends PipelineBase {\r\n  id: string;\r\n  project_id?: string;\r\n  team_id?: string;\r\n  environment_variables?: Record<string, string>;\r\n  secrets?: Record<string, string>;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  last_run_at?: string;\r\n  last_run_status?: PipelineStatus;\r\n  total_runs: number;\r\n  success_rate: number;\r\n  average_duration: number;\r\n}\r\n\r\nexport interface PipelineRun {\r\n  id: string;\r\n  pipeline_id: string;\r\n  status: PipelineStatus;\r\n  trigger: PipelineTrigger;\r\n  started_at: string;\r\n  completed_at?: string;\r\n  duration?: number;\r\n  commit_hash?: string;\r\n  commit_message?: string;\r\n  branch: string;\r\n  logs?: string;\r\n  artifacts?: string[];\r\n  security_scan_results?: SecurityScanResult[];\r\n  environment_variables?: Record<string, string>;\r\n}\r\n\r\nexport interface SecurityScanResult {\r\n  scan_type: SecurityScanType;\r\n  status: PipelineStatus;\r\n  vulnerabilities_found: number;\r\n  critical_vulnerabilities: number;\r\n  high_vulnerabilities: number;\r\n  medium_vulnerabilities: number;\r\n  low_vulnerabilities: number;\r\n  scan_duration: number;\r\n  report_url?: string;\r\n  details?: any;\r\n}\r\n\r\nexport interface PipelinesResponse {\r\n  pipelines: PipelineResponse[];\r\n  total: number;\r\n  page: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface PipelineRunsResponse {\r\n  runs: PipelineRun[];\r\n  total: number;\r\n  page: number;\r\n  limit: number;\r\n}\r\n\r\nexport interface PipelineMetrics {\r\n  total_pipelines: number;\r\n  active_pipelines: number;\r\n  total_runs: number;\r\n  successful_runs: number;\r\n  failed_runs: number;\r\n  average_duration: number;\r\n  success_rate: number;\r\n  pipelines_by_status: Record<string, number>;\r\n  runs_by_status: Record<string, number>;\r\n  security_scan_summary: Record<string, number>;\r\n}\r\n\r\nexport interface PipelineFilter {\r\n  status?: PipelineStatus;\r\n  trigger?: PipelineTrigger;\r\n  security_scan_type?: SecurityScanType;\r\n  project_id?: string;\r\n  team_id?: string;\r\n  enabled?: boolean;\r\n  created_after?: string;\r\n  created_before?: string;\r\n}\r\n\r\nclass CICDService {\r\n  private baseUrl = '/api/v1/cicd';\r\n\r\n  // Get all pipelines with pagination and filtering\r\n  async getPipelines(\r\n    page: number = 1,\r\n    limit: number = 20,\r\n    filter?: PipelineFilter\r\n  ): Promise<PipelinesResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString(),\r\n      ...(filter?.status && { status: filter.status }),\r\n      ...(filter?.trigger && { trigger: filter.trigger }),\r\n      ...(filter?.security_scan_type && { security_scan_type: filter.security_scan_type }),\r\n      ...(filter?.project_id && { project_id: filter.project_id }),\r\n      ...(filter?.team_id && { team_id: filter.team_id }),\r\n      ...(filter?.enabled !== undefined && { enabled: filter.enabled.toString() }),\r\n      ...(filter?.created_after && { created_after: filter.created_after }),\r\n      ...(filter?.created_before && { created_before: filter.created_before })\r\n    });\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get a specific pipeline by ID\r\n  async getPipeline(pipelineId: string): Promise<PipelineResponse> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Create a new pipeline\r\n  async createPipeline(pipelineData: PipelineCreate): Promise<PipelineResponse> {\r\n    const response = await apiClient.post(`${this.baseUrl}/pipelines`, pipelineData);\r\n    return response.data;\r\n  }\r\n\r\n  // Update an existing pipeline\r\n  async updatePipeline(pipelineId: string, pipelineData: PipelineUpdate): Promise<PipelineResponse> {\r\n    const response = await apiClient.put(`${this.baseUrl}/pipelines/${pipelineId}`, pipelineData);\r\n    return response.data;\r\n  }\r\n\r\n  // Delete a pipeline\r\n  async deletePipeline(pipelineId: string): Promise<void> {\r\n    await apiClient.delete(`${this.baseUrl}/pipelines/${pipelineId}`);\r\n  }\r\n\r\n  // Enable/disable a pipeline\r\n  async togglePipeline(pipelineId: string, enabled: boolean): Promise<PipelineResponse> {\r\n    const response = await apiClient.patch(`${this.baseUrl}/pipelines/${pipelineId}/toggle`, {\r\n      enabled\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Trigger a pipeline run manually\r\n  async triggerPipeline(pipelineId: string, branch?: string): Promise<PipelineRun> {\r\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/trigger`, {\r\n      branch\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get pipeline runs\r\n  async getPipelineRuns(\r\n    pipelineId: string,\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<PipelineRunsResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString()\r\n    });\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get a specific pipeline run\r\n  async getPipelineRun(pipelineId: string, runId: string): Promise<PipelineRun> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Cancel a pipeline run\r\n  async cancelPipelineRun(pipelineId: string, runId: string): Promise<void> {\r\n    await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/cancel`);\r\n  }\r\n\r\n  // Retry a failed pipeline run\r\n  async retryPipelineRun(pipelineId: string, runId: string): Promise<PipelineRun> {\r\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/retry`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get pipeline logs\r\n  async getPipelineLogs(pipelineId: string, runId: string): Promise<string> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/logs`);\r\n    return response.data.logs;\r\n  }\r\n\r\n  // Get pipeline artifacts\r\n  async getPipelineArtifacts(pipelineId: string, runId: string): Promise<string[]> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/artifacts`);\r\n    return response.data.artifacts;\r\n  }\r\n\r\n  // Download pipeline artifact\r\n  async downloadArtifact(pipelineId: string, runId: string, artifactPath: string): Promise<Blob> {\r\n    const response = await apiClient.get(\r\n      `${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/artifacts/download`,\r\n      {\r\n        params: { path: artifactPath },\r\n        responseType: 'blob'\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Get security scan results for a pipeline run\r\n  async getSecurityScanResults(pipelineId: string, runId: string): Promise<SecurityScanResult[]> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/security-scan`);\r\n    return response.data.results;\r\n  }\r\n\r\n  // Get security scan report\r\n  async getSecurityScanReport(pipelineId: string, runId: string, scanType: SecurityScanType): Promise<Blob> {\r\n    const response = await apiClient.get(\r\n      `${this.baseUrl}/pipelines/${pipelineId}/runs/${runId}/security-scan/${scanType}/report`,\r\n      {\r\n        responseType: 'blob'\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Get pipelines for a specific project\r\n  async getProjectPipelines(\r\n    projectId: string,\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<PipelinesResponse> {\r\n    const params = new URLSearchParams({\r\n      project_id: projectId,\r\n      page: page.toString(),\r\n      limit: limit.toString()\r\n    });\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/project/${projectId}?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get pipelines for a specific team\r\n  async getTeamPipelines(\r\n    teamId: string,\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<PipelinesResponse> {\r\n    const params = new URLSearchParams({\r\n      team_id: teamId,\r\n      page: page.toString(),\r\n      limit: limit.toString()\r\n    });\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/team/${teamId}?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get CI/CD metrics and statistics\r\n  async getCICDMetrics(\r\n    projectId?: string,\r\n    teamId?: string,\r\n    dateFrom?: string,\r\n    dateTo?: string\r\n  ): Promise<PipelineMetrics> {\r\n    const params = new URLSearchParams();\r\n    if (projectId) params.append('project_id', projectId);\r\n    if (teamId) params.append('team_id', teamId);\r\n    if (dateFrom) params.append('date_from', dateFrom);\r\n    if (dateTo) params.append('date_to', dateTo);\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/metrics?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get failed pipelines\r\n  async getFailedPipelines(\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<PipelinesResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString()\r\n    });\r\n\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/failed?${params}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get pipeline templates\r\n  async getPipelineTemplates(): Promise<PipelineBase[]> {\r\n    const response = await apiClient.get(`${this.baseUrl}/templates`);\r\n    return response.data;\r\n  }\r\n\r\n  // Create pipeline from template\r\n  async createFromTemplate(\r\n    templateId: string,\r\n    customizations: Partial<PipelineCreate>\r\n  ): Promise<PipelineResponse> {\r\n    const response = await apiClient.post(`${this.baseUrl}/from-template/${templateId}`, customizations);\r\n    return response.data;\r\n  }\r\n\r\n  // Validate pipeline configuration\r\n  async validatePipeline(pipelineData: PipelineCreate): Promise<{ valid: boolean; errors: string[] }> {\r\n    const response = await apiClient.post(`${this.baseUrl}/validate`, pipelineData);\r\n    return response.data;\r\n  }\r\n\r\n  // Test pipeline connection\r\n  async testPipelineConnection(pipelineData: PipelineCreate): Promise<{ connected: boolean; message: string }> {\r\n    const response = await apiClient.post(`${this.baseUrl}/test-connection`, pipelineData);\r\n    return response.data;\r\n  }\r\n\r\n  // Get webhook configuration\r\n  async getWebhookConfig(pipelineId: string): Promise<{ webhook_url: string; secret: string }> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/webhook`);\r\n    return response.data;\r\n  }\r\n\r\n  // Regenerate webhook secret\r\n  async regenerateWebhookSecret(pipelineId: string): Promise<{ webhook_url: string; secret: string }> {\r\n    const response = await apiClient.post(`${this.baseUrl}/pipelines/${pipelineId}/webhook/regenerate`);\r\n    return response.data;\r\n  }\r\n\r\n  // Export pipeline configuration\r\n  async exportPipelineConfig(pipelineId: string, format: 'yaml' | 'json' = 'yaml'): Promise<string> {\r\n    const response = await apiClient.get(`${this.baseUrl}/pipelines/${pipelineId}/export`, {\r\n      params: { format }\r\n    });\r\n    return response.data.config;\r\n  }\r\n\r\n  // Import pipeline configuration\r\n  async importPipelineConfig(config: string, format: 'yaml' | 'json' = 'yaml'): Promise<PipelineResponse> {\r\n    const response = await apiClient.post(`${this.baseUrl}/import`, {\r\n      config,\r\n      format\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Bulk operations\r\n  async bulkEnablePipelines(pipelineIds: string[]): Promise<void> {\r\n    await apiClient.patch(`${this.baseUrl}/pipelines/bulk-enable`, {\r\n      pipeline_ids: pipelineIds\r\n    });\r\n  }\r\n\r\n  async bulkDisablePipelines(pipelineIds: string[]): Promise<void> {\r\n    await apiClient.patch(`${this.baseUrl}/pipelines/bulk-disable`, {\r\n      pipeline_ids: pipelineIds\r\n    });\r\n  }\r\n\r\n  async bulkDeletePipelines(pipelineIds: string[]): Promise<void> {\r\n    await apiClient.delete(`${this.baseUrl}/pipelines/bulk-delete`, {\r\n      data: { pipeline_ids: pipelineIds }\r\n    });\r\n  }\r\n}\r\n\r\nexport const cicdService = new CICDService();\r\nexport default cicdService;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;;AAE9C;AACA,WAAYC,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAS1B,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAS3B,WAAYC,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;;AAQ5B;;AA4GA,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KACRC,OAAO,GAAG,cAAc;EAAA;EAEhC;EACA,MAAMC,YAAYA,CAChBC,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,EAAE,EAClBC,MAAuB,EACK;IAC5B,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCJ,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;MACrBJ,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAAC,CAAC;MACvB,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,MAAM,KAAI;QAAEA,MAAM,EAAEJ,MAAM,CAACI;MAAO,CAAC,CAAC;MAChD,IAAI,CAAAJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,OAAO,KAAI;QAAEA,OAAO,EAAEL,MAAM,CAACK;MAAQ,CAAC,CAAC;MACnD,IAAI,CAAAL,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,kBAAkB,KAAI;QAAEA,kBAAkB,EAAEN,MAAM,CAACM;MAAmB,CAAC,CAAC;MACpF,IAAI,CAAAN,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEO,UAAU,KAAI;QAAEA,UAAU,EAAEP,MAAM,CAACO;MAAW,CAAC,CAAC;MAC5D,IAAI,CAAAP,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEQ,OAAO,KAAI;QAAEA,OAAO,EAAER,MAAM,CAACQ;MAAQ,CAAC,CAAC;MACnD,IAAI,CAAAR,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAES,OAAO,MAAKC,SAAS,IAAI;QAAED,OAAO,EAAET,MAAM,CAACS,OAAO,CAACN,QAAQ,CAAC;MAAE,CAAC,CAAC;MAC5E,IAAI,CAAAH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEW,aAAa,KAAI;QAAEA,aAAa,EAAEX,MAAM,CAACW;MAAc,CAAC,CAAC;MACrE,IAAI,CAAAX,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEY,cAAc,KAAI;QAAEA,cAAc,EAAEZ,MAAM,CAACY;MAAe,CAAC;IACzE,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcK,MAAM,EAAE,CAAC;IAC3E,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMC,WAAWA,CAACC,UAAkB,EAA6B;IAC/D,MAAMJ,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,EAAE,CAAC;IAC/E,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMG,cAAcA,CAACC,YAA4B,EAA6B;IAC5E,MAAMN,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,YAAY,EAAEuB,YAAY,CAAC;IAChF,OAAON,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMM,cAAcA,CAACJ,UAAkB,EAAEE,YAA4B,EAA6B;IAChG,MAAMN,QAAQ,GAAG,MAAMvB,SAAS,CAACgC,GAAG,CAAC,GAAG,IAAI,CAAC1B,OAAO,cAAcqB,UAAU,EAAE,EAAEE,YAAY,CAAC;IAC7F,OAAON,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMQ,cAAcA,CAACN,UAAkB,EAAiB;IACtD,MAAM3B,SAAS,CAACkC,MAAM,CAAC,GAAG,IAAI,CAAC5B,OAAO,cAAcqB,UAAU,EAAE,CAAC;EACnE;;EAEA;EACA,MAAMQ,cAAcA,CAACR,UAAkB,EAAER,OAAgB,EAA6B;IACpF,MAAMI,QAAQ,GAAG,MAAMvB,SAAS,CAACoC,KAAK,CAAC,GAAG,IAAI,CAAC9B,OAAO,cAAcqB,UAAU,SAAS,EAAE;MACvFR;IACF,CAAC,CAAC;IACF,OAAOI,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMY,eAAeA,CAACV,UAAkB,EAAEW,MAAe,EAAwB;IAC/E,MAAMf,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,cAAcqB,UAAU,UAAU,EAAE;MACvFW;IACF,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMc,eAAeA,CACnBZ,UAAkB,EAClBnB,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,EAAE,EACa;IAC/B,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCJ,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;MACrBJ,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMU,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAAShB,MAAM,EAAE,CAAC;IAC9F,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMe,cAAcA,CAACb,UAAkB,EAAEc,KAAa,EAAwB;IAC5E,MAAMlB,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,EAAE,CAAC;IAC7F,OAAOlB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMiB,iBAAiBA,CAACf,UAAkB,EAAEc,KAAa,EAAiB;IACxE,MAAMzC,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,cAAcqB,UAAU,SAASc,KAAK,SAAS,CAAC;EACtF;;EAEA;EACA,MAAME,gBAAgBA,CAAChB,UAAkB,EAAEc,KAAa,EAAwB;IAC9E,MAAMlB,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,cAAcqB,UAAU,SAASc,KAAK,QAAQ,CAAC;IACpG,OAAOlB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMmB,eAAeA,CAACjB,UAAkB,EAAEc,KAAa,EAAmB;IACxE,MAAMlB,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,OAAO,CAAC;IAClG,OAAOlB,QAAQ,CAACE,IAAI,CAACoB,IAAI;EAC3B;;EAEA;EACA,MAAMC,oBAAoBA,CAACnB,UAAkB,EAAEc,KAAa,EAAqB;IAC/E,MAAMlB,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,YAAY,CAAC;IACvG,OAAOlB,QAAQ,CAACE,IAAI,CAACsB,SAAS;EAChC;;EAEA;EACA,MAAMC,gBAAgBA,CAACrB,UAAkB,EAAEc,KAAa,EAAEQ,YAAoB,EAAiB;IAC7F,MAAM1B,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAClC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,qBAAqB,EAC1E;MACE9B,MAAM,EAAE;QAAEuC,IAAI,EAAED;MAAa,CAAC;MAC9BE,YAAY,EAAE;IAChB,CACF,CAAC;IACD,OAAO5B,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM2B,sBAAsBA,CAACzB,UAAkB,EAAEc,KAAa,EAAiC;IAC7F,MAAMlB,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,gBAAgB,CAAC;IAC3G,OAAOlB,QAAQ,CAACE,IAAI,CAAC4B,OAAO;EAC9B;;EAEA;EACA,MAAMC,qBAAqBA,CAAC3B,UAAkB,EAAEc,KAAa,EAAEc,QAA0B,EAAiB;IACxG,MAAMhC,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAClC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAASc,KAAK,kBAAkBc,QAAQ,SAAS,EACxF;MACEJ,YAAY,EAAE;IAChB,CACF,CAAC;IACD,OAAO5B,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM+B,mBAAmBA,CACvBC,SAAiB,EACjBjD,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,EAAE,EACU;IAC5B,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCK,UAAU,EAAEwC,SAAS;MACrBjD,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;MACrBJ,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMU,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,sBAAsBmD,SAAS,IAAI9C,MAAM,EAAE,CAAC;IAChG,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMiC,gBAAgBA,CACpBC,MAAc,EACdnD,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,EAAE,EACU;IAC5B,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCM,OAAO,EAAEyC,MAAM;MACfnD,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;MACrBJ,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMU,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,mBAAmBqD,MAAM,IAAIhD,MAAM,EAAE,CAAC;IAC1F,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMmC,cAAcA,CAClBH,SAAkB,EAClBE,MAAe,EACfE,QAAiB,EACjBC,MAAe,EACW;IAC1B,MAAMnD,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAI6C,SAAS,EAAE9C,MAAM,CAACoD,MAAM,CAAC,YAAY,EAAEN,SAAS,CAAC;IACrD,IAAIE,MAAM,EAAEhD,MAAM,CAACoD,MAAM,CAAC,SAAS,EAAEJ,MAAM,CAAC;IAC5C,IAAIE,QAAQ,EAAElD,MAAM,CAACoD,MAAM,CAAC,WAAW,EAAEF,QAAQ,CAAC;IAClD,IAAIC,MAAM,EAAEnD,MAAM,CAACoD,MAAM,CAAC,SAAS,EAAED,MAAM,CAAC;IAE5C,MAAMvC,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,YAAYK,MAAM,EAAE,CAAC;IACzE,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMuC,kBAAkBA,CACtBxD,IAAY,GAAG,CAAC,EAChBC,KAAa,GAAG,EAAE,EACU;IAC5B,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCJ,IAAI,EAAEA,IAAI,CAACK,QAAQ,CAAC,CAAC;MACrBJ,KAAK,EAAEA,KAAK,CAACI,QAAQ,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMU,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,qBAAqBK,MAAM,EAAE,CAAC;IAClF,OAAOY,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMwC,oBAAoBA,CAAA,EAA4B;IACpD,MAAM1C,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,YAAY,CAAC;IACjE,OAAOiB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMyC,kBAAkBA,CACtBC,UAAkB,EAClBC,cAAuC,EACZ;IAC3B,MAAM7C,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,kBAAkB6D,UAAU,EAAE,EAAEC,cAAc,CAAC;IACpG,OAAO7C,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM4C,gBAAgBA,CAACxC,YAA4B,EAAiD;IAClG,MAAMN,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,WAAW,EAAEuB,YAAY,CAAC;IAC/E,OAAON,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM6C,sBAAsBA,CAACzC,YAA4B,EAAoD;IAC3G,MAAMN,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,kBAAkB,EAAEuB,YAAY,CAAC;IACtF,OAAON,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM8C,gBAAgBA,CAAC5C,UAAkB,EAAoD;IAC3F,MAAMJ,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,UAAU,CAAC;IACvF,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAM+C,uBAAuBA,CAAC7C,UAAkB,EAAoD;IAClG,MAAMJ,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,cAAcqB,UAAU,qBAAqB,CAAC;IACnG,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMgD,oBAAoBA,CAAC9C,UAAkB,EAAE+C,MAAuB,GAAG,MAAM,EAAmB;IAChG,MAAMnD,QAAQ,GAAG,MAAMvB,SAAS,CAACwB,GAAG,CAAC,GAAG,IAAI,CAAClB,OAAO,cAAcqB,UAAU,SAAS,EAAE;MACrFhB,MAAM,EAAE;QAAE+D;MAAO;IACnB,CAAC,CAAC;IACF,OAAOnD,QAAQ,CAACE,IAAI,CAACkD,MAAM;EAC7B;;EAEA;EACA,MAAMC,oBAAoBA,CAACD,MAAc,EAAED,MAAuB,GAAG,MAAM,EAA6B;IACtG,MAAMnD,QAAQ,GAAG,MAAMvB,SAAS,CAAC8B,IAAI,CAAC,GAAG,IAAI,CAACxB,OAAO,SAAS,EAAE;MAC9DqE,MAAM;MACND;IACF,CAAC,CAAC;IACF,OAAOnD,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMoD,mBAAmBA,CAACC,WAAqB,EAAiB;IAC9D,MAAM9E,SAAS,CAACoC,KAAK,CAAC,GAAG,IAAI,CAAC9B,OAAO,wBAAwB,EAAE;MAC7DyE,YAAY,EAAED;IAChB,CAAC,CAAC;EACJ;EAEA,MAAME,oBAAoBA,CAACF,WAAqB,EAAiB;IAC/D,MAAM9E,SAAS,CAACoC,KAAK,CAAC,GAAG,IAAI,CAAC9B,OAAO,yBAAyB,EAAE;MAC9DyE,YAAY,EAAED;IAChB,CAAC,CAAC;EACJ;EAEA,MAAMG,mBAAmBA,CAACH,WAAqB,EAAiB;IAC9D,MAAM9E,SAAS,CAACkC,MAAM,CAAC,GAAG,IAAI,CAAC5B,OAAO,wBAAwB,EAAE;MAC9DmB,IAAI,EAAE;QAAEsD,YAAY,EAAED;MAAY;IACpC,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMI,WAAW,GAAG,IAAI9E,WAAW,CAAC,CAAC;AAC5C,eAAe8E,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}