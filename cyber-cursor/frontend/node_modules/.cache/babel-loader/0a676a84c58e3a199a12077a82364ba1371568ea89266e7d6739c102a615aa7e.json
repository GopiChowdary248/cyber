{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{useNavigate}from'react-router-dom';import toast from'react-hot-toast';import{apiClient}from'../utils/apiClient';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const navigate=useNavigate();const API_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const fetchUserProfile=useCallback(async()=>{try{const token=localStorage.getItem('access_token');if(!token){setUser(null);setLoading(false);return;}const response=await apiClient.get('/auth/profile');if(response.data){setUser(response.data);}}catch(error){console.error('Error fetching user profile:',error);localStorage.removeItem('access_token');setUser(null);}finally{setLoading(false);}},[]);// Check if user is already authenticated on app load\nuseEffect(()=>{const token=localStorage.getItem('access_token');if(token){fetchUserProfile();}else{setLoading(false);}},[fetchUserProfile]);const login=async(email,password)=>{try{setLoading(true);setError(null);const response=await fetch(\"\".concat(API_URL,\"/api/v1/auth/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:email,password})});if(response.ok){const userData=await response.json();// Store the access token\nif(userData.access_token){localStorage.setItem('access_token',userData.access_token);}// Set user data\nsetUser({id:userData.user_id,email:userData.email,username:userData.email.split('@')[0],role:userData.role,is_active:true,created_at:new Date().toISOString()});setError(null);// Navigate to dashboard after successful login\nnavigate('/dashboard');}else{const errorData=await response.json();setError(errorData.detail||'Login failed');throw new Error(errorData.detail||'Login failed');}}catch(error){setError('Network error occurred');throw error;}finally{setLoading(false);}};const register=async userData=>{try{setLoading(true);const response=await fetch(\"\".concat(API_URL,\"/api/v1/auth/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'Registration failed');}toast.success('Registration successful! Please log in.');navigate('/login');}catch(error){console.error('Registration error:',error);toast.error(error instanceof Error?error.message:'Registration failed');throw error;}finally{setLoading(false);}};const logout=()=>{localStorage.removeItem('access_token');setUser(null);toast.success('Logged out successfully');navigate('/login');};const updateProfile=async data=>{try{const token=localStorage.getItem('access_token');if(!token){throw new Error('No authentication token');}const response=await fetch(\"\".concat(API_URL,\"/api/v1/users/me\"),{method:'PUT',headers:{'Authorization':\"Bearer \".concat(token),'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'Profile update failed');}const updatedUser=await response.json();setUser(updatedUser);toast.success('Profile updated successfully!');}catch(error){console.error('Profile update error:',error);toast.error(error instanceof Error?error.message:'Profile update failed');throw error;}};const value={user,isAuthenticated:!!user,loading,login,logout,register,updateProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useNavigate","toast","apiClient","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","navigate","API_URL","process","env","REACT_APP_API_URL","fetchUserProfile","token","localStorage","getItem","response","get","data","console","removeItem","login","email","password","fetch","concat","method","headers","body","JSON","stringify","username","ok","userData","json","access_token","setItem","id","user_id","split","role","is_active","created_at","Date","toISOString","errorData","detail","register","success","message","logout","updateProfile","updatedUser","value","isAuthenticated","Provider"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { apiClient } from '../utils/apiClient';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  username: string;\r\n  full_name?: string;\r\n  role: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  updateProfile: (data: Partial<User>) => Promise<void>;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirm_password: string;\r\n  full_name?: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  const fetchUserProfile = useCallback(async () => {\r\n    try {\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        setUser(null);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const response = await apiClient.get('/auth/profile');\r\n      if (response.data) {\r\n        setUser(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      localStorage.removeItem('access_token');\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Check if user is already authenticated on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      fetchUserProfile();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchUserProfile]);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_URL}/api/v1/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username: email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        \r\n        // Store the access token\r\n        if (userData.access_token) {\r\n          localStorage.setItem('access_token', userData.access_token);\r\n        }\r\n        \r\n        // Set user data\r\n        setUser({\r\n          id: userData.user_id,\r\n          email: userData.email,\r\n          username: userData.email.split('@')[0],\r\n          role: userData.role,\r\n          is_active: true,\r\n          created_at: new Date().toISOString()\r\n        });\r\n        \r\n        setError(null);\r\n        \r\n        // Navigate to dashboard after successful login\r\n        navigate('/dashboard');\r\n      } else {\r\n        const errorData = await response.json();\r\n        setError(errorData.detail || 'Login failed');\r\n        throw new Error(errorData.detail || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      setError('Network error occurred');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`${API_URL}/api/v1/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Registration failed');\r\n      }\r\n\r\n      toast.success('Registration successful! Please log in.');\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      toast.error(error instanceof Error ? error.message : 'Registration failed');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('access_token');\r\n    setUser(null);\r\n    toast.success('Logged out successfully');\r\n    navigate('/login');\r\n  };\r\n\r\n  const updateProfile = async (data: Partial<User>) => {\r\n    try {\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        throw new Error('No authentication token');\r\n      }\r\n\r\n      const response = await fetch(`${API_URL}/api/v1/users/me`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Profile update failed');\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      setUser(updatedUser);\r\n      toast.success('Profile updated successfully!');\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      toast.error(error instanceof Error ? error.message : 'Profile update failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}