{"ast":null,"code":"var _jsxFileName = \"D:\\\\curser\\\\copy-of-git-10-082025\\\\cyber-cursor\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { apiClient } from '../utils/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const fetchUserProfile = useCallback(async () => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (!token) {\n        setUser(null);\n        setLoading(false);\n        return;\n      }\n      const response = await apiClient.get('/auth/profile');\n      if (response.data) {\n        setUser(response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      localStorage.removeItem('access_token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Check if user is already authenticated on app load\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchUserProfile]);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/v1/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: email,\n          password\n        })\n      });\n      if (response.ok) {\n        const userData = await response.json();\n\n        // Store the access token\n        if (userData.access_token) {\n          localStorage.setItem('access_token', userData.access_token);\n        }\n\n        // Set user data\n        setUser({\n          id: userData.user_id,\n          email: userData.email,\n          username: userData.email.split('@')[0],\n          role: userData.role,\n          is_active: true,\n          created_at: new Date().toISOString()\n        });\n        setError(null);\n\n        // Navigate to dashboard after successful login\n        navigate('/dashboard');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.detail || 'Login failed');\n        throw new Error(errorData.detail || 'Login failed');\n      }\n    } catch (error) {\n      setError('Network error occurred');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}/api/v1/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Registration failed');\n      }\n      toast.success('Registration successful! Please log in.');\n      navigate('/login');\n    } catch (error) {\n      console.error('Registration error:', error);\n      toast.error(error instanceof Error ? error.message : 'Registration failed');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    setUser(null);\n    toast.success('Logged out successfully');\n    navigate('/login');\n  };\n  const updateProfile = async data => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (!token) {\n        throw new Error('No authentication token');\n      }\n      const response = await fetch(`${API_URL}/api/v1/users/me`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Profile update failed');\n      }\n      const updatedUser = await response.json();\n      setUser(updatedUser);\n      toast.success('Profile updated successfully!');\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast.error(error instanceof Error ? error.message : 'Profile update failed');\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    loading,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"VvzVbh1yEeo4YF2OAogPQshIZf4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useNavigate","toast","apiClient","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","navigate","API_URL","process","env","REACT_APP_API_URL","fetchUserProfile","token","localStorage","getItem","response","get","data","console","removeItem","login","email","password","fetch","method","headers","body","JSON","stringify","username","ok","userData","json","access_token","setItem","id","user_id","split","role","is_active","created_at","Date","toISOString","errorData","detail","register","success","message","logout","updateProfile","updatedUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { apiClient } from '../utils/apiClient';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  username: string;\r\n  full_name?: string;\r\n  role: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  updateProfile: (data: Partial<User>) => Promise<void>;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirm_password: string;\r\n  full_name?: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const navigate = useNavigate();\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\n  const fetchUserProfile = useCallback(async () => {\r\n    try {\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        setUser(null);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const response = await apiClient.get('/auth/profile');\r\n      if (response.data) {\r\n        setUser(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      localStorage.removeItem('access_token');\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Check if user is already authenticated on app load\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      fetchUserProfile();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchUserProfile]);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_URL}/api/v1/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username: email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        \r\n        // Store the access token\r\n        if (userData.access_token) {\r\n          localStorage.setItem('access_token', userData.access_token);\r\n        }\r\n        \r\n        // Set user data\r\n        setUser({\r\n          id: userData.user_id,\r\n          email: userData.email,\r\n          username: userData.email.split('@')[0],\r\n          role: userData.role,\r\n          is_active: true,\r\n          created_at: new Date().toISOString()\r\n        });\r\n        \r\n        setError(null);\r\n        \r\n        // Navigate to dashboard after successful login\r\n        navigate('/dashboard');\r\n      } else {\r\n        const errorData = await response.json();\r\n        setError(errorData.detail || 'Login failed');\r\n        throw new Error(errorData.detail || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      setError('Network error occurred');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`${API_URL}/api/v1/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Registration failed');\r\n      }\r\n\r\n      toast.success('Registration successful! Please log in.');\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      toast.error(error instanceof Error ? error.message : 'Registration failed');\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('access_token');\r\n    setUser(null);\r\n    toast.success('Logged out successfully');\r\n    navigate('/login');\r\n  };\r\n\r\n  const updateProfile = async (data: Partial<User>) => {\r\n    try {\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        throw new Error('No authentication token');\r\n      }\r\n\r\n      const response = await fetch(`${API_URL}/api/v1/users/me`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Profile update failed');\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      setUser(updatedUser);\r\n      toast.success('Profile updated successfully!');\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      toast.error(error instanceof Error ? error.message : 'Profile update failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    register,\r\n    updateProfile,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}