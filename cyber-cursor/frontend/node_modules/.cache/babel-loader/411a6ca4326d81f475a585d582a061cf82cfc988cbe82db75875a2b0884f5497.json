{"ast":null,"code":"import _objectSpread from\"D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{serviceRegistry,apiCallWithRetry}from'./serviceRegistry';import{API_ENDPOINTS}from'./comprehensiveIntegrationService';class RASTService{/**\r\n   * Get RAST overview data\r\n   */async getOverview(){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(API_ENDPOINTS.RAST.OVERVIEW));return response;}catch(error){console.error('Failed to fetch RAST overview:',error);// Return mock data for development\nreturn{total_projects:12,total_scans:156,last_scan:new Date().toISOString(),active_scans:3,protection_enabled_projects:8,runtime_events_today:45,attacks_blocked_today:12};}}/**\r\n   * Get all RAST projects\r\n   */async getProjects(){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(API_ENDPOINTS.RAST.PROJECTS));return response;}catch(error){console.error('Failed to fetch RAST projects:',error);// Return mock data for development\nreturn[{id:1,name:'E-commerce Platform',description:'Main e-commerce application with payment processing',target_url:'https://example-store.com',status:'active',owner_id:1,created_at:'2024-01-15T10:00:00Z',updated_at:'2024-01-20T14:30:00Z',protection_enabled:true,runtime_monitoring:true},{id:2,name:'Admin Dashboard',description:'Internal administration interface',target_url:'https://admin.example.com',status:'active',owner_id:1,created_at:'2024-01-10T09:00:00Z',updated_at:'2024-01-18T16:45:00Z',protection_enabled:true,runtime_monitoring:false}];}}/**\r\n   * Create a new RAST project\r\n   */async createProject(projectData){try{const response=await apiCallWithRetry(()=>serviceRegistry.post(API_ENDPOINTS.RAST.PROJECTS,projectData));return response;}catch(error){console.error('Failed to create RAST project:',error);throw error;}}/**\r\n   * Get a specific RAST project\r\n   */async getProject(id){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(API_ENDPOINTS.RAST.PROJECT(id.toString())));return response;}catch(error){console.error(\"Failed to fetch RAST project \".concat(id,\":\"),error);throw error;}}/**\r\n   * Update a RAST project\r\n   */async updateProject(id,projectData){try{const response=await apiCallWithRetry(()=>serviceRegistry.put(API_ENDPOINTS.RAST.PROJECT(id.toString()),projectData));return response;}catch(error){console.error(\"Failed to update RAST project \".concat(id,\":\"),error);throw error;}}/**\r\n   * Delete a RAST project\r\n   */async deleteProject(id){try{await apiCallWithRetry(()=>serviceRegistry.delete(API_ENDPOINTS.RAST.PROJECT(id.toString())));}catch(error){console.error(\"Failed to delete RAST project \".concat(id,\":\"),error);throw error;}}/**\r\n   * Get RAST scans for a project\r\n   */async getScans(projectId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.SCANS,\"?project_id=\").concat(projectId)));return response;}catch(error){console.error(\"Failed to fetch RAST scans for project \".concat(projectId,\":\"),error);// Return mock data for development\nreturn[{id:1,project_id:projectId,status:'completed',started_at:'2024-01-20T10:00:00Z',completed_at:'2024-01-20T12:30:00Z',findings_count:8,severity_distribution:{critical:1,high:2,medium:3,low:2},scan_config:{scan_type:'comprehensive',max_duration:7200,threads:10}}];}}/**\r\n   * Get RAST vulnerabilities for a project\r\n   */async getVulnerabilities(projectId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.VULNERABILITIES,\"?project_id=\").concat(projectId)));return response;}catch(error){console.error(\"Failed to fetch RAST vulnerabilities for project \".concat(projectId,\":\"),error);// Return mock data for development\nreturn[{id:1,scan_id:1,project_id:projectId,severity:'high',title:'SQL Injection Vulnerability',description:'Potential SQL injection in login form',cwe_id:'CWE-89',url:'/login',parameter:'username',status:'open',created_at:'2024-01-20T12:30:00Z',runtime_context:'Login endpoint'}];}}/**\r\n   * Get RAST events for a project\r\n   */async getEvents(projectId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.EVENTS,\"?project_id=\").concat(projectId)));return response;}catch(error){console.error(\"Failed to fetch RAST events for project \".concat(projectId,\":\"),error);// Return mock data for development\nreturn[{id:1,project_id:projectId,event_type:'attack_detected',severity:'high',description:'SQL injection attempt detected',timestamp:'2024-01-20T15:30:00Z',source_ip:'192.168.1.100',user_agent:'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',request_data:{url:'/login',method:'POST'}}];}}/**\r\n   * Get RAST actions for a project\r\n   */async getActions(projectId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.ACTIONS,\"?project_id=\").concat(projectId)));return response;}catch(error){console.error(\"Failed to fetch RAST actions for project \".concat(projectId,\":\"),error);// Return mock data for development\nreturn[{id:1,project_id:projectId,action_type:'block_request',description:'Blocked SQL injection attempt',timestamp:'2024-01-20T15:30:00Z',target_ip:'192.168.1.100',action_data:{reason:'SQL injection pattern detected'}}];}}/**\r\n   * Get protection status for a project\r\n   */async getProtectionStatus(projectId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.PROTECTION_STATUS,\"?project_id=\").concat(projectId)));return response;}catch(error){console.error(\"Failed to fetch protection status for project \".concat(projectId,\":\"),error);// Return mock data for development\nreturn{project_id:projectId,protection_enabled:true,runtime_monitoring:true,last_attack:'2024-01-20T15:30:00Z',attacks_blocked:15,vulnerabilities_protected:8,active_rules:25,agent_status:'online'};}}/**\r\n   * Start a new RAST scan\r\n   */async startScan(projectId,scanConfig){try{const response=await apiCallWithRetry(()=>serviceRegistry.post(API_ENDPOINTS.RAST.SCANS,_objectSpread({project_id:projectId},scanConfig)));return response;}catch(error){console.error(\"Failed to start RAST scan for project \".concat(projectId,\":\"),error);throw error;}}/**\r\n   * Get scan status\r\n   */async getScanStatus(scanId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(API_ENDPOINTS.RAST.SCAN(scanId.toString())));return response;}catch(error){console.error(\"Failed to fetch scan status for scan \".concat(scanId,\":\"),error);throw error;}}/**\r\n   * Stop a running scan\r\n   */async stopScan(scanId){try{await apiCallWithRetry(()=>serviceRegistry.patch(API_ENDPOINTS.RAST.SCAN(scanId.toString()),{status:'stopped'}));}catch(error){console.error(\"Failed to stop scan \".concat(scanId,\":\"),error);throw error;}}/**\r\n   * Get scan report\r\n   */async getScanReport(scanId){try{const response=await apiCallWithRetry(()=>serviceRegistry.get(\"\".concat(API_ENDPOINTS.RAST.SCANS,\"/\").concat(scanId,\"/report\")));return response;}catch(error){console.error(\"Failed to fetch report for scan \".concat(scanId,\":\"),error);throw error;}}/**\r\n   * Enable/disable protection for a project\r\n   */async toggleProtection(projectId,enabled){try{await apiCallWithRetry(()=>serviceRegistry.patch(API_ENDPOINTS.RAST.PROJECT(projectId.toString()),{protection_enabled:enabled}));}catch(error){console.error(\"Failed to toggle protection for project \".concat(projectId,\":\"),error);throw error;}}/**\r\n   * Update protection rules\r\n   */async updateProtectionRules(projectId,rules){try{await apiCallWithRetry(()=>serviceRegistry.put(\"\".concat(API_ENDPOINTS.RAST.PROJECT(projectId.toString()),\"/protection-rules\"),rules));}catch(error){console.error(\"Failed to update protection rules for project \".concat(projectId,\":\"),error);throw error;}}}// Export singleton instance\nexport const rastService=new RASTService();export default rastService;","map":{"version":3,"names":["serviceRegistry","apiCallWithRetry","API_ENDPOINTS","RASTService","getOverview","response","get","RAST","OVERVIEW","error","console","total_projects","total_scans","last_scan","Date","toISOString","active_scans","protection_enabled_projects","runtime_events_today","attacks_blocked_today","getProjects","PROJECTS","id","name","description","target_url","status","owner_id","created_at","updated_at","protection_enabled","runtime_monitoring","createProject","projectData","post","getProject","PROJECT","toString","concat","updateProject","put","deleteProject","delete","getScans","projectId","SCANS","project_id","started_at","completed_at","findings_count","severity_distribution","critical","high","medium","low","scan_config","scan_type","max_duration","threads","getVulnerabilities","VULNERABILITIES","scan_id","severity","title","cwe_id","url","parameter","runtime_context","getEvents","EVENTS","event_type","timestamp","source_ip","user_agent","request_data","method","getActions","ACTIONS","action_type","target_ip","action_data","reason","getProtectionStatus","PROTECTION_STATUS","last_attack","attacks_blocked","vulnerabilities_protected","active_rules","agent_status","startScan","scanConfig","_objectSpread","getScanStatus","scanId","SCAN","stopScan","patch","getScanReport","toggleProtection","enabled","updateProtectionRules","rules","rastService"],"sources":["D:/curser/copy-of-git-10-082025/cyber-cursor/frontend/src/services/rastService.ts"],"sourcesContent":["import { serviceRegistry, apiCallWithRetry } from './serviceRegistry';\r\nimport { API_ENDPOINTS } from './comprehensiveIntegrationService';\r\n\r\nexport interface RASTProject {\r\n  id: number;\r\n  name: string;\r\n  description?: string;\r\n  target_url: string;\r\n  status: string;\r\n  owner_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  protection_enabled: boolean;\r\n  runtime_monitoring: boolean;\r\n}\r\n\r\nexport interface RASTScan {\r\n  id: number;\r\n  project_id: number;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  started_at: string;\r\n  completed_at?: string;\r\n  findings_count: number;\r\n  severity_distribution: {\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  scan_config: {\r\n    scan_type: string;\r\n    max_duration: number;\r\n    threads: number;\r\n  };\r\n}\r\n\r\nexport interface RASTVulnerability {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  title: string;\r\n  description: string;\r\n  cwe_id?: string;\r\n  cve_id?: string;\r\n  url: string;\r\n  parameter?: string;\r\n  payload?: string;\r\n  status: 'open' | 'fixed' | 'false_positive';\r\n  created_at: string;\r\n  runtime_context?: string;\r\n}\r\n\r\nexport interface RASTEvent {\r\n  id: number;\r\n  project_id: number;\r\n  event_type: 'attack_detected' | 'vulnerability_exploited' | 'anomaly_detected' | 'protection_triggered';\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n  description: string;\r\n  timestamp: string;\r\n  source_ip?: string;\r\n  user_agent?: string;\r\n  request_data?: any;\r\n  response_data?: any;\r\n}\r\n\r\nexport interface RASTAction {\r\n  id: number;\r\n  project_id: number;\r\n  action_type: 'block_request' | 'log_event' | 'redirect' | 'custom_response';\r\n  description: string;\r\n  timestamp: string;\r\n  target_ip?: string;\r\n  target_url?: string;\r\n  action_data?: any;\r\n}\r\n\r\nexport interface RASTProtectionStatus {\r\n  project_id: number;\r\n  protection_enabled: boolean;\r\n  runtime_monitoring: boolean;\r\n  last_attack: string;\r\n  attacks_blocked: number;\r\n  vulnerabilities_protected: number;\r\n  active_rules: number;\r\n  agent_status: 'online' | 'offline' | 'error';\r\n}\r\n\r\nexport interface RASTReport {\r\n  id: number;\r\n  scan_id: number;\r\n  project_id: number;\r\n  generated_at: string;\r\n  summary: {\r\n    total_vulnerabilities: number;\r\n    critical_count: number;\r\n    high_count: number;\r\n    medium_count: number;\r\n    low_count: number;\r\n    runtime_events: number;\r\n    protection_actions: number;\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface RASTOverview {\r\n  total_projects: number;\r\n  total_scans: number;\r\n  last_scan: string;\r\n  active_scans: number;\r\n  protection_enabled_projects: number;\r\n  runtime_events_today: number;\r\n  attacks_blocked_today: number;\r\n}\r\n\r\nclass RASTService {\r\n  /**\r\n   * Get RAST overview data\r\n   */\r\n  async getOverview(): Promise<RASTOverview> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.OVERVIEW)\r\n      );\r\n      return response as RASTOverview;\r\n    } catch (error) {\r\n      console.error('Failed to fetch RAST overview:', error);\r\n      // Return mock data for development\r\n      return {\r\n        total_projects: 12,\r\n        total_scans: 156,\r\n        last_scan: new Date().toISOString(),\r\n        active_scans: 3,\r\n        protection_enabled_projects: 8,\r\n        runtime_events_today: 45,\r\n        attacks_blocked_today: 12\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all RAST projects\r\n   */\r\n  async getProjects(): Promise<RASTProject[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.PROJECTS)\r\n      );\r\n      return response as RASTProject[];\r\n    } catch (error) {\r\n      console.error('Failed to fetch RAST projects:', error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          name: 'E-commerce Platform',\r\n          description: 'Main e-commerce application with payment processing',\r\n          target_url: 'https://example-store.com',\r\n          status: 'active',\r\n          owner_id: 1,\r\n          created_at: '2024-01-15T10:00:00Z',\r\n          updated_at: '2024-01-20T14:30:00Z',\r\n          protection_enabled: true,\r\n          runtime_monitoring: true\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Admin Dashboard',\r\n          description: 'Internal administration interface',\r\n          target_url: 'https://admin.example.com',\r\n          status: 'active',\r\n          owner_id: 1,\r\n          created_at: '2024-01-10T09:00:00Z',\r\n          updated_at: '2024-01-18T16:45:00Z',\r\n          protection_enabled: true,\r\n          runtime_monitoring: false\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a new RAST project\r\n   */\r\n  async createProject(projectData: Partial<RASTProject>): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.post(API_ENDPOINTS.RAST.PROJECTS, projectData)\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error('Failed to create RAST project:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific RAST project\r\n   */\r\n  async getProject(id: number): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.PROJECT(id.toString()))\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update a RAST project\r\n   */\r\n  async updateProject(id: number, projectData: Partial<RASTProject>): Promise<RASTProject> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.put(API_ENDPOINTS.RAST.PROJECT(id.toString()), projectData)\r\n      );\r\n      return response as RASTProject;\r\n    } catch (error) {\r\n      console.error(`Failed to update RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a RAST project\r\n   */\r\n  async deleteProject(id: number): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.delete(API_ENDPOINTS.RAST.PROJECT(id.toString()))\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to delete RAST project ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST scans for a project\r\n   */\r\n  async getScans(projectId: number): Promise<RASTScan[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTScan[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST scans for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          status: 'completed',\r\n          started_at: '2024-01-20T10:00:00Z',\r\n          completed_at: '2024-01-20T12:30:00Z',\r\n          findings_count: 8,\r\n          severity_distribution: {\r\n            critical: 1,\r\n            high: 2,\r\n            medium: 3,\r\n            low: 2\r\n          },\r\n          scan_config: {\r\n            scan_type: 'comprehensive',\r\n            max_duration: 7200,\r\n            threads: 10\r\n          }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST vulnerabilities for a project\r\n   */\r\n  async getVulnerabilities(projectId: number): Promise<RASTVulnerability[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.VULNERABILITIES}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTVulnerability[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST vulnerabilities for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          scan_id: 1,\r\n          project_id: projectId,\r\n          severity: 'high',\r\n          title: 'SQL Injection Vulnerability',\r\n          description: 'Potential SQL injection in login form',\r\n          cwe_id: 'CWE-89',\r\n          url: '/login',\r\n          parameter: 'username',\r\n          status: 'open',\r\n          created_at: '2024-01-20T12:30:00Z',\r\n          runtime_context: 'Login endpoint'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST events for a project\r\n   */\r\n  async getEvents(projectId: number): Promise<RASTEvent[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.EVENTS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTEvent[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST events for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          event_type: 'attack_detected',\r\n          severity: 'high',\r\n          description: 'SQL injection attempt detected',\r\n          timestamp: '2024-01-20T15:30:00Z',\r\n          source_ip: '192.168.1.100',\r\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\r\n          request_data: { url: '/login', method: 'POST' }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get RAST actions for a project\r\n   */\r\n  async getActions(projectId: number): Promise<RASTAction[]> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.ACTIONS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTAction[];\r\n    } catch (error) {\r\n      console.error(`Failed to fetch RAST actions for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return [\r\n        {\r\n          id: 1,\r\n          project_id: projectId,\r\n          action_type: 'block_request',\r\n          description: 'Blocked SQL injection attempt',\r\n          timestamp: '2024-01-20T15:30:00Z',\r\n          target_ip: '192.168.1.100',\r\n          action_data: { reason: 'SQL injection pattern detected' }\r\n        }\r\n      ];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get protection status for a project\r\n   */\r\n  async getProtectionStatus(projectId: number): Promise<RASTProtectionStatus> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.PROTECTION_STATUS}?project_id=${projectId}`)\r\n      );\r\n      return response as RASTProtectionStatus;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch protection status for project ${projectId}:`, error);\r\n      // Return mock data for development\r\n      return {\r\n        project_id: projectId,\r\n        protection_enabled: true,\r\n        runtime_monitoring: true,\r\n        last_attack: '2024-01-20T15:30:00Z',\r\n        attacks_blocked: 15,\r\n        vulnerabilities_protected: 8,\r\n        active_rules: 25,\r\n        agent_status: 'online'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start a new RAST scan\r\n   */\r\n  async startScan(projectId: number, scanConfig: any): Promise<RASTScan> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.post(API_ENDPOINTS.RAST.SCANS, {\r\n          project_id: projectId,\r\n          ...scanConfig\r\n        })\r\n      );\r\n      return response as RASTScan;\r\n    } catch (error) {\r\n      console.error(`Failed to start RAST scan for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get scan status\r\n   */\r\n  async getScanStatus(scanId: number): Promise<RASTScan> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(API_ENDPOINTS.RAST.SCAN(scanId.toString()))\r\n      );\r\n      return response as RASTScan;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch scan status for scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop a running scan\r\n   */\r\n  async stopScan(scanId: number): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.patch(API_ENDPOINTS.RAST.SCAN(scanId.toString()), { status: 'stopped' })\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to stop scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get scan report\r\n   */\r\n  async getScanReport(scanId: number): Promise<RASTReport> {\r\n    try {\r\n      const response = await apiCallWithRetry(() => \r\n        serviceRegistry.get(`${API_ENDPOINTS.RAST.SCANS}/${scanId}/report`)\r\n      );\r\n      return response as RASTReport;\r\n    } catch (error) {\r\n      console.error(`Failed to fetch report for scan ${scanId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable/disable protection for a project\r\n   */\r\n  async toggleProtection(projectId: number, enabled: boolean): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.patch(API_ENDPOINTS.RAST.PROJECT(projectId.toString()), {\r\n          protection_enabled: enabled\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to toggle protection for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update protection rules\r\n   */\r\n  async updateProtectionRules(projectId: number, rules: any): Promise<void> {\r\n    try {\r\n      await apiCallWithRetry(() => \r\n        serviceRegistry.put(`${API_ENDPOINTS.RAST.PROJECT(projectId.toString())}/protection-rules`, rules)\r\n      );\r\n    } catch (error) {\r\n      console.error(`Failed to update protection rules for project ${projectId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const rastService = new RASTService();\r\nexport default rastService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}