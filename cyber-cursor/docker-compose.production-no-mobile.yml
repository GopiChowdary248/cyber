services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cybershield-postgres
    environment:
      POSTGRES_DB: cybershield
      POSTGRES_USER: cybershield_user
      POSTGRES_PASSWORD: cybershield_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-production-db.sql:/docker-entrypoint-initdb.d/init-production-db.sql
    ports:
      - "5432:5432"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybershield_user -d cybershield"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cybershield-redis
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: cybershield-backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://cybershield_user:cybershield_password@postgres:5432/cybershield
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=your-super-secret-production-key-change-this-immediately
      - DEBUG=false
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=["http://localhost:3000","http://localhost:19006","http://localhost:8081"]
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - cybershield-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React Web App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: cybershield-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - cybershield-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cybershield-nginx
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - cybershield-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  cybershield-network:
    driver: bridge 