version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cybershield-postgres-prod
    environment:
      POSTGRES_DB: cybershield
      POSTGRES_USER: cybershield_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cybershield_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-complete-db.sql:/docker-entrypoint-initdb.d/init-complete-db.sql
    ports:
      - "5432:5432"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybershield_user -d cybershield"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cybershield-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cybershield_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cybershield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: cybershield-backend-prod
    environment:
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cybershield
      - DB_USER=cybershield_user
      - DB_PASSWORD=${DB_PASSWORD:-cybershield_secure_password}
      - DATABASE_URL=postgresql+asyncpg://cybershield_user:${DB_PASSWORD:-cybershield_secure_password}@postgres:5432/cybershield
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-cybershield_redis_password}
      
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-production-key-change-this-immediately}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # CORS
      - ALLOWED_ORIGINS=["http://localhost:3000","https://yourdomain.com"]
      - ALLOWED_HOSTS=["localhost","127.0.0.1","yourdomain.com"]
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW=60
      - RATE_LIMIT_MAX_REQUESTS=100
      - RATE_LIMIT_BURST=10
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Application
      - APP_NAME=CyberShield
      - APP_VERSION=2.0.0
      - APP_ENVIRONMENT=production
      - DEBUG=false
      
      # Security Headers
      - SECURITY_HEADERS_ENABLED=true
      - CSP_ENABLED=true
      - HSTS_ENABLED=true
      
      # Monitoring
      - HEALTH_CHECK_ENABLED=true
      - METRICS_ENABLED=true
    ports:
      - "8000:8000"
    networks:
      - cybershield-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: cybershield-frontend-prod
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_VERSION=2.0.0
      - REACT_APP_APP_NAME=CyberShield
      - HTTPS=false
      - PORT=3000
      - REACT_APP_SECURITY_HEADERS_ENABLED=true
      - REACT_APP_CSP_ENABLED=true
      - REACT_APP_HSTS_ENABLED=true
      - REACT_APP_API_TIMEOUT=30000
      - REACT_APP_API_RETRY_ATTEMPTS=3
      - REACT_APP_ENABLE_ANALYTICS=true
      - REACT_APP_ENABLE_MONITORING=true
      - REACT_APP_ENABLE_DEBUG_MODE=false
    ports:
      - "3000:3000"
    networks:
      - cybershield-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cybershield-nginx-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cybershield-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cybershield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 